{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\n/**\n * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCapabilities\n * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCapabilities } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const capabilities = await getCapabilities(client)\n */\nexport async function getCapabilities(client, parameters = {}) {\n  const {\n    account = client.account,\n    chainId\n  } = parameters;\n  const account_ = account ? parseAccount(account) : undefined;\n  const capabilities_raw = await client.request({\n    method: 'wallet_getCapabilities',\n    params: [account_?.address]\n  });\n  const capabilities = {};\n  for (const [key, value] of Object.entries(capabilities_raw)) capabilities[Number(key)] = value;\n  return typeof chainId === 'number' ? capabilities[chainId] : capabilities;\n}","map":{"version":3,"names":["parseAccount","getCapabilities","client","parameters","account","chainId","account_","undefined","capabilities_raw","request","method","params","address","capabilities","key","value","Object","entries","Number"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/viem/actions/wallet/getCapabilities.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Account } from '../../types/account.js'\nimport type {\n  WalletCapabilities,\n  WalletCapabilitiesRecord,\n} from '../../types/eip1193.js'\nimport type { Prettify } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\n\nexport type GetCapabilitiesParameters<\n  chainId extends number | undefined = undefined,\n> = {\n  account?: Account | Address | undefined\n  chainId?: chainId | number | undefined\n}\n\nexport type GetCapabilitiesReturnType<\n  chainId extends number | undefined = undefined,\n> = Prettify<\n  chainId extends number\n    ? WalletCapabilities\n    : WalletCapabilitiesRecord<WalletCapabilities, number>\n>\n\nexport type GetCapabilitiesErrorType = RequestErrorType | ErrorType\n\n/**\n * Extract capabilities that a connected wallet supports (e.g. paymasters, session keys, etc).\n *\n * - Docs: https://viem.sh/docs/actions/wallet/getCapabilities\n * - JSON-RPC Methods: [`wallet_getCapabilities`](https://eips.ethereum.org/EIPS/eip-5792)\n *\n * @param client - Client to use\n * @returns The wallet's capabilities. {@link GetCapabilitiesReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { getCapabilities } from 'viem/actions'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const capabilities = await getCapabilities(client)\n */\nexport async function getCapabilities<\n  chainId extends number | undefined = undefined,\n>(\n  client: Client<Transport>,\n  parameters: GetCapabilitiesParameters<chainId> = {},\n): Promise<GetCapabilitiesReturnType<chainId>> {\n  const { account = client.account, chainId } = parameters\n\n  const account_ = account ? parseAccount(account) : undefined\n\n  const capabilities_raw = await client.request({\n    method: 'wallet_getCapabilities',\n    params: [account_?.address],\n  })\n\n  const capabilities = {} as WalletCapabilitiesRecord<\n    WalletCapabilities,\n    number\n  >\n  for (const [key, value] of Object.entries(capabilities_raw))\n    capabilities[Number(key)] = value\n  return (\n    typeof chainId === 'number' ? capabilities[chainId] : capabilities\n  ) as never\n}\n"],"mappings":"AAEA,SAASA,YAAY,QAAQ,sCAAsC;AA6BnE;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,eAAeC,eAAeA,CAGnCC,MAAyB,EACzBC,UAAA,GAAiD,EAAE;EAEnD,MAAM;IAAEC,OAAO,GAAGF,MAAM,CAACE,OAAO;IAAEC;EAAO,CAAE,GAAGF,UAAU;EAExD,MAAMG,QAAQ,GAAGF,OAAO,GAAGJ,YAAY,CAACI,OAAO,CAAC,GAAGG,SAAS;EAE5D,MAAMC,gBAAgB,GAAG,MAAMN,MAAM,CAACO,OAAO,CAAC;IAC5CC,MAAM,EAAE,wBAAwB;IAChCC,MAAM,EAAE,CAACL,QAAQ,EAAEM,OAAO;GAC3B,CAAC;EAEF,MAAMC,YAAY,GAAG,EAGpB;EACD,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACT,gBAAgB,CAAC,EACzDK,YAAY,CAACK,MAAM,CAACJ,GAAG,CAAC,CAAC,GAAGC,KAAK;EACnC,OACE,OAAOV,OAAO,KAAK,QAAQ,GAAGQ,YAAY,CAACR,OAAO,CAAC,GAAGQ,YAAY;AAEtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}