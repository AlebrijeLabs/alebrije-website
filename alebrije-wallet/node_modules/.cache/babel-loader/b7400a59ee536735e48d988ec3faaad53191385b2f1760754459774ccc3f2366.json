{"ast":null,"code":"var _jsxFileName = \"/Users/rastavo/alebrije-project/alebrije-wallet/src/contexts/WalletContext.jsx\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ConnectionProvider, WalletProvider, useWallet as useSolanaWallet, useConnection } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { PhantomWalletAdapter, SolflareWalletAdapter } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { AlebrijeError, ErrorTypes } from '../utils/error-handler';\n\n// Import wallet adapter CSS\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\n// Create a simpler context structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AlebrijeWalletContext = /*#__PURE__*/createContext(null);\nexport function WalletContextProvider({\n  children\n}) {\n  _s2();\n  var _s = $RefreshSig$();\n  // Network configuration\n  const [network, setNetwork] = useState(WalletAdapterNetwork.Devnet);\n  const endpoint = clusterApiUrl(network);\n\n  // Get wallet adapters\n  const wallets = [new PhantomWalletAdapter(), new SolflareWalletAdapter()];\n  const switchNetwork = newNetwork => {\n    if (Object.values(WalletAdapterNetwork).includes(newNetwork)) {\n      setNetwork(newNetwork);\n      return true;\n    }\n    return false;\n  };\n\n  // Create a wrapper to provide our custom context\n  const AlebrijeWalletContextProvider = ({\n    children\n  }) => {\n    _s();\n    const {\n      publicKey,\n      connected,\n      connecting,\n      disconnect,\n      select,\n      wallet\n    } = useSolanaWallet();\n    const {\n      connection\n    } = useConnection();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const contextValue = {\n      publicKey,\n      connected,\n      connecting,\n      connection,\n      currentAccount: (publicKey === null || publicKey === void 0 ? void 0 : publicKey.toString()) || null,\n      loading,\n      error,\n      walletName: (wallet === null || wallet === void 0 ? void 0 : wallet.name) || null,\n      disconnectWallet: async () => {\n        try {\n          setLoading(true);\n          await disconnect();\n          return true;\n        } catch (err) {\n          setError(err);\n          throw err;\n        } finally {\n          setLoading(false);\n        }\n      },\n      connectWallet: async walletName => {\n        try {\n          setLoading(true);\n          if (walletName) {\n            select(walletName);\n          }\n          return connected;\n        } catch (err) {\n          setError(err);\n          throw err;\n        } finally {\n          setLoading(false);\n        }\n      },\n      switchNetwork,\n      network\n    };\n    return /*#__PURE__*/_jsxDEV(AlebrijeWalletContext.Provider, {\n      value: contextValue,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  };\n  _s(AlebrijeWalletContextProvider, \"5UQrXZqe0EO1VOfqk7LzpL/r2ms=\", false, function () {\n    return [useSolanaWallet, useConnection];\n  });\n  return /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n    endpoint: endpoint,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      wallets: wallets,\n      autoConnect: true,\n      children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n        children: /*#__PURE__*/_jsxDEV(AlebrijeWalletContextProvider, {\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom hook to use our wallet context\n_s2(WalletContextProvider, \"6Jeu459PD6jubxMaYNeOiQN3pCw=\");\n_c = WalletContextProvider;\nexport function useAlebrijeWallet() {\n  _s3();\n  const context = useContext(AlebrijeWalletContext);\n  if (!context) {\n    throw new Error('useAlebrijeWallet must be used within a WalletContextProvider');\n  }\n  return context;\n}\n\n// For backward compatibility\n_s3(useAlebrijeWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const useWallet = useAlebrijeWallet;\n\n// Export the WalletMultiButton component for easy access\nexport { WalletMultiButton };\nvar _c;\n$RefreshReg$(_c, \"WalletContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ConnectionProvider","WalletProvider","useWallet","useSolanaWallet","useConnection","WalletAdapterNetwork","PhantomWalletAdapter","SolflareWalletAdapter","WalletModalProvider","WalletMultiButton","clusterApiUrl","AlebrijeError","ErrorTypes","jsxDEV","_jsxDEV","AlebrijeWalletContext","WalletContextProvider","children","_s2","_s","$RefreshSig$","network","setNetwork","Devnet","endpoint","wallets","switchNetwork","newNetwork","Object","values","includes","AlebrijeWalletContextProvider","publicKey","connected","connecting","disconnect","select","wallet","connection","loading","setLoading","error","setError","contextValue","currentAccount","toString","walletName","name","disconnectWallet","err","connectWallet","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","autoConnect","_c","useAlebrijeWallet","_s3","context","Error","$RefreshReg$"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/contexts/WalletContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport {\n  ConnectionProvider,\n  WalletProvider,\n  useWallet as useSolanaWallet,\n  useConnection\n} from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter\n} from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { AlebrijeError, ErrorTypes } from '../utils/error-handler';\n\n// Import wallet adapter CSS\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\n// Create a simpler context structure\nconst AlebrijeWalletContext = createContext(null);\n\nexport function WalletContextProvider({ children }) {\n  // Network configuration\n  const [network, setNetwork] = useState(WalletAdapterNetwork.Devnet);\n  const endpoint = clusterApiUrl(network);\n  \n  // Get wallet adapters\n  const wallets = [\n    new PhantomWalletAdapter(),\n    new SolflareWalletAdapter()\n  ];\n  \n  const switchNetwork = (newNetwork) => {\n    if (Object.values(WalletAdapterNetwork).includes(newNetwork)) {\n      setNetwork(newNetwork);\n      return true;\n    }\n    return false;\n  };\n  \n  // Create a wrapper to provide our custom context\n  const AlebrijeWalletContextProvider = ({ children }) => {\n    const { publicKey, connected, connecting, disconnect, select, wallet } = useSolanaWallet();\n    const { connection } = useConnection();\n    \n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n    const contextValue = {\n      publicKey,\n      connected,\n      connecting,\n      connection,\n      currentAccount: publicKey?.toString() || null,\n      loading,\n      error,\n      walletName: wallet?.name || null,\n      disconnectWallet: async () => {\n        try {\n          setLoading(true);\n          await disconnect();\n          return true;\n        } catch (err) {\n          setError(err);\n          throw err;\n        } finally {\n          setLoading(false);\n        }\n      },\n      connectWallet: async (walletName) => {\n        try {\n          setLoading(true);\n          if (walletName) {\n            select(walletName);\n          }\n          return connected;\n        } catch (err) {\n          setError(err);\n          throw err;\n        } finally {\n          setLoading(false);\n        }\n      },\n      switchNetwork,\n      network\n    };\n    \n    return (\n      <AlebrijeWalletContext.Provider value={contextValue}>\n        {children}\n      </AlebrijeWalletContext.Provider>\n    );\n  };\n  \n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <AlebrijeWalletContextProvider>\n            {children}\n          </AlebrijeWalletContextProvider>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\n// Custom hook to use our wallet context\nexport function useAlebrijeWallet() {\n  const context = useContext(AlebrijeWalletContext);\n  \n  if (!context) {\n    throw new Error('useAlebrijeWallet must be used within a WalletContextProvider');\n  }\n  \n  return context;\n}\n\n// For backward compatibility\nexport const useWallet = useAlebrijeWallet;\n\n// Export the WalletMultiButton component for easy access\nexport { WalletMultiButton }; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SACEC,kBAAkB,EAClBC,cAAc,EACdC,SAAS,IAAIC,eAAe,EAC5BC,aAAa,QACR,8BAA8B;AACrC,SAASC,oBAAoB,QAAQ,6BAA6B;AAClE,SACEC,oBAAoB,EACpBC,qBAAqB,QAChB,gCAAgC;AACvC,SAASC,mBAAmB,EAAEC,iBAAiB,QAAQ,iCAAiC;AACxF,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,EAAEC,UAAU,QAAQ,wBAAwB;;AAElE;AACA,OAAO,4CAA4C;;AAEnD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,qBAAqB,gBAAGnB,aAAa,CAAC,IAAI,CAAC;AAEjD,OAAO,SAASoB,qBAAqBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAClD;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAACO,oBAAoB,CAACkB,MAAM,CAAC;EACnE,MAAMC,QAAQ,GAAGd,aAAa,CAACW,OAAO,CAAC;;EAEvC;EACA,MAAMI,OAAO,GAAG,CACd,IAAInB,oBAAoB,CAAC,CAAC,EAC1B,IAAIC,qBAAqB,CAAC,CAAC,CAC5B;EAED,MAAMmB,aAAa,GAAIC,UAAU,IAAK;IACpC,IAAIC,MAAM,CAACC,MAAM,CAACxB,oBAAoB,CAAC,CAACyB,QAAQ,CAACH,UAAU,CAAC,EAAE;MAC5DL,UAAU,CAACK,UAAU,CAAC;MACtB,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC;;EAED;EACA,MAAMI,6BAA6B,GAAGA,CAAC;IAAEd;EAAS,CAAC,KAAK;IAAAE,EAAA;IACtD,MAAM;MAAEa,SAAS;MAAEC,SAAS;MAAEC,UAAU;MAAEC,UAAU;MAAEC,MAAM;MAAEC;IAAO,CAAC,GAAGlC,eAAe,CAAC,CAAC;IAC1F,MAAM;MAAEmC;IAAW,CAAC,GAAGlC,aAAa,CAAC,CAAC;IAEtC,MAAM,CAACmC,OAAO,EAAEC,UAAU,CAAC,GAAG1C,QAAQ,CAAC,KAAK,CAAC;IAC7C,MAAM,CAAC2C,KAAK,EAAEC,QAAQ,CAAC,GAAG5C,QAAQ,CAAC,IAAI,CAAC;IAExC,MAAM6C,YAAY,GAAG;MACnBX,SAAS;MACTC,SAAS;MACTC,UAAU;MACVI,UAAU;MACVM,cAAc,EAAE,CAAAZ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEa,QAAQ,CAAC,CAAC,KAAI,IAAI;MAC7CN,OAAO;MACPE,KAAK;MACLK,UAAU,EAAE,CAAAT,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEU,IAAI,KAAI,IAAI;MAChCC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;QAC5B,IAAI;UACFR,UAAU,CAAC,IAAI,CAAC;UAChB,MAAML,UAAU,CAAC,CAAC;UAClB,OAAO,IAAI;QACb,CAAC,CAAC,OAAOc,GAAG,EAAE;UACZP,QAAQ,CAACO,GAAG,CAAC;UACb,MAAMA,GAAG;QACX,CAAC,SAAS;UACRT,UAAU,CAAC,KAAK,CAAC;QACnB;MACF,CAAC;MACDU,aAAa,EAAE,MAAOJ,UAAU,IAAK;QACnC,IAAI;UACFN,UAAU,CAAC,IAAI,CAAC;UAChB,IAAIM,UAAU,EAAE;YACdV,MAAM,CAACU,UAAU,CAAC;UACpB;UACA,OAAOb,SAAS;QAClB,CAAC,CAAC,OAAOgB,GAAG,EAAE;UACZP,QAAQ,CAACO,GAAG,CAAC;UACb,MAAMA,GAAG;QACX,CAAC,SAAS;UACRT,UAAU,CAAC,KAAK,CAAC;QACnB;MACF,CAAC;MACDd,aAAa;MACbL;IACF,CAAC;IAED,oBACEP,OAAA,CAACC,qBAAqB,CAACoC,QAAQ;MAACC,KAAK,EAAET,YAAa;MAAA1B,QAAA,EACjDA;IAAQ;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACqB,CAAC;EAErC,CAAC;EAACrC,EAAA,CAnDIY,6BAA6B;IAAA,QACwC5B,eAAe,EACjEC,aAAa;EAAA;EAmDtC,oBACEU,OAAA,CAACd,kBAAkB;IAACwB,QAAQ,EAAEA,QAAS;IAAAP,QAAA,eACrCH,OAAA,CAACb,cAAc;MAACwB,OAAO,EAAEA,OAAQ;MAACgC,WAAW;MAAAxC,QAAA,eAC3CH,OAAA,CAACN,mBAAmB;QAAAS,QAAA,eAClBH,OAAA,CAACiB,6BAA6B;UAAAd,QAAA,EAC3BA;QAAQ;UAAAoC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACoB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEzB;;AAEA;AAAAtC,GAAA,CAtFgBF,qBAAqB;AAAA0C,EAAA,GAArB1C,qBAAqB;AAuFrC,OAAO,SAAS2C,iBAAiBA,CAAA,EAAG;EAAAC,GAAA;EAClC,MAAMC,OAAO,GAAGhE,UAAU,CAACkB,qBAAqB,CAAC;EAEjD,IAAI,CAAC8C,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC;EAClF;EAEA,OAAOD,OAAO;AAChB;;AAEA;AAAAD,GAAA,CAVgBD,iBAAiB;AAWjC,OAAO,MAAMzD,SAAS,GAAGyD,iBAAiB;;AAE1C;AACA,SAASlD,iBAAiB;AAAG,IAAAiD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}