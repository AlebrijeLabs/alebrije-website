{"ast":null,"code":"/**\n * Metrics service for Alebrije wallet\n * Collects usage data to improve the application\n */\n\nclass MetricsService {\n  constructor() {\n    this.enabled = true;\n    this.userId = null;\n    this.sessionId = null;\n    this.eventQueue = [];\n\n    // Initialize session\n    this.initSession();\n  }\n\n  /**\n   * Initialize or resume a session\n   */\n  initSession() {\n    // Generate a unique session ID if none exists\n    if (!this.sessionId) {\n      this.sessionId = Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    // Try to get stored user ID\n    try {\n      const storedId = localStorage.getItem('alebrije_user_id');\n      if (storedId) {\n        this.userId = storedId;\n      } else {\n        // Generate a new anonymous ID\n        this.userId = 'anon_' + Date.now().toString(36) + Math.random().toString(36).substr(2);\n        localStorage.setItem('alebrije_user_id', this.userId);\n      }\n    } catch (error) {\n      console.error('Error accessing localStorage:', error);\n      // Fallback to a temporary ID for this session\n      this.userId = 'temp_' + Date.now().toString(36);\n    }\n  }\n\n  /**\n   * Enable or disable metrics collection\n   * @param {boolean} enabled Whether metrics should be collected\n   */\n  setEnabled(enabled) {\n    this.enabled = enabled;\n\n    // Clear queue if disabled\n    if (!enabled) {\n      this.eventQueue = [];\n    }\n  }\n\n  /**\n   * Track a feature usage event\n   * @param {string} eventName Name of the event\n   * @param {Object} data Additional data to track\n   */\n  trackEvent(eventName, data = {}) {\n    if (!this.enabled) return;\n    const event = {\n      event: eventName,\n      timestamp: new Date().toISOString(),\n      sessionId: this.sessionId,\n      userId: this.userId,\n      data: {\n        ...data,\n        userAgent: navigator.userAgent,\n        language: navigator.language\n        // Don't include PII or sensitive information\n      }\n    };\n\n    // In development, just log to console\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[METRIC]', event);\n      return;\n    }\n\n    // Queue event for sending\n    this.eventQueue.push(event);\n\n    // Flush queue if it's getting large\n    if (this.eventQueue.length >= 10) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Send queued events to the metrics collector\n   */\n  flush() {\n    if (!this.enabled || this.eventQueue.length === 0) return;\n\n    // Create a copy of the queue\n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n\n    // In a real implementation, this would send to a metrics endpoint\n    // Here we're just simulating it for the reference implementation\n\n    console.log(`[METRICS] Flushing ${events.length} events`);\n\n    // In production, you would uncomment this and implement the proper endpoint\n    /*\n    fetch('/api/metrics', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ events }),\n    })\n    .catch(error => {\n      console.error('Failed to send metrics:', error);\n      // Put events back in the queue to try again later\n      this.eventQueue = [...events, ...this.eventQueue];\n    });\n    */\n  }\n\n  /**\n   * Track a token account creation event\n   * @param {Object} data Event data\n   */\n  trackTokenAccountCreation(data) {\n    this.trackEvent('token_account_created', {\n      tokenMint: data.tokenMint,\n      success: data.success,\n      automatic: true,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * Track a token transfer event\n   * @param {Object} data Event data \n   */\n  trackTokenTransfer(data) {\n    this.trackEvent('token_transfer', {\n      tokenMint: data.tokenMint,\n      success: data.success,\n      accountCreated: data.accountCreated || false,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\n   * Track a settings change event\n   * @param {string} setting The setting that was changed\n   * @param {any} value The new value\n   */\n  trackSettingChange(setting, value) {\n    this.trackEvent('setting_changed', {\n      setting,\n      value,\n      timestamp: Date.now()\n    });\n  }\n}\nexport default new MetricsService();","map":{"version":3,"names":["MetricsService","constructor","enabled","userId","sessionId","eventQueue","initSession","Date","now","toString","Math","random","substr","storedId","localStorage","getItem","setItem","error","console","setEnabled","trackEvent","eventName","data","event","timestamp","toISOString","userAgent","navigator","language","process","env","NODE_ENV","log","push","length","flush","events","trackTokenAccountCreation","tokenMint","success","automatic","trackTokenTransfer","accountCreated","trackSettingChange","setting","value"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/services/metrics-service.js"],"sourcesContent":["/**\n * Metrics service for Alebrije wallet\n * Collects usage data to improve the application\n */\n\nclass MetricsService {\n  constructor() {\n    this.enabled = true;\n    this.userId = null;\n    this.sessionId = null;\n    this.eventQueue = [];\n    \n    // Initialize session\n    this.initSession();\n  }\n  \n  /**\n   * Initialize or resume a session\n   */\n  initSession() {\n    // Generate a unique session ID if none exists\n    if (!this.sessionId) {\n      this.sessionId = Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    \n    // Try to get stored user ID\n    try {\n      const storedId = localStorage.getItem('alebrije_user_id');\n      if (storedId) {\n        this.userId = storedId;\n      } else {\n        // Generate a new anonymous ID\n        this.userId = 'anon_' + Date.now().toString(36) + Math.random().toString(36).substr(2);\n        localStorage.setItem('alebrije_user_id', this.userId);\n      }\n    } catch (error) {\n      console.error('Error accessing localStorage:', error);\n      // Fallback to a temporary ID for this session\n      this.userId = 'temp_' + Date.now().toString(36);\n    }\n  }\n  \n  /**\n   * Enable or disable metrics collection\n   * @param {boolean} enabled Whether metrics should be collected\n   */\n  setEnabled(enabled) {\n    this.enabled = enabled;\n    \n    // Clear queue if disabled\n    if (!enabled) {\n      this.eventQueue = [];\n    }\n  }\n  \n  /**\n   * Track a feature usage event\n   * @param {string} eventName Name of the event\n   * @param {Object} data Additional data to track\n   */\n  trackEvent(eventName, data = {}) {\n    if (!this.enabled) return;\n    \n    const event = {\n      event: eventName,\n      timestamp: new Date().toISOString(),\n      sessionId: this.sessionId,\n      userId: this.userId,\n      data: {\n        ...data,\n        userAgent: navigator.userAgent,\n        language: navigator.language,\n        // Don't include PII or sensitive information\n      }\n    };\n    \n    // In development, just log to console\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[METRIC]', event);\n      return;\n    }\n    \n    // Queue event for sending\n    this.eventQueue.push(event);\n    \n    // Flush queue if it's getting large\n    if (this.eventQueue.length >= 10) {\n      this.flush();\n    }\n  }\n  \n  /**\n   * Send queued events to the metrics collector\n   */\n  flush() {\n    if (!this.enabled || this.eventQueue.length === 0) return;\n    \n    // Create a copy of the queue\n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n    \n    // In a real implementation, this would send to a metrics endpoint\n    // Here we're just simulating it for the reference implementation\n    \n    console.log(`[METRICS] Flushing ${events.length} events`);\n    \n    // In production, you would uncomment this and implement the proper endpoint\n    /*\n    fetch('/api/metrics', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ events }),\n    })\n    .catch(error => {\n      console.error('Failed to send metrics:', error);\n      // Put events back in the queue to try again later\n      this.eventQueue = [...events, ...this.eventQueue];\n    });\n    */\n  }\n  \n  /**\n   * Track a token account creation event\n   * @param {Object} data Event data\n   */\n  trackTokenAccountCreation(data) {\n    this.trackEvent('token_account_created', {\n      tokenMint: data.tokenMint,\n      success: data.success,\n      automatic: true,\n      timestamp: Date.now()\n    });\n  }\n  \n  /**\n   * Track a token transfer event\n   * @param {Object} data Event data \n   */\n  trackTokenTransfer(data) {\n    this.trackEvent('token_transfer', {\n      tokenMint: data.tokenMint,\n      success: data.success,\n      accountCreated: data.accountCreated || false,\n      timestamp: Date.now()\n    });\n  }\n  \n  /**\n   * Track a settings change event\n   * @param {string} setting The setting that was changed\n   * @param {any} value The new value\n   */\n  trackSettingChange(setting, value) {\n    this.trackEvent('setting_changed', {\n      setting,\n      value,\n      timestamp: Date.now()\n    });\n  }\n}\n\nexport default new MetricsService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}