{"ast":null,"code":"import{PublicKey}from'@solana/web3.js';// Basic implementation of wallet service\nclass WalletService{constructor(){this.wallet=null;this.publicKey=null;this.connected=false;}initialize(wallet){this.wallet=wallet;this.publicKey=wallet===null||wallet===void 0?void 0:wallet.publicKey;this.connected=!!(wallet!==null&&wallet!==void 0&&wallet.publicKey);}isConnected(){var _window$solana,_window$solflare;// Check if window.solana exists (for Phantom) or other wallet providers\nif((_window$solana=window.solana)!==null&&_window$solana!==void 0&&_window$solana.isPhantom&&window.solana.isConnected){return true;}// Check for Solflare\nif((_window$solflare=window.solflare)!==null&&_window$solflare!==void 0&&_window$solflare.isConnected){return true;}// Check our internal state\nreturn this.connected;}async getAccounts(){var _window$solana2,_window$solflare2;if(!this.isConnected()){throw new Error('Wallet not connected');}// For Phantom\nif((_window$solana2=window.solana)!==null&&_window$solana2!==void 0&&_window$solana2.isPhantom){return[window.solana.publicKey.toString()];}// For Solflare\nif((_window$solflare2=window.solflare)!==null&&_window$solflare2!==void 0&&_window$solflare2.publicKey){return[window.solflare.publicKey.toString()];}return[];}getCurrentAccount(){var _this$wallet,_this$wallet$publicKe;return((_this$wallet=this.wallet)===null||_this$wallet===void 0?void 0:(_this$wallet$publicKe=_this$wallet.publicKey)===null||_this$wallet$publicKe===void 0?void 0:_this$wallet$publicKe.toString())||null;}async signTransaction(transaction){var _window$solana3;if(!this.isConnected()){throw new Error('Wallet not connected');}// For Phantom\nif((_window$solana3=window.solana)!==null&&_window$solana3!==void 0&&_window$solana3.isPhantom){return await window.solana.signTransaction(transaction);}// For Solflare\nif(window.solflare){return await window.solflare.signTransaction(transaction);}throw new Error('No compatible wallet found');}async signAllTransactions(transactions){var _window$solana4;if(!this.isConnected()){throw new Error('Wallet not connected');}// For Phantom\nif((_window$solana4=window.solana)!==null&&_window$solana4!==void 0&&_window$solana4.isPhantom){return await window.solana.signAllTransactions(transactions);}// For Solflare\nif(window.solflare){return await window.solflare.signAllTransactions(transactions);}throw new Error('No compatible wallet found');}async sendTransaction(transaction){if(!this.connected){throw new Error('Wallet not connected');}// Implement actual transaction sending logic\nreturn{hash:'0x'+Math.random().toString(16).substring(2,66),status:'confirmed'};}}export default new WalletService();","map":{"version":3,"names":["PublicKey","WalletService","constructor","wallet","publicKey","connected","initialize","isConnected","_window$solana","_window$solflare","window","solana","isPhantom","solflare","getAccounts","_window$solana2","_window$solflare2","Error","toString","getCurrentAccount","_this$wallet","_this$wallet$publicKe","signTransaction","transaction","_window$solana3","signAllTransactions","transactions","_window$solana4","sendTransaction","hash","Math","random","substring","status"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/services/wallet-service.js"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\n\n// Basic implementation of wallet service\nclass WalletService {\n  constructor() {\n    this.wallet = null;\n    this.publicKey = null;\n    this.connected = false;\n  }\n  \n  initialize(wallet) {\n    this.wallet = wallet;\n    this.publicKey = wallet?.publicKey;\n    this.connected = !!wallet?.publicKey;\n  }\n  \n  isConnected() {\n    // Check if window.solana exists (for Phantom) or other wallet providers\n    if (window.solana?.isPhantom && window.solana.isConnected) {\n      return true;\n    }\n    \n    // Check for Solflare\n    if (window.solflare?.isConnected) {\n      return true;\n    }\n    \n    // Check our internal state\n    return this.connected;\n  }\n  \n  async getAccounts() {\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // For Phantom\n    if (window.solana?.isPhantom) {\n      return [window.solana.publicKey.toString()];\n    }\n    \n    // For Solflare\n    if (window.solflare?.publicKey) {\n      return [window.solflare.publicKey.toString()];\n    }\n    \n    return [];\n  }\n  \n  getCurrentAccount() {\n    return this.wallet?.publicKey?.toString() || null;\n  }\n  \n  async signTransaction(transaction) {\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // For Phantom\n    if (window.solana?.isPhantom) {\n      return await window.solana.signTransaction(transaction);\n    }\n    \n    // For Solflare\n    if (window.solflare) {\n      return await window.solflare.signTransaction(transaction);\n    }\n    \n    throw new Error('No compatible wallet found');\n  }\n  \n  async signAllTransactions(transactions) {\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // For Phantom\n    if (window.solana?.isPhantom) {\n      return await window.solana.signAllTransactions(transactions);\n    }\n    \n    // For Solflare\n    if (window.solflare) {\n      return await window.solflare.signAllTransactions(transactions);\n    }\n    \n    throw new Error('No compatible wallet found');\n  }\n  \n  async sendTransaction(transaction) {\n    if (!this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // Implement actual transaction sending logic\n    return {\n      hash: '0x' + Math.random().toString(16).substring(2, 66),\n      status: 'confirmed'\n    };\n  }\n}\n\nexport default new WalletService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}