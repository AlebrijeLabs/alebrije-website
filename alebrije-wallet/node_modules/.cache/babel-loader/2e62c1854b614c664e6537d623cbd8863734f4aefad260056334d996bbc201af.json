{"ast":null,"code":"var _jsxFileName = \"/Users/rastavo/alebrije-project/alebrije-wallet/src/components/Settings.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWallet } from '../contexts/WalletContext';\nimport TokenService from '../services/token-service';\nimport { NotificationType } from './Notifications';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Settings = () => {\n  _s();\n  const {\n    connected,\n    currentAccount\n  } = useWallet();\n  const [settings, setSettings] = useState({\n    autoCreateTokenAccounts: true,\n    shouldShowNotifications: true\n  });\n\n  // Load settings from TokenService\n  useEffect(() => {\n    setSettings(TokenService.getSettings());\n  }, []);\n\n  // Handle toggle for auto token account creation\n  const handleAutoTokenAccountsChange = e => {\n    const newValue = e.target.checked;\n    updateSetting('autoCreateTokenAccounts', newValue);\n\n    // Show notification about the change\n    if (window.notifyInfo) {\n      window.notifyInfo('Settings Updated', `Automatic token account creation ${newValue ? 'enabled' : 'disabled'}.`, 5000);\n    }\n  };\n\n  // Handle toggle for notifications\n  const handleNotificationsChange = e => {\n    const newValue = e.target.checked;\n    updateSetting('shouldShowNotifications', newValue);\n  };\n\n  // Update a specific setting\n  const updateSetting = (key, value) => {\n    const updatedSettings = {\n      ...settings,\n      [key]: value\n    };\n\n    // Update state\n    setSettings(updatedSettings);\n\n    // Update settings in TokenService\n    TokenService.updateSettings(updatedSettings);\n\n    // Save to local storage\n    try {\n      localStorage.setItem('alebrije_settings', JSON.stringify(updatedSettings));\n    } catch (error) {\n      console.error('Failed to save settings to local storage:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"settings-container p-4 border rounded\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Wallet Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"mb-0\",\n          children: \"Token Account Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check form-switch mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            id: \"autoCreateTokenAccounts\",\n            checked: settings.autoCreateTokenAccounts,\n            onChange: handleAutoTokenAccountsChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-check-label\",\n            htmlFor: \"autoCreateTokenAccounts\",\n            children: \"Automatically create token accounts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-text\",\n            children: \"When enabled, token accounts will be automatically created for recipients who don't have one. A small fee (~0.002 SOL) will be paid by you for each account creation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-info\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"me-3\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bi bi-info-circle-fill fs-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Why This Matters\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"On Solana, users need a specific token account for each type of token they want to receive. By enabling this feature, you'll have a much smoother experience when sending tokens to new users.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"mb-0\",\n                children: \"Without this feature, transfers could fail if the recipient doesn't already have a token account for the specific token you're sending.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"mb-0\",\n          children: \"Notification Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-check form-switch mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-check-input\",\n            type: \"checkbox\",\n            id: \"shouldShowNotifications\",\n            checked: settings.shouldShowNotifications,\n            onChange: handleNotificationsChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"form-check-label\",\n            htmlFor: \"shouldShowNotifications\",\n            children: \"Show notifications\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-text\",\n            children: \"Enable or disable toast notifications for transactions and other events.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary me-2\",\n        onClick: () => {\n          // Reset settings to defaults\n          const defaultSettings = {\n            autoCreateTokenAccounts: true,\n            shouldShowNotifications: true\n          };\n          setSettings(defaultSettings);\n          TokenService.updateSettings(defaultSettings);\n\n          // Show notification\n          if (window.notifyInfo) {\n            window.notifyInfo('Settings Reset', 'All settings have been reset to default values.', 5000);\n          }\n        },\n        children: \"Reset to Defaults\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Settings, \"fX8uWcq2DbW2X2Y+tM5xv5cTH1k=\", false, function () {\n  return [useWallet];\n});\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useState","useEffect","useWallet","TokenService","NotificationType","jsxDEV","_jsxDEV","Settings","_s","connected","currentAccount","settings","setSettings","autoCreateTokenAccounts","shouldShowNotifications","getSettings","handleAutoTokenAccountsChange","e","newValue","target","checked","updateSetting","window","notifyInfo","handleNotificationsChange","key","value","updatedSettings","updateSettings","localStorage","setItem","JSON","stringify","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","htmlFor","onClick","defaultSettings","_c","$RefreshReg$"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/components/Settings.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWallet } from '../contexts/WalletContext';\nimport TokenService from '../services/token-service';\nimport { NotificationType } from './Notifications';\n\nconst Settings = () => {\n  const { connected, currentAccount } = useWallet();\n  const [settings, setSettings] = useState({\n    autoCreateTokenAccounts: true,\n    shouldShowNotifications: true\n  });\n  \n  // Load settings from TokenService\n  useEffect(() => {\n    setSettings(TokenService.getSettings());\n  }, []);\n  \n  // Handle toggle for auto token account creation\n  const handleAutoTokenAccountsChange = (e) => {\n    const newValue = e.target.checked;\n    updateSetting('autoCreateTokenAccounts', newValue);\n    \n    // Show notification about the change\n    if (window.notifyInfo) {\n      window.notifyInfo(\n        'Settings Updated',\n        `Automatic token account creation ${newValue ? 'enabled' : 'disabled'}.`,\n        5000\n      );\n    }\n  };\n  \n  // Handle toggle for notifications\n  const handleNotificationsChange = (e) => {\n    const newValue = e.target.checked;\n    updateSetting('shouldShowNotifications', newValue);\n  };\n  \n  // Update a specific setting\n  const updateSetting = (key, value) => {\n    const updatedSettings = {\n      ...settings,\n      [key]: value\n    };\n    \n    // Update state\n    setSettings(updatedSettings);\n    \n    // Update settings in TokenService\n    TokenService.updateSettings(updatedSettings);\n    \n    // Save to local storage\n    try {\n      localStorage.setItem('alebrije_settings', JSON.stringify(updatedSettings));\n    } catch (error) {\n      console.error('Failed to save settings to local storage:', error);\n    }\n  };\n  \n  return (\n    <div className=\"settings-container p-4 border rounded\">\n      <h3>Wallet Settings</h3>\n      \n      <div className=\"card mb-4\">\n        <div className=\"card-header\">\n          <h5 className=\"mb-0\">Token Account Settings</h5>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"form-check form-switch mb-3\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"autoCreateTokenAccounts\"\n              checked={settings.autoCreateTokenAccounts}\n              onChange={handleAutoTokenAccountsChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"autoCreateTokenAccounts\">\n              Automatically create token accounts\n            </label>\n            <div className=\"form-text\">\n              When enabled, token accounts will be automatically created for recipients who don't have one.\n              A small fee (~0.002 SOL) will be paid by you for each account creation.\n            </div>\n          </div>\n          \n          <div className=\"alert alert-info\">\n            <div className=\"d-flex\">\n              <div className=\"me-3\">\n                <i className=\"bi bi-info-circle-fill fs-4\"></i>\n              </div>\n              <div>\n                <h5>Why This Matters</h5>\n                <p>\n                  On Solana, users need a specific token account for each type of token they want to receive.\n                  By enabling this feature, you'll have a much smoother experience when sending tokens to new users.\n                </p>\n                <p className=\"mb-0\">\n                  Without this feature, transfers could fail if the recipient doesn't already have a token account for the specific token you're sending.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"card mb-4\">\n        <div className=\"card-header\">\n          <h5 className=\"mb-0\">Notification Settings</h5>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"form-check form-switch mb-3\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"shouldShowNotifications\"\n              checked={settings.shouldShowNotifications}\n              onChange={handleNotificationsChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"shouldShowNotifications\">\n              Show notifications\n            </label>\n            <div className=\"form-text\">\n              Enable or disable toast notifications for transactions and other events.\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mb-4\">\n        <button \n          className=\"btn btn-secondary me-2\"\n          onClick={() => {\n            // Reset settings to defaults\n            const defaultSettings = {\n              autoCreateTokenAccounts: true,\n              shouldShowNotifications: true\n            };\n            setSettings(defaultSettings);\n            TokenService.updateSettings(defaultSettings);\n            \n            // Show notification\n            if (window.notifyInfo) {\n              window.notifyInfo(\n                'Settings Reset',\n                'All settings have been reset to default values.',\n                5000\n              );\n            }\n          }}\n        >\n          Reset to Defaults\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}