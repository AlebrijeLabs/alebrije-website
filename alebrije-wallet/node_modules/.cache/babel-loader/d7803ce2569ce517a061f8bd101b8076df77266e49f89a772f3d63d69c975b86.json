{"ast":null,"code":"var _jsxFileName = \"/Users/rastavo/alebrije-project/alebrije-wallet/src/utils/error-handler.js\";\nimport React from 'react';\n\n/**\n * Error types for the Alebrije wallet\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ErrorTypes = {\n  CONNECTION: 'CONNECTION_ERROR',\n  TRANSACTION: 'TRANSACTION_ERROR',\n  CONTRACT: 'CONTRACT_ERROR',\n  WALLET: 'WALLET_ERROR',\n  NETWORK: 'NETWORK_ERROR',\n  USER: 'USER_ERROR',\n  UNKNOWN: 'UNKNOWN_ERROR'\n};\n\n/**\n * Custom error class for Alebrije wallet\n */\nexport class AlebrijeError extends Error {\n  constructor(message, type = ErrorTypes.UNKNOWN, originalError = null) {\n    super(message);\n    this.name = 'AlebrijeError';\n    this.type = type;\n    this.originalError = originalError;\n    this.timestamp = new Date();\n  }\n\n  /**\n   * Get a user-friendly error message\n   */\n  getUserMessage() {\n    switch (this.type) {\n      case ErrorTypes.CONNECTION:\n        return 'Failed to connect to the wallet. Please check your connection and try again.';\n      case ErrorTypes.TRANSACTION:\n        return 'Transaction failed. Please check your balance and try again.';\n      case ErrorTypes.CONTRACT:\n        return 'Contract interaction failed. Please try again later.';\n      case ErrorTypes.WALLET:\n        return 'Wallet error. Please check your wallet configuration.';\n      case ErrorTypes.NETWORK:\n        return 'Network error. Please check your internet connection.';\n      case ErrorTypes.USER:\n        return this.message;\n      // User errors should already have a friendly message\n\n      default:\n        return 'An unexpected error occurred. Please try again later.';\n    }\n  }\n\n  /**\n   * Get technical details for debugging\n   */\n  getTechnicalDetails() {\n    return {\n      type: this.type,\n      message: this.message,\n      timestamp: this.timestamp.toISOString(),\n      originalError: this.originalError ? {\n        name: this.originalError.name,\n        message: this.originalError.message,\n        stack: this.originalError.stack\n      } : null\n    };\n  }\n}\n\n/**\n * Handle wallet errors and convert them to AlebrijeError\n */\nexport const handleWalletError = error => {\n  // Already an AlebrijeError, just return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n\n  // Check error message to determine type\n  const message = error.message || '';\n  if (message.includes('connect') || message.includes('provider')) {\n    return new AlebrijeError('Connection error', ErrorTypes.CONNECTION, error);\n  }\n  if (message.includes('transaction') || message.includes('fee') || message.includes('balance') || message.includes('gas')) {\n    return new AlebrijeError('Transaction error', ErrorTypes.TRANSACTION, error);\n  }\n  if (message.includes('contract') || message.includes('method')) {\n    return new AlebrijeError('Contract error', ErrorTypes.CONTRACT, error);\n  }\n  if (message.includes('network') || message.includes('internet')) {\n    return new AlebrijeError('Network error', ErrorTypes.NETWORK, error);\n  }\n\n  // Default to unknown error\n  return new AlebrijeError('Unknown error', ErrorTypes.UNKNOWN, error);\n};\n\n/**\n * Error boundary HOC for React components\n */\nexport const withErrorBoundary = (WrappedComponent, fallbackUI) => {\n  return class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        hasError: false,\n        error: null\n      };\n    }\n    static getDerivedStateFromError(error) {\n      return {\n        hasError: true,\n        error: handleWalletError(error)\n      };\n    }\n    componentDidCatch(error, errorInfo) {\n      console.error('Component error:', error);\n      console.error('Error info:', errorInfo);\n    }\n    render() {\n      if (this.state.hasError) {\n        if (typeof fallbackUI === 'function') {\n          return fallbackUI(this.state.error);\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-boundary\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Something went wrong\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.error.getUserMessage()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.setState({\n              hasError: false,\n              error: null\n            }),\n            children: \"Try Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        ...this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 14\n      }, this);\n    }\n  };\n};\n\n/**\n * Handles errors from various sources and formats them into a consistent structure\n * @param {Error|Object|string} error - The error to handle\n * @returns {Object} A standardized error object with message and code\n */\nexport const handleError = error => {\n  // Default error response\n  const errorResponse = {\n    message: 'An unknown error occurred',\n    code: 'UNKNOWN_ERROR'\n  };\n\n  // Handle string errors\n  if (typeof error === 'string') {\n    errorResponse.message = error;\n    return errorResponse;\n  }\n\n  // Handle Error objects\n  if (error instanceof Error) {\n    errorResponse.message = error.message;\n\n    // Extract Solana error codes if available\n    if (error.logs && Array.isArray(error.logs)) {\n      const errorLog = error.logs.find(log => log.includes('Error:'));\n      if (errorLog) {\n        errorResponse.message = errorLog.substring(errorLog.indexOf('Error:') + 7).trim();\n      }\n    }\n    return errorResponse;\n  }\n\n  // Handle Solana JSON RPC errors\n  if (error.code && error.message) {\n    errorResponse.code = `SOLANA_ERROR_${error.code}`;\n    errorResponse.message = error.message;\n    return errorResponse;\n  }\n  return errorResponse;\n};\n\n/**\n * Converts technical error messages to user-friendly versions\n * @param {string} message - The error message to make user-friendly\n * @returns {string} A user-friendly error message\n */\nexport const getUserFriendlyErrorMessage = message => {\n  if (message.includes('insufficient funds')) {\n    return 'You don\\'t have enough tokens for this transaction.';\n  }\n  if (message.includes('not found')) {\n    return 'The token or account could not be found. Please check the address.';\n  }\n  if (message.includes('blockhash')) {\n    return 'The network is congested. Please try again later.';\n  }\n  if (message.includes('Transaction simulation failed')) {\n    return 'Transaction failed. Please check your inputs and try again.';\n  }\n  return message;\n};","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ErrorTypes","CONNECTION","TRANSACTION","CONTRACT","WALLET","NETWORK","USER","UNKNOWN","AlebrijeError","Error","constructor","message","type","originalError","name","timestamp","Date","getUserMessage","getTechnicalDetails","toISOString","stack","handleWalletError","error","includes","withErrorBoundary","WrappedComponent","fallbackUI","ErrorBoundary","Component","props","state","hasError","getDerivedStateFromError","componentDidCatch","errorInfo","console","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","setState","handleError","errorResponse","code","logs","Array","isArray","errorLog","find","log","substring","indexOf","trim","getUserFriendlyErrorMessage"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/utils/error-handler.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Error types for the Alebrije wallet\n */\nexport const ErrorTypes = {\n  CONNECTION: 'CONNECTION_ERROR',\n  TRANSACTION: 'TRANSACTION_ERROR',\n  CONTRACT: 'CONTRACT_ERROR',\n  WALLET: 'WALLET_ERROR',\n  NETWORK: 'NETWORK_ERROR',\n  USER: 'USER_ERROR',\n  UNKNOWN: 'UNKNOWN_ERROR'\n};\n\n/**\n * Custom error class for Alebrije wallet\n */\nexport class AlebrijeError extends Error {\n  constructor(message, type = ErrorTypes.UNKNOWN, originalError = null) {\n    super(message);\n    this.name = 'AlebrijeError';\n    this.type = type;\n    this.originalError = originalError;\n    this.timestamp = new Date();\n  }\n  \n  /**\n   * Get a user-friendly error message\n   */\n  getUserMessage() {\n    switch (this.type) {\n      case ErrorTypes.CONNECTION:\n        return 'Failed to connect to the wallet. Please check your connection and try again.';\n      \n      case ErrorTypes.TRANSACTION:\n        return 'Transaction failed. Please check your balance and try again.';\n      \n      case ErrorTypes.CONTRACT:\n        return 'Contract interaction failed. Please try again later.';\n      \n      case ErrorTypes.WALLET:\n        return 'Wallet error. Please check your wallet configuration.';\n      \n      case ErrorTypes.NETWORK:\n        return 'Network error. Please check your internet connection.';\n      \n      case ErrorTypes.USER:\n        return this.message; // User errors should already have a friendly message\n      \n      default:\n        return 'An unexpected error occurred. Please try again later.';\n    }\n  }\n  \n  /**\n   * Get technical details for debugging\n   */\n  getTechnicalDetails() {\n    return {\n      type: this.type,\n      message: this.message,\n      timestamp: this.timestamp.toISOString(),\n      originalError: this.originalError ? {\n        name: this.originalError.name,\n        message: this.originalError.message,\n        stack: this.originalError.stack\n      } : null\n    };\n  }\n}\n\n/**\n * Handle wallet errors and convert them to AlebrijeError\n */\nexport const handleWalletError = (error) => {\n  // Already an AlebrijeError, just return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n\n  // Check error message to determine type\n  const message = error.message || '';\n  \n  if (message.includes('connect') || message.includes('provider')) {\n    return new AlebrijeError('Connection error', ErrorTypes.CONNECTION, error);\n  }\n  \n  if (message.includes('transaction') || message.includes('fee') || \n      message.includes('balance') || message.includes('gas')) {\n    return new AlebrijeError('Transaction error', ErrorTypes.TRANSACTION, error);\n  }\n  \n  if (message.includes('contract') || message.includes('method')) {\n    return new AlebrijeError('Contract error', ErrorTypes.CONTRACT, error);\n  }\n  \n  if (message.includes('network') || message.includes('internet')) {\n    return new AlebrijeError('Network error', ErrorTypes.NETWORK, error);\n  }\n  \n  // Default to unknown error\n  return new AlebrijeError('Unknown error', ErrorTypes.UNKNOWN, error);\n};\n\n/**\n * Error boundary HOC for React components\n */\nexport const withErrorBoundary = (WrappedComponent, fallbackUI) => {\n  return class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false, error: null };\n    }\n\n    static getDerivedStateFromError(error) {\n      return { hasError: true, error: handleWalletError(error) };\n    }\n\n    componentDidCatch(error, errorInfo) {\n      console.error('Component error:', error);\n      console.error('Error info:', errorInfo);\n    }\n\n    render() {\n      if (this.state.hasError) {\n        if (typeof fallbackUI === 'function') {\n          return fallbackUI(this.state.error);\n        }\n        \n        return (\n          <div className=\"error-boundary\">\n            <h3>Something went wrong</h3>\n            <p>{this.state.error.getUserMessage()}</p>\n            <button onClick={() => this.setState({ hasError: false, error: null })}>\n              Try Again\n            </button>\n          </div>\n        );\n      }\n\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n};\n\n/**\n * Handles errors from various sources and formats them into a consistent structure\n * @param {Error|Object|string} error - The error to handle\n * @returns {Object} A standardized error object with message and code\n */\nexport const handleError = (error) => {\n  // Default error response\n  const errorResponse = {\n    message: 'An unknown error occurred',\n    code: 'UNKNOWN_ERROR'\n  };\n\n  // Handle string errors\n  if (typeof error === 'string') {\n    errorResponse.message = error;\n    return errorResponse;\n  }\n\n  // Handle Error objects\n  if (error instanceof Error) {\n    errorResponse.message = error.message;\n    \n    // Extract Solana error codes if available\n    if (error.logs && Array.isArray(error.logs)) {\n      const errorLog = error.logs.find(log => log.includes('Error:'));\n      if (errorLog) {\n        errorResponse.message = errorLog.substring(errorLog.indexOf('Error:') + 7).trim();\n      }\n    }\n    \n    return errorResponse;\n  }\n\n  // Handle Solana JSON RPC errors\n  if (error.code && error.message) {\n    errorResponse.code = `SOLANA_ERROR_${error.code}`;\n    errorResponse.message = error.message;\n    return errorResponse;\n  }\n\n  return errorResponse;\n};\n\n/**\n * Converts technical error messages to user-friendly versions\n * @param {string} message - The error message to make user-friendly\n * @returns {string} A user-friendly error message\n */\nexport const getUserFriendlyErrorMessage = (message) => {\n  if (message.includes('insufficient funds')) {\n    return 'You don\\'t have enough tokens for this transaction.';\n  }\n  \n  if (message.includes('not found')) {\n    return 'The token or account could not be found. Please check the address.';\n  }\n  \n  if (message.includes('blockhash')) {\n    return 'The network is congested. Please try again later.';\n  }\n  \n  if (message.includes('Transaction simulation failed')) {\n    return 'Transaction failed. Please check your inputs and try again.';\n  }\n  \n  return message;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}