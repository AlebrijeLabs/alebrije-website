{"ast":null,"code":"import { createTransport } from './createTransport.js';\n/**\n * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.\n */\nexport function custom(provider) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    key = 'custom',\n    methods,\n    name = 'Custom Provider',\n    retryDelay\n  } = config;\n  return _ref => {\n    let {\n      retryCount: defaultRetryCount\n    } = _ref;\n    return createTransport({\n      key,\n      methods,\n      name,\n      request: provider.request.bind(provider),\n      retryCount: config.retryCount ?? defaultRetryCount,\n      retryDelay,\n      type: 'custom'\n    });\n  };\n}","map":{"version":3,"names":["createTransport","custom","provider","config","arguments","length","undefined","key","methods","name","retryDelay","_ref","retryCount","defaultRetryCount","request","bind","type"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@reown/appkit/node_modules/@walletconnect/utils/node_modules/viem/clients/transports/custom.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type CreateTransportErrorType,\n  type Transport,\n  type TransportConfig,\n  createTransport,\n} from './createTransport.js'\n\ntype EthereumProvider = { request(...args: any): Promise<any> }\n\nexport type CustomTransportConfig = {\n  /** The key of the transport. */\n  key?: TransportConfig['key'] | undefined\n  /** Methods to include or exclude from executing RPC requests. */\n  methods?: TransportConfig['methods'] | undefined\n  /** The name of the transport. */\n  name?: TransportConfig['name'] | undefined\n  /** The max number of times to retry. */\n  retryCount?: TransportConfig['retryCount'] | undefined\n  /** The base delay (in ms) between retries. */\n  retryDelay?: TransportConfig['retryDelay'] | undefined\n}\n\nexport type CustomTransport = Transport<\n  'custom',\n  {},\n  EthereumProvider['request']\n>\n\nexport type CustomTransportErrorType = CreateTransportErrorType | ErrorType\n\n/**\n * @description Creates a custom transport given an EIP-1193 compliant `request` attribute.\n */\nexport function custom<provider extends EthereumProvider>(\n  provider: provider,\n  config: CustomTransportConfig = {},\n): CustomTransport {\n  const {\n    key = 'custom',\n    methods,\n    name = 'Custom Provider',\n    retryDelay,\n  } = config\n  return ({ retryCount: defaultRetryCount }) =>\n    createTransport({\n      key,\n      methods,\n      name,\n      request: provider.request.bind(provider),\n      retryCount: config.retryCount ?? defaultRetryCount,\n      retryDelay,\n      type: 'custom',\n    })\n}\n"],"mappings":"AACA,SAIEA,eAAe,QACV,sBAAsB;AAyB7B;;;AAGA,OAAM,SAAUC,MAAMA,CACpBC,QAAkB,EACgB;EAAA,IAAlCC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAgC,EAAE;EAElC,MAAM;IACJG,GAAG,GAAG,QAAQ;IACdC,OAAO;IACPC,IAAI,GAAG,iBAAiB;IACxBC;EAAU,CACX,GAAGP,MAAM;EACV,OAAOQ,IAAA;IAAA,IAAC;MAAEC,UAAU,EAAEC;IAAiB,CAAE,GAAAF,IAAA;IAAA,OACvCX,eAAe,CAAC;MACdO,GAAG;MACHC,OAAO;MACPC,IAAI;MACJK,OAAO,EAAEZ,QAAQ,CAACY,OAAO,CAACC,IAAI,CAACb,QAAQ,CAAC;MACxCU,UAAU,EAAET,MAAM,CAACS,UAAU,IAAIC,iBAAiB;MAClDH,UAAU;MACVM,IAAI,EAAE;KACP,CAAC;EAAA;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}