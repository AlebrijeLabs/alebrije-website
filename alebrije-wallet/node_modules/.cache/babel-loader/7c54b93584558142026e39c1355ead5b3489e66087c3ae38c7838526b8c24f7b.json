{"ast":null,"code":"/**\n * Metrics service for Alebrije wallet\n * Collects usage data to improve the application\n */class MetricsService{constructor(){this.enabled=true;this.userId=null;this.sessionId=null;this.eventQueue=[];// Initialize session\nthis.initSession();}/**\n   * Initialize or resume a session\n   */initSession(){// Generate a unique session ID if none exists\nif(!this.sessionId){this.sessionId=Date.now().toString(36)+Math.random().toString(36).substr(2);}// Try to get stored user ID\ntry{const storedId=localStorage.getItem('alebrije_user_id');if(storedId){this.userId=storedId;}else{// Generate a new anonymous ID\nthis.userId='anon_'+Date.now().toString(36)+Math.random().toString(36).substr(2);localStorage.setItem('alebrije_user_id',this.userId);}}catch(error){console.error('Error accessing localStorage:',error);// Fallback to a temporary ID for this session\nthis.userId='temp_'+Date.now().toString(36);}}/**\n   * Enable or disable metrics collection\n   * @param {boolean} enabled Whether metrics should be collected\n   */setEnabled(enabled){this.enabled=enabled;// Clear queue if disabled\nif(!enabled){this.eventQueue=[];}}/**\n   * Track a feature usage event\n   * @param {string} eventName Name of the event\n   * @param {Object} data Additional data to track\n   */trackEvent(eventName){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!this.enabled)return;const event={event:eventName,timestamp:new Date().toISOString(),sessionId:this.sessionId,userId:this.userId,data:{...data,userAgent:navigator.userAgent,language:navigator.language// Don't include PII or sensitive information\n}};// In development, just log to console\nif(process.env.NODE_ENV==='development'){console.log('[METRIC]',event);return;}// Queue event for sending\nthis.eventQueue.push(event);// Flush queue if it's getting large\nif(this.eventQueue.length>=10){this.flush();}}/**\n   * Send queued events to the metrics collector\n   */flush(){if(!this.enabled||this.eventQueue.length===0)return;// Create a copy of the queue\nconst events=[...this.eventQueue];this.eventQueue=[];// In a real implementation, this would send to a metrics endpoint\n// Here we're just simulating it for the reference implementation\nconsole.log(`[METRICS] Flushing ${events.length} events`);// In production, you would uncomment this and implement the proper endpoint\n/*\n    fetch('/api/metrics', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ events }),\n    })\n    .catch(error => {\n      console.error('Failed to send metrics:', error);\n      // Put events back in the queue to try again later\n      this.eventQueue = [...events, ...this.eventQueue];\n    });\n    */}/**\n   * Track a token account creation event\n   * @param {Object} data Event data\n   */trackTokenAccountCreation(data){this.trackEvent('token_account_created',{tokenMint:data.tokenMint,success:data.success,automatic:true,timestamp:Date.now()});}/**\n   * Track a token transfer event\n   * @param {Object} data Event data \n   */trackTokenTransfer(data){this.trackEvent('token_transfer',{tokenMint:data.tokenMint,success:data.success,accountCreated:data.accountCreated||false,timestamp:Date.now()});}/**\n   * Track a settings change event\n   * @param {string} setting The setting that was changed\n   * @param {any} value The new value\n   */trackSettingChange(setting,value){this.trackEvent('setting_changed',{setting,value,timestamp:Date.now()});}}export default new MetricsService();","map":{"version":3,"names":["MetricsService","constructor","enabled","userId","sessionId","eventQueue","initSession","Date","now","toString","Math","random","substr","storedId","localStorage","getItem","setItem","error","console","setEnabled","trackEvent","eventName","data","arguments","length","undefined","event","timestamp","toISOString","userAgent","navigator","language","process","env","NODE_ENV","log","push","flush","events","trackTokenAccountCreation","tokenMint","success","automatic","trackTokenTransfer","accountCreated","trackSettingChange","setting","value"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/services/metrics-service.js"],"sourcesContent":["/**\n * Metrics service for Alebrije wallet\n * Collects usage data to improve the application\n */\n\nclass MetricsService {\n  constructor() {\n    this.enabled = true;\n    this.userId = null;\n    this.sessionId = null;\n    this.eventQueue = [];\n    \n    // Initialize session\n    this.initSession();\n  }\n  \n  /**\n   * Initialize or resume a session\n   */\n  initSession() {\n    // Generate a unique session ID if none exists\n    if (!this.sessionId) {\n      this.sessionId = Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    \n    // Try to get stored user ID\n    try {\n      const storedId = localStorage.getItem('alebrije_user_id');\n      if (storedId) {\n        this.userId = storedId;\n      } else {\n        // Generate a new anonymous ID\n        this.userId = 'anon_' + Date.now().toString(36) + Math.random().toString(36).substr(2);\n        localStorage.setItem('alebrije_user_id', this.userId);\n      }\n    } catch (error) {\n      console.error('Error accessing localStorage:', error);\n      // Fallback to a temporary ID for this session\n      this.userId = 'temp_' + Date.now().toString(36);\n    }\n  }\n  \n  /**\n   * Enable or disable metrics collection\n   * @param {boolean} enabled Whether metrics should be collected\n   */\n  setEnabled(enabled) {\n    this.enabled = enabled;\n    \n    // Clear queue if disabled\n    if (!enabled) {\n      this.eventQueue = [];\n    }\n  }\n  \n  /**\n   * Track a feature usage event\n   * @param {string} eventName Name of the event\n   * @param {Object} data Additional data to track\n   */\n  trackEvent(eventName, data = {}) {\n    if (!this.enabled) return;\n    \n    const event = {\n      event: eventName,\n      timestamp: new Date().toISOString(),\n      sessionId: this.sessionId,\n      userId: this.userId,\n      data: {\n        ...data,\n        userAgent: navigator.userAgent,\n        language: navigator.language,\n        // Don't include PII or sensitive information\n      }\n    };\n    \n    // In development, just log to console\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[METRIC]', event);\n      return;\n    }\n    \n    // Queue event for sending\n    this.eventQueue.push(event);\n    \n    // Flush queue if it's getting large\n    if (this.eventQueue.length >= 10) {\n      this.flush();\n    }\n  }\n  \n  /**\n   * Send queued events to the metrics collector\n   */\n  flush() {\n    if (!this.enabled || this.eventQueue.length === 0) return;\n    \n    // Create a copy of the queue\n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n    \n    // In a real implementation, this would send to a metrics endpoint\n    // Here we're just simulating it for the reference implementation\n    \n    console.log(`[METRICS] Flushing ${events.length} events`);\n    \n    // In production, you would uncomment this and implement the proper endpoint\n    /*\n    fetch('/api/metrics', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ events }),\n    })\n    .catch(error => {\n      console.error('Failed to send metrics:', error);\n      // Put events back in the queue to try again later\n      this.eventQueue = [...events, ...this.eventQueue];\n    });\n    */\n  }\n  \n  /**\n   * Track a token account creation event\n   * @param {Object} data Event data\n   */\n  trackTokenAccountCreation(data) {\n    this.trackEvent('token_account_created', {\n      tokenMint: data.tokenMint,\n      success: data.success,\n      automatic: true,\n      timestamp: Date.now()\n    });\n  }\n  \n  /**\n   * Track a token transfer event\n   * @param {Object} data Event data \n   */\n  trackTokenTransfer(data) {\n    this.trackEvent('token_transfer', {\n      tokenMint: data.tokenMint,\n      success: data.success,\n      accountCreated: data.accountCreated || false,\n      timestamp: Date.now()\n    });\n  }\n  \n  /**\n   * Track a settings change event\n   * @param {string} setting The setting that was changed\n   * @param {any} value The new value\n   */\n  trackSettingChange(setting, value) {\n    this.trackEvent('setting_changed', {\n      setting,\n      value,\n      timestamp: Date.now()\n    });\n  }\n}\n\nexport default new MetricsService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}