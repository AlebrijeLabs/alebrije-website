{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\n\n// Basic implementation of wallet service\nclass WalletService {\n  constructor() {\n    this.wallet = null;\n    this.publicKey = null;\n    this.connected = false;\n  }\n  initialize(wallet) {\n    this.wallet = wallet;\n    this.publicKey = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey;\n    this.connected = !!(wallet !== null && wallet !== void 0 && wallet.publicKey);\n  }\n  isConnected() {\n    var _window$solana, _window$solflare;\n    // Check if window.solana exists (for Phantom) or other wallet providers\n    if ((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom && window.solana.isConnected) {\n      return true;\n    }\n\n    // Check for Solflare\n    if ((_window$solflare = window.solflare) !== null && _window$solflare !== void 0 && _window$solflare.isConnected) {\n      return true;\n    }\n\n    // Check our internal state\n    return this.connected;\n  }\n  async getAccounts() {\n    var _window$solana2, _window$solflare2;\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n\n    // For Phantom\n    if ((_window$solana2 = window.solana) !== null && _window$solana2 !== void 0 && _window$solana2.isPhantom) {\n      return [window.solana.publicKey.toString()];\n    }\n\n    // For Solflare\n    if ((_window$solflare2 = window.solflare) !== null && _window$solflare2 !== void 0 && _window$solflare2.publicKey) {\n      return [window.solflare.publicKey.toString()];\n    }\n    return [];\n  }\n  getCurrentAccount() {\n    var _this$wallet, _this$wallet$publicKe;\n    return ((_this$wallet = this.wallet) === null || _this$wallet === void 0 ? void 0 : (_this$wallet$publicKe = _this$wallet.publicKey) === null || _this$wallet$publicKe === void 0 ? void 0 : _this$wallet$publicKe.toString()) || null;\n  }\n  async signTransaction(transaction) {\n    var _window$solana3;\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n\n    // For Phantom\n    if ((_window$solana3 = window.solana) !== null && _window$solana3 !== void 0 && _window$solana3.isPhantom) {\n      return await window.solana.signTransaction(transaction);\n    }\n\n    // For Solflare\n    if (window.solflare) {\n      return await window.solflare.signTransaction(transaction);\n    }\n    throw new Error('No compatible wallet found');\n  }\n  async signAllTransactions(transactions) {\n    var _window$solana4;\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n\n    // For Phantom\n    if ((_window$solana4 = window.solana) !== null && _window$solana4 !== void 0 && _window$solana4.isPhantom) {\n      return await window.solana.signAllTransactions(transactions);\n    }\n\n    // For Solflare\n    if (window.solflare) {\n      return await window.solflare.signAllTransactions(transactions);\n    }\n    throw new Error('No compatible wallet found');\n  }\n  async sendTransaction(transaction) {\n    if (!this.connected) {\n      throw new Error('Wallet not connected');\n    }\n\n    // Implement actual transaction sending logic\n    return {\n      hash: '0x' + Math.random().toString(16).substring(2, 66),\n      status: 'confirmed'\n    };\n  }\n}\nexport default new WalletService();","map":{"version":3,"names":["PublicKey","WalletService","constructor","wallet","publicKey","connected","initialize","isConnected","_window$solana","_window$solflare","window","solana","isPhantom","solflare","getAccounts","_window$solana2","_window$solflare2","Error","toString","getCurrentAccount","_this$wallet","_this$wallet$publicKe","signTransaction","transaction","_window$solana3","signAllTransactions","transactions","_window$solana4","sendTransaction","hash","Math","random","substring","status"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/services/wallet-service.js"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\n\n// Basic implementation of wallet service\nclass WalletService {\n  constructor() {\n    this.wallet = null;\n    this.publicKey = null;\n    this.connected = false;\n  }\n  \n  initialize(wallet) {\n    this.wallet = wallet;\n    this.publicKey = wallet?.publicKey;\n    this.connected = !!wallet?.publicKey;\n  }\n  \n  isConnected() {\n    // Check if window.solana exists (for Phantom) or other wallet providers\n    if (window.solana?.isPhantom && window.solana.isConnected) {\n      return true;\n    }\n    \n    // Check for Solflare\n    if (window.solflare?.isConnected) {\n      return true;\n    }\n    \n    // Check our internal state\n    return this.connected;\n  }\n  \n  async getAccounts() {\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // For Phantom\n    if (window.solana?.isPhantom) {\n      return [window.solana.publicKey.toString()];\n    }\n    \n    // For Solflare\n    if (window.solflare?.publicKey) {\n      return [window.solflare.publicKey.toString()];\n    }\n    \n    return [];\n  }\n  \n  getCurrentAccount() {\n    return this.wallet?.publicKey?.toString() || null;\n  }\n  \n  async signTransaction(transaction) {\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // For Phantom\n    if (window.solana?.isPhantom) {\n      return await window.solana.signTransaction(transaction);\n    }\n    \n    // For Solflare\n    if (window.solflare) {\n      return await window.solflare.signTransaction(transaction);\n    }\n    \n    throw new Error('No compatible wallet found');\n  }\n  \n  async signAllTransactions(transactions) {\n    if (!this.isConnected()) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // For Phantom\n    if (window.solana?.isPhantom) {\n      return await window.solana.signAllTransactions(transactions);\n    }\n    \n    // For Solflare\n    if (window.solflare) {\n      return await window.solflare.signAllTransactions(transactions);\n    }\n    \n    throw new Error('No compatible wallet found');\n  }\n  \n  async sendTransaction(transaction) {\n    if (!this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // Implement actual transaction sending logic\n    return {\n      hash: '0x' + Math.random().toString(16).substring(2, 66),\n      status: 'confirmed'\n    };\n  }\n}\n\nexport default new WalletService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}