{"ast":null,"code":"import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";/**\n * Error types for the Alebrije wallet\n */export const ErrorTypes={CONNECTION:'CONNECTION_ERROR',TRANSACTION:'TRANSACTION_ERROR',CONTRACT:'CONTRACT_ERROR',WALLET:'WALLET_ERROR',NETWORK:'NETWORK_ERROR',USER:'USER_ERROR',UNKNOWN:'UNKNOWN_ERROR'};/**\n * Custom error class for Alebrije wallet\n */export class AlebrijeError extends Error{constructor(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ErrorTypes.UNKNOWN;let originalError=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;super(message);this.name='AlebrijeError';this.type=type;this.originalError=originalError;this.timestamp=new Date();}/**\n   * Get a user-friendly error message\n   */getUserMessage(){switch(this.type){case ErrorTypes.CONNECTION:return'Failed to connect to the network. Please check your internet connection and try again.';case ErrorTypes.TRANSACTION:return'Transaction failed. This could be due to insufficient funds or network congestion.';case ErrorTypes.CONTRACT:return'Smart contract interaction failed. The operation could not be completed.';case ErrorTypes.WALLET:return'Wallet error. Please make sure your wallet is properly set up and try again.';case ErrorTypes.NETWORK:return'Network error. Please check if you are connected to the correct blockchain network.';case ErrorTypes.USER:return this.message;// For user errors, show the actual message\ndefault:return'An unexpected error occurred. Please try again later.';}}/**\n   * Get technical details for logging\n   */getTechnicalDetails(){return{type:this.type,message:this.message,originalError:this.originalError?{name:this.originalError.name,message:this.originalError.message,stack:this.originalError.stack}:null,timestamp:this.timestamp};}}/**\n * Error handler for wallet operations\n */export const handleWalletError=function(error){let defaultMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Operation failed';console.error('Wallet error:',error);// If it's already an AlebrijeError, return it\nif(error instanceof AlebrijeError){return error;}// Determine error type based on message or code\nlet errorType=ErrorTypes.UNKNOWN;let errorMessage=defaultMessage;// Handle Web3 and Ethereum provider errors\nif(error.code){switch(error.code){case 4001:// User rejected the request\nerrorType=ErrorTypes.USER;errorMessage='Request was rejected by the user';break;case-32602:// Invalid parameters\nerrorType=ErrorTypes.USER;errorMessage='Invalid transaction parameters';break;case-32603:// Internal error\nerrorType=ErrorTypes.WALLET;errorMessage='Wallet internal error';break;case-32000:case-32001:case-32002:case-32003:// RPC errors\nerrorType=ErrorTypes.NETWORK;errorMessage='Network communication error';break;}}// Check for common error messages\nconst errorString=error.message?error.message.toLowerCase():'';if(errorString.includes('insufficient funds')){errorType=ErrorTypes.USER;errorMessage='Insufficient funds for this transaction';}else if(errorString.includes('gas')){errorType=ErrorTypes.TRANSACTION;errorMessage='Gas estimation failed or gas limit exceeded';}else if(errorString.includes('nonce')){errorType=ErrorTypes.TRANSACTION;errorMessage='Transaction nonce error. Try resetting your wallet.';}else if(errorString.includes('rejected')||errorString.includes('denied')){errorType=ErrorTypes.USER;errorMessage='Transaction was rejected';}else if(errorString.includes('network')||errorString.includes('connection')){errorType=ErrorTypes.CONNECTION;errorMessage='Network connection error';}else if(errorString.includes('timeout')){errorType=ErrorTypes.CONNECTION;errorMessage='Request timed out. The network may be congested.';}return new AlebrijeError(errorMessage,errorType,error);};/**\n * Error boundary component for React\n */export const withErrorBoundary=(WrappedComponent,fallbackUI)=>{return class ErrorBoundary extends React.Component{constructor(props){super(props);this.state={hasError:false,error:null};}static getDerivedStateFromError(error){return{hasError:true,error};}componentDidCatch(error,errorInfo){console.error('Component error:',error,errorInfo);// You could also log to an error reporting service here\n}render(){if(this.state.hasError){const error=this.state.error instanceof AlebrijeError?this.state.error:new AlebrijeError('Component error',ErrorTypes.UNKNOWN,this.state.error);return fallbackUI?fallbackUI(error):/*#__PURE__*/_jsxs(\"div\",{className:\"error-boundary\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Something went wrong\"}),/*#__PURE__*/_jsx(\"p\",{children:error.getUserMessage()}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>this.setState({hasError:false,error:null}),children:\"Try Again\"})]});}return/*#__PURE__*/_jsx(WrappedComponent,{...this.props});}};};","map":{"version":3,"names":["ErrorTypes","CONNECTION","TRANSACTION","CONTRACT","WALLET","NETWORK","USER","UNKNOWN","AlebrijeError","Error","constructor","message","type","arguments","length","undefined","originalError","name","timestamp","Date","getUserMessage","getTechnicalDetails","stack","handleWalletError","error","defaultMessage","console","errorType","errorMessage","code","errorString","toLowerCase","includes","withErrorBoundary","WrappedComponent","fallbackUI","ErrorBoundary","React","Component","props","state","hasError","getDerivedStateFromError","componentDidCatch","errorInfo","render","_jsxs","className","children","_jsx","onClick","setState"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/utils/error-handler.js"],"sourcesContent":["/**\n * Error types for the Alebrije wallet\n */\nexport const ErrorTypes = {\n  CONNECTION: 'CONNECTION_ERROR',\n  TRANSACTION: 'TRANSACTION_ERROR',\n  CONTRACT: 'CONTRACT_ERROR',\n  WALLET: 'WALLET_ERROR',\n  NETWORK: 'NETWORK_ERROR',\n  USER: 'USER_ERROR',\n  UNKNOWN: 'UNKNOWN_ERROR'\n};\n\n/**\n * Custom error class for Alebrije wallet\n */\nexport class AlebrijeError extends Error {\n  constructor(message, type = ErrorTypes.UNKNOWN, originalError = null) {\n    super(message);\n    this.name = 'AlebrijeError';\n    this.type = type;\n    this.originalError = originalError;\n    this.timestamp = new Date();\n  }\n  \n  /**\n   * Get a user-friendly error message\n   */\n  getUserMessage() {\n    switch (this.type) {\n      case ErrorTypes.CONNECTION:\n        return 'Failed to connect to the network. Please check your internet connection and try again.';\n      \n      case ErrorTypes.TRANSACTION:\n        return 'Transaction failed. This could be due to insufficient funds or network congestion.';\n      \n      case ErrorTypes.CONTRACT:\n        return 'Smart contract interaction failed. The operation could not be completed.';\n      \n      case ErrorTypes.WALLET:\n        return 'Wallet error. Please make sure your wallet is properly set up and try again.';\n      \n      case ErrorTypes.NETWORK:\n        return 'Network error. Please check if you are connected to the correct blockchain network.';\n      \n      case ErrorTypes.USER:\n        return this.message; // For user errors, show the actual message\n      \n      default:\n        return 'An unexpected error occurred. Please try again later.';\n    }\n  }\n  \n  /**\n   * Get technical details for logging\n   */\n  getTechnicalDetails() {\n    return {\n      type: this.type,\n      message: this.message,\n      originalError: this.originalError ? {\n        name: this.originalError.name,\n        message: this.originalError.message,\n        stack: this.originalError.stack\n      } : null,\n      timestamp: this.timestamp\n    };\n  }\n}\n\n/**\n * Error handler for wallet operations\n */\nexport const handleWalletError = (error, defaultMessage = 'Operation failed') => {\n  console.error('Wallet error:', error);\n  \n  // If it's already an AlebrijeError, return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n  \n  // Determine error type based on message or code\n  let errorType = ErrorTypes.UNKNOWN;\n  let errorMessage = defaultMessage;\n  \n  // Handle Web3 and Ethereum provider errors\n  if (error.code) {\n    switch (error.code) {\n      case 4001:\n        // User rejected the request\n        errorType = ErrorTypes.USER;\n        errorMessage = 'Request was rejected by the user';\n        break;\n      \n      case -32602:\n        // Invalid parameters\n        errorType = ErrorTypes.USER;\n        errorMessage = 'Invalid transaction parameters';\n        break;\n      \n      case -32603:\n        // Internal error\n        errorType = ErrorTypes.WALLET;\n        errorMessage = 'Wallet internal error';\n        break;\n      \n      case -32000:\n      case -32001:\n      case -32002:\n      case -32003:\n        // RPC errors\n        errorType = ErrorTypes.NETWORK;\n        errorMessage = 'Network communication error';\n        break;\n    }\n  }\n  \n  // Check for common error messages\n  const errorString = error.message ? error.message.toLowerCase() : '';\n  \n  if (errorString.includes('insufficient funds')) {\n    errorType = ErrorTypes.USER;\n    errorMessage = 'Insufficient funds for this transaction';\n  } else if (errorString.includes('gas')) {\n    errorType = ErrorTypes.TRANSACTION;\n    errorMessage = 'Gas estimation failed or gas limit exceeded';\n  } else if (errorString.includes('nonce')) {\n    errorType = ErrorTypes.TRANSACTION;\n    errorMessage = 'Transaction nonce error. Try resetting your wallet.';\n  } else if (errorString.includes('rejected') || errorString.includes('denied')) {\n    errorType = ErrorTypes.USER;\n    errorMessage = 'Transaction was rejected';\n  } else if (errorString.includes('network') || errorString.includes('connection')) {\n    errorType = ErrorTypes.CONNECTION;\n    errorMessage = 'Network connection error';\n  } else if (errorString.includes('timeout')) {\n    errorType = ErrorTypes.CONNECTION;\n    errorMessage = 'Request timed out. The network may be congested.';\n  }\n  \n  return new AlebrijeError(errorMessage, errorType, error);\n};\n\n/**\n * Error boundary component for React\n */\nexport const withErrorBoundary = (WrappedComponent, fallbackUI) => {\n  return class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false, error: null };\n    }\n\n    static getDerivedStateFromError(error) {\n      return { hasError: true, error };\n    }\n\n    componentDidCatch(error, errorInfo) {\n      console.error('Component error:', error, errorInfo);\n      // You could also log to an error reporting service here\n    }\n\n    render() {\n      if (this.state.hasError) {\n        const error = this.state.error instanceof AlebrijeError \n          ? this.state.error \n          : new AlebrijeError('Component error', ErrorTypes.UNKNOWN, this.state.error);\n        \n        return fallbackUI ? fallbackUI(error) : (\n          <div className=\"error-boundary\">\n            <h3>Something went wrong</h3>\n            <p>{error.getUserMessage()}</p>\n            <button onClick={() => this.setState({ hasError: false, error: null })}>\n              Try Again\n            </button>\n          </div>\n        );\n      }\n\n      return <WrappedComponent {...this.props} />;\n    }\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}