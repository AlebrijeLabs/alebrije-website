{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback}from'react';import{ConnectionProvider,WalletProvider,useWallet as useSolanaWallet}from'@solana/wallet-adapter-react';import{WalletAdapterNetwork}from'@solana/wallet-adapter-base';import{PhantomWalletAdapter,SolflareWalletAdapter}from'@solana/wallet-adapter-wallets';import{WalletModalProvider,WalletMultiButton}from'@solana/wallet-adapter-react-ui';import{clusterApiUrl}from'@solana/web3.js';import{AlebrijeError,ErrorTypes}from'../utils/error-handler';// Import wallet adapter CSS\nimport'@solana/wallet-adapter-react-ui/styles.css';// Create the context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const WalletContext=/*#__PURE__*/createContext(null);export function WalletContextProvider(_ref){let{children}=_ref;// Network configuration - allow switching between networks\nconst[network,setNetwork]=useState(WalletAdapterNetwork.Devnet);const endpoint=clusterApiUrl(network);// Wallet state\nconst[accounts,setAccounts]=useState([]);const[currentAccount,setCurrentAccount]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Get all supported wallet adapters\nconst wallets=[new PhantomWalletAdapter(),new SolflareWalletAdapter()];// Create a wrapper component to access the Solana wallet context\nconst WalletContextWrapper=_ref2=>{let{children}=_ref2;const{publicKey,connected,connecting,disconnect,select,wallet,wallets}=useSolanaWallet();useEffect(()=>{if(connected&&publicKey){const newAccounts=[publicKey.toString()];setAccounts(newAccounts);setCurrentAccount(publicKey.toString());}else{setAccounts([]);setCurrentAccount(null);}},[connected,publicKey]);const connectWallet=useCallback(async walletName=>{try{setLoading(true);setError(null);if(walletName){const selectedWallet=wallets.find(w=>w.name.toLowerCase()===walletName.toLowerCase());if(selectedWallet){select(selectedWallet.name);}else{throw new AlebrijeError(`Wallet ${walletName} not found`,ErrorTypes.WALLET);}}return connected;}catch(err){const alebrijeError=new AlebrijeError('Failed to connect wallet',ErrorTypes.CONNECTION,err);setError(alebrijeError);throw alebrijeError;}finally{setLoading(false);}},[connected,select,wallets]);const disconnectWallet=useCallback(async()=>{try{setLoading(true);setError(null);await disconnect();setAccounts([]);setCurrentAccount(null);return true;}catch(err){const alebrijeError=new AlebrijeError('Failed to disconnect wallet',ErrorTypes.CONNECTION,err);setError(alebrijeError);throw alebrijeError;}finally{setLoading(false);}},[disconnect]);const switchNetwork=useCallback(newNetwork=>{if(Object.values(WalletAdapterNetwork).includes(newNetwork)){setNetwork(newNetwork);return true;}return false;},[]);const contextValue={connected,connecting,accounts,currentAccount,loading,error,walletName:(wallet===null||wallet===void 0?void 0:wallet.name)||null,availableWallets:wallets.map(w=>w.name),connectWallet,disconnectWallet,switchNetwork,network};return/*#__PURE__*/React.cloneElement(children,{walletContext:contextValue});};return/*#__PURE__*/_jsx(ConnectionProvider,{endpoint:endpoint,children:/*#__PURE__*/_jsx(WalletProvider,{wallets:wallets,autoConnect:true,children:/*#__PURE__*/_jsx(WalletModalProvider,{children:/*#__PURE__*/_jsx(WalletContext.Provider,{value:null,children:/*#__PURE__*/_jsx(WalletContextWrapper,{children:children})})})})});}// Custom hook to use the wallet context\nexport function useWallet(){const context=useContext(WalletContext)||React.useContext&&React.useContext(WalletContext)||window.reactProps&&window.reactProps.walletContext;if(!context){throw new Error('useWallet must be used within a WalletContextProvider');}return context;}// Export the WalletMultiButton component for easy access\nexport{WalletMultiButton};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","ConnectionProvider","WalletProvider","useWallet","useSolanaWallet","WalletAdapterNetwork","PhantomWalletAdapter","SolflareWalletAdapter","WalletModalProvider","WalletMultiButton","clusterApiUrl","AlebrijeError","ErrorTypes","jsx","_jsx","WalletContext","WalletContextProvider","_ref","children","network","setNetwork","Devnet","endpoint","accounts","setAccounts","currentAccount","setCurrentAccount","loading","setLoading","error","setError","wallets","WalletContextWrapper","_ref2","publicKey","connected","connecting","disconnect","select","wallet","newAccounts","toString","connectWallet","walletName","selectedWallet","find","w","name","toLowerCase","WALLET","err","alebrijeError","CONNECTION","disconnectWallet","switchNetwork","newNetwork","Object","values","includes","contextValue","availableWallets","map","cloneElement","walletContext","autoConnect","Provider","value","context","window","reactProps","Error"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/contexts/WalletContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { ConnectionProvider, WalletProvider, useWallet as useSolanaWallet } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { \n  PhantomWalletAdapter, \n  SolflareWalletAdapter\n} from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { AlebrijeError, ErrorTypes } from '../utils/error-handler';\n\n// Import wallet adapter CSS\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\n// Create the context\nconst WalletContext = createContext(null);\n\nexport function WalletContextProvider({ children }) {\n  // Network configuration - allow switching between networks\n  const [network, setNetwork] = useState(WalletAdapterNetwork.Devnet);\n  const endpoint = clusterApiUrl(network);\n  \n  // Wallet state\n  const [accounts, setAccounts] = useState([]);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Get all supported wallet adapters\n  const wallets = [\n    new PhantomWalletAdapter(),\n    new SolflareWalletAdapter()\n  ];\n  \n  // Create a wrapper component to access the Solana wallet context\n  const WalletContextWrapper = ({ children }) => {\n    const { publicKey, connected, connecting, disconnect, select, wallet, wallets } = useSolanaWallet();\n    \n    useEffect(() => {\n      if (connected && publicKey) {\n        const newAccounts = [publicKey.toString()];\n        setAccounts(newAccounts);\n        setCurrentAccount(publicKey.toString());\n      } else {\n        setAccounts([]);\n        setCurrentAccount(null);\n      }\n    }, [connected, publicKey]);\n    \n    const connectWallet = useCallback(async (walletName) => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        if (walletName) {\n          const selectedWallet = wallets.find(w => w.name.toLowerCase() === walletName.toLowerCase());\n          if (selectedWallet) {\n            select(selectedWallet.name);\n          } else {\n            throw new AlebrijeError(`Wallet ${walletName} not found`, ErrorTypes.WALLET);\n          }\n        }\n        \n        return connected;\n      } catch (err) {\n        const alebrijeError = new AlebrijeError(\n          'Failed to connect wallet',\n          ErrorTypes.CONNECTION,\n          err\n        );\n        setError(alebrijeError);\n        throw alebrijeError;\n      } finally {\n        setLoading(false);\n      }\n    }, [connected, select, wallets]);\n    \n    const disconnectWallet = useCallback(async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        await disconnect();\n        setAccounts([]);\n        setCurrentAccount(null);\n        \n        return true;\n      } catch (err) {\n        const alebrijeError = new AlebrijeError(\n          'Failed to disconnect wallet',\n          ErrorTypes.CONNECTION,\n          err\n        );\n        setError(alebrijeError);\n        throw alebrijeError;\n      } finally {\n        setLoading(false);\n      }\n    }, [disconnect]);\n    \n    const switchNetwork = useCallback((newNetwork) => {\n      if (Object.values(WalletAdapterNetwork).includes(newNetwork)) {\n        setNetwork(newNetwork);\n        return true;\n      }\n      return false;\n    }, []);\n    \n    const contextValue = {\n      connected,\n      connecting,\n      accounts,\n      currentAccount,\n      loading,\n      error,\n      walletName: wallet?.name || null,\n      availableWallets: wallets.map(w => w.name),\n      connectWallet,\n      disconnectWallet,\n      switchNetwork,\n      network\n    };\n    \n    return React.cloneElement(children, { walletContext: contextValue });\n  };\n  \n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <WalletContext.Provider value={null}>\n            <WalletContextWrapper>\n              {children}\n            </WalletContextWrapper>\n          </WalletContext.Provider>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\n// Custom hook to use the wallet context\nexport function useWallet() {\n  const context = useContext(WalletContext) || \n                 (React.useContext && React.useContext(WalletContext)) || \n                 (window.reactProps && window.reactProps.walletContext);\n  \n  if (!context) {\n    throw new Error('useWallet must be used within a WalletContextProvider');\n  }\n  \n  return context;\n}\n\n// Export the WalletMultiButton component for easy access\nexport { WalletMultiButton }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}