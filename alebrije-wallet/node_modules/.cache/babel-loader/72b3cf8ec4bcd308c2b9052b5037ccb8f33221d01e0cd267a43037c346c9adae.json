{"ast":null,"code":"/**\n * Error types for the application\n */export const ErrorTypes={NETWORK:'NETWORK',WALLET:'WALLET',USER:'USER',UNKNOWN:'UNKNOWN'};/**\n * Custom error class for Alebrije Wallet\n */export class AlebrijeError extends Error{constructor(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:ErrorTypes.UNKNOWN;let originalError=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;super(message);this.name='AlebrijeError';this.type=type;this.originalError=originalError;}}/**\n * Handle and transform errors from various sources\n * @param {Error} error - Original error object\n * @param {string} message - Custom message for the error\n * @returns {AlebrijeError} - Transformed error\n */export const handleError=function(error){let message=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';console.error('Error:',error);// If it's already an AlebrijeError, just return it\nif(error instanceof AlebrijeError){return error;}// Determine error type\nlet errorType=ErrorTypes.UNKNOWN;// Check for network errors\nif(error.message&&(error.message.includes('Network')||error.message.includes('timeout')||error.message.includes('connection'))){errorType=ErrorTypes.NETWORK;}// Check for wallet-related errors\nelse if(error.message&&(error.message.includes('wallet')||error.message.includes('account')||error.message.includes('signature'))){errorType=ErrorTypes.WALLET;}// Create new error with context\nconst finalMessage=message?`${message}: ${error.message}`:error.message;return new AlebrijeError(finalMessage,errorType,error);};/**\n * Error handler for wallet operations\n */export const handleWalletError=function(error){let defaultMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Operation failed';console.error('Wallet error:',error);// If it's already an AlebrijeError, return it\nif(error instanceof AlebrijeError){return error;}// Determine error type based on message or code\nlet errorType=ErrorTypes.UNKNOWN;let errorMessage=defaultMessage;// Handle Web3 and Ethereum provider errors\nif(error.code){switch(error.code){case 4001:// User rejected the request\nerrorType=ErrorTypes.USER;errorMessage='Request was rejected by the user';break;case-32602:// Invalid parameters\nerrorType=ErrorTypes.USER;errorMessage='Invalid transaction parameters';break;case-32603:// Internal error\nerrorType=ErrorTypes.WALLET;errorMessage='Wallet internal error';break;case-32000:case-32001:case-32002:case-32003:// RPC errors\nerrorType=ErrorTypes.NETWORK;errorMessage='Network communication error';break;}}// Check for common error messages\nconst errorString=error.message?error.message.toLowerCase():'';if(errorString.includes('insufficient funds')){errorType=ErrorTypes.USER;errorMessage='Insufficient funds for this transaction';}else if(errorString.includes('gas')){errorType=ErrorTypes.TRANSACTION;errorMessage='Gas estimation failed or gas limit exceeded';}else if(errorString.includes('nonce')){errorType=ErrorTypes.TRANSACTION;errorMessage='Transaction nonce error. Try resetting your wallet.';}else if(errorString.includes('rejected')||errorString.includes('denied')){errorType=ErrorTypes.USER;errorMessage='Transaction was rejected';}else if(errorString.includes('network')||errorString.includes('connection')){errorType=ErrorTypes.NETWORK;errorMessage='Network connection error';}else if(errorString.includes('timeout')){errorType=ErrorTypes.NETWORK;errorMessage='Request timed out. The network may be congested.';}return new AlebrijeError(errorMessage,errorType,error);};","map":{"version":3,"names":["ErrorTypes","NETWORK","WALLET","USER","UNKNOWN","AlebrijeError","Error","constructor","message","type","arguments","length","undefined","originalError","name","handleError","error","console","errorType","includes","finalMessage","handleWalletError","defaultMessage","errorMessage","code","errorString","toLowerCase","TRANSACTION"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/utils/error-handler.js"],"sourcesContent":["/**\n * Error types for the application\n */\nexport const ErrorTypes = {\n  NETWORK: 'NETWORK',\n  WALLET: 'WALLET',\n  USER: 'USER',\n  UNKNOWN: 'UNKNOWN'\n};\n\n/**\n * Custom error class for Alebrije Wallet\n */\nexport class AlebrijeError extends Error {\n  constructor(message, type = ErrorTypes.UNKNOWN, originalError = null) {\n    super(message);\n    this.name = 'AlebrijeError';\n    this.type = type;\n    this.originalError = originalError;\n  }\n}\n\n/**\n * Handle and transform errors from various sources\n * @param {Error} error - Original error object\n * @param {string} message - Custom message for the error\n * @returns {AlebrijeError} - Transformed error\n */\nexport const handleError = (error, message = '') => {\n  console.error('Error:', error);\n  \n  // If it's already an AlebrijeError, just return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n  \n  // Determine error type\n  let errorType = ErrorTypes.UNKNOWN;\n  \n  // Check for network errors\n  if (error.message && (\n    error.message.includes('Network') ||\n    error.message.includes('timeout') ||\n    error.message.includes('connection')\n  )) {\n    errorType = ErrorTypes.NETWORK;\n  }\n  \n  // Check for wallet-related errors\n  else if (error.message && (\n    error.message.includes('wallet') ||\n    error.message.includes('account') ||\n    error.message.includes('signature')\n  )) {\n    errorType = ErrorTypes.WALLET;\n  }\n  \n  // Create new error with context\n  const finalMessage = message ? `${message}: ${error.message}` : error.message;\n  return new AlebrijeError(finalMessage, errorType, error);\n};\n\n/**\n * Error handler for wallet operations\n */\nexport const handleWalletError = (error, defaultMessage = 'Operation failed') => {\n  console.error('Wallet error:', error);\n  \n  // If it's already an AlebrijeError, return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n  \n  // Determine error type based on message or code\n  let errorType = ErrorTypes.UNKNOWN;\n  let errorMessage = defaultMessage;\n  \n  // Handle Web3 and Ethereum provider errors\n  if (error.code) {\n    switch (error.code) {\n      case 4001:\n        // User rejected the request\n        errorType = ErrorTypes.USER;\n        errorMessage = 'Request was rejected by the user';\n        break;\n      \n      case -32602:\n        // Invalid parameters\n        errorType = ErrorTypes.USER;\n        errorMessage = 'Invalid transaction parameters';\n        break;\n      \n      case -32603:\n        // Internal error\n        errorType = ErrorTypes.WALLET;\n        errorMessage = 'Wallet internal error';\n        break;\n      \n      case -32000:\n      case -32001:\n      case -32002:\n      case -32003:\n        // RPC errors\n        errorType = ErrorTypes.NETWORK;\n        errorMessage = 'Network communication error';\n        break;\n    }\n  }\n  \n  // Check for common error messages\n  const errorString = error.message ? error.message.toLowerCase() : '';\n  \n  if (errorString.includes('insufficient funds')) {\n    errorType = ErrorTypes.USER;\n    errorMessage = 'Insufficient funds for this transaction';\n  } else if (errorString.includes('gas')) {\n    errorType = ErrorTypes.TRANSACTION;\n    errorMessage = 'Gas estimation failed or gas limit exceeded';\n  } else if (errorString.includes('nonce')) {\n    errorType = ErrorTypes.TRANSACTION;\n    errorMessage = 'Transaction nonce error. Try resetting your wallet.';\n  } else if (errorString.includes('rejected') || errorString.includes('denied')) {\n    errorType = ErrorTypes.USER;\n    errorMessage = 'Transaction was rejected';\n  } else if (errorString.includes('network') || errorString.includes('connection')) {\n    errorType = ErrorTypes.NETWORK;\n    errorMessage = 'Network connection error';\n  } else if (errorString.includes('timeout')) {\n    errorType = ErrorTypes.NETWORK;\n    errorMessage = 'Request timed out. The network may be congested.';\n  }\n  \n  return new AlebrijeError(errorMessage, errorType, error);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}