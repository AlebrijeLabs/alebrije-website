{"ast":null,"code":"import { SolanaError, SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE } from '@solana/errors';\nimport { combineCodec, createEncoder, createDecoder, assertByteArrayIsNotEmptyForCodec, assertByteArrayHasEnoughBytesForCodec } from '@solana/codecs-core';\n\n// src/assertions.ts\nfunction assertNumberIsBetweenForCodec(codecDescription, min, max, value) {\n  if (value < min || value > max) {\n    throw new SolanaError(SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {\n      codecDescription,\n      max,\n      min,\n      value\n    });\n  }\n}\n\n// src/common.ts\nvar Endian = /* @__PURE__ */(Endian2 => {\n  Endian2[Endian2[\"Little\"] = 0] = \"Little\";\n  Endian2[Endian2[\"Big\"] = 1] = \"Big\";\n  return Endian2;\n})(Endian || {});\nfunction isLittleEndian(config) {\n  return config?.endian === 1 /* Big */ ? false : true;\n}\nfunction numberEncoderFactory(input) {\n  return createEncoder({\n    fixedSize: input.size,\n    write(value, bytes, offset) {\n      if (input.range) {\n        assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);\n      }\n      const arrayBuffer = new ArrayBuffer(input.size);\n      input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));\n      bytes.set(new Uint8Array(arrayBuffer), offset);\n      return offset + input.size;\n    }\n  });\n}\nfunction numberDecoderFactory(input) {\n  return createDecoder({\n    fixedSize: input.size,\n    read(bytes) {\n      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);\n      assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);\n      const view = new DataView(toArrayBuffer(bytes, offset, input.size));\n      return [input.get(view, isLittleEndian(input.config)), offset + input.size];\n    }\n  });\n}\nfunction toArrayBuffer(bytes, offset, length) {\n  const bytesOffset = bytes.byteOffset + (offset ?? 0);\n  const bytesLength = length ?? bytes.byteLength;\n  return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);\n}\n\n// src/f32.ts\nvar getF32Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"f32\",\n    set: (view, value, le) => view.setFloat32(0, Number(value), le),\n    size: 4\n  });\n};\nvar getF32Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => view.getFloat32(0, le),\n    name: \"f32\",\n    size: 4\n  });\n};\nvar getF32Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getF32Encoder(config), getF32Decoder(config));\n};\nvar getF64Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"f64\",\n    set: (view, value, le) => view.setFloat64(0, Number(value), le),\n    size: 8\n  });\n};\nvar getF64Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => view.getFloat64(0, le),\n    name: \"f64\",\n    size: 8\n  });\n};\nvar getF64Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getF64Encoder(config), getF64Decoder(config));\n};\nvar getI128Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"i128\",\n    range: [-BigInt(\"0x7fffffffffffffffffffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffffffffffffffffffff\")],\n    set: (view, value, le) => {\n      const leftOffset = le ? 8 : 0;\n      const rightOffset = le ? 0 : 8;\n      const rightMask = 0xffffffffffffffffn;\n      view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);\n      view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n    },\n    size: 16\n  });\n};\nvar getI128Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => {\n      const leftOffset = le ? 8 : 0;\n      const rightOffset = le ? 0 : 8;\n      const left = view.getBigInt64(leftOffset, le);\n      const right = view.getBigUint64(rightOffset, le);\n      return (left << 64n) + right;\n    },\n    name: \"i128\",\n    size: 16\n  });\n};\nvar getI128Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getI128Encoder(config), getI128Decoder(config));\n};\nvar getI16Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"i16\",\n    range: [-Number(\"0x7fff\") - 1, Number(\"0x7fff\")],\n    set: (view, value, le) => view.setInt16(0, Number(value), le),\n    size: 2\n  });\n};\nvar getI16Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => view.getInt16(0, le),\n    name: \"i16\",\n    size: 2\n  });\n};\nvar getI16Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getI16Encoder(config), getI16Decoder(config));\n};\nvar getI32Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"i32\",\n    range: [-Number(\"0x7fffffff\") - 1, Number(\"0x7fffffff\")],\n    set: (view, value, le) => view.setInt32(0, Number(value), le),\n    size: 4\n  });\n};\nvar getI32Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => view.getInt32(0, le),\n    name: \"i32\",\n    size: 4\n  });\n};\nvar getI32Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getI32Encoder(config), getI32Decoder(config));\n};\nvar getI64Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"i64\",\n    range: [-BigInt(\"0x7fffffffffffffff\") - 1n, BigInt(\"0x7fffffffffffffff\")],\n    set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),\n    size: 8\n  });\n};\nvar getI64Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => view.getBigInt64(0, le),\n    name: \"i64\",\n    size: 8\n  });\n};\nvar getI64Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getI64Encoder(config), getI64Decoder(config));\n};\nvar getI8Encoder = () => numberEncoderFactory({\n  name: \"i8\",\n  range: [-Number(\"0x7f\") - 1, Number(\"0x7f\")],\n  set: (view, value) => view.setInt8(0, Number(value)),\n  size: 1\n});\nvar getI8Decoder = () => numberDecoderFactory({\n  get: view => view.getInt8(0),\n  name: \"i8\",\n  size: 1\n});\nvar getI8Codec = () => combineCodec(getI8Encoder(), getI8Decoder());\nvar getShortU16Encoder = () => createEncoder({\n  getSizeFromValue: value => {\n    if (value <= 127) return 1;\n    if (value <= 16383) return 2;\n    return 3;\n  },\n  maxSize: 3,\n  write: (value, bytes, offset) => {\n    assertNumberIsBetweenForCodec(\"shortU16\", 0, 65535, value);\n    const shortU16Bytes = [0];\n    for (let ii = 0;; ii += 1) {\n      const alignedValue = Number(value) >> ii * 7;\n      if (alignedValue === 0) {\n        break;\n      }\n      const nextSevenBits = 127 & alignedValue;\n      shortU16Bytes[ii] = nextSevenBits;\n      if (ii > 0) {\n        shortU16Bytes[ii - 1] |= 128;\n      }\n    }\n    bytes.set(shortU16Bytes, offset);\n    return offset + shortU16Bytes.length;\n  }\n});\nvar getShortU16Decoder = () => createDecoder({\n  maxSize: 3,\n  read: (bytes, offset) => {\n    let value = 0;\n    let byteCount = 0;\n    while (++byteCount) {\n      const byteIndex = byteCount - 1;\n      const currentByte = bytes[offset + byteIndex];\n      const nextSevenBits = 127 & currentByte;\n      value |= nextSevenBits << byteIndex * 7;\n      if ((currentByte & 128) === 0) {\n        break;\n      }\n    }\n    return [value, offset + byteCount];\n  }\n});\nvar getShortU16Codec = () => combineCodec(getShortU16Encoder(), getShortU16Decoder());\nvar getU128Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"u128\",\n    range: [0n, BigInt(\"0xffffffffffffffffffffffffffffffff\")],\n    set: (view, value, le) => {\n      const leftOffset = le ? 8 : 0;\n      const rightOffset = le ? 0 : 8;\n      const rightMask = 0xffffffffffffffffn;\n      view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);\n      view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n    },\n    size: 16\n  });\n};\nvar getU128Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => {\n      const leftOffset = le ? 8 : 0;\n      const rightOffset = le ? 0 : 8;\n      const left = view.getBigUint64(leftOffset, le);\n      const right = view.getBigUint64(rightOffset, le);\n      return (left << 64n) + right;\n    },\n    name: \"u128\",\n    size: 16\n  });\n};\nvar getU128Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getU128Encoder(config), getU128Decoder(config));\n};\nvar getU16Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"u16\",\n    range: [0, Number(\"0xffff\")],\n    set: (view, value, le) => view.setUint16(0, Number(value), le),\n    size: 2\n  });\n};\nvar getU16Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => view.getUint16(0, le),\n    name: \"u16\",\n    size: 2\n  });\n};\nvar getU16Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getU16Encoder(config), getU16Decoder(config));\n};\nvar getU32Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"u32\",\n    range: [0, Number(\"0xffffffff\")],\n    set: (view, value, le) => view.setUint32(0, Number(value), le),\n    size: 4\n  });\n};\nvar getU32Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => view.getUint32(0, le),\n    name: \"u32\",\n    size: 4\n  });\n};\nvar getU32Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getU32Encoder(config), getU32Decoder(config));\n};\nvar getU64Encoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberEncoderFactory({\n    config,\n    name: \"u64\",\n    range: [0n, BigInt(\"0xffffffffffffffff\")],\n    set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),\n    size: 8\n  });\n};\nvar getU64Decoder = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return numberDecoderFactory({\n    config,\n    get: (view, le) => view.getBigUint64(0, le),\n    name: \"u64\",\n    size: 8\n  });\n};\nvar getU64Codec = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return combineCodec(getU64Encoder(config), getU64Decoder(config));\n};\nvar getU8Encoder = () => numberEncoderFactory({\n  name: \"u8\",\n  range: [0, Number(\"0xff\")],\n  set: (view, value) => view.setUint8(0, Number(value)),\n  size: 1\n});\nvar getU8Decoder = () => numberDecoderFactory({\n  get: view => view.getUint8(0),\n  name: \"u8\",\n  size: 1\n});\nvar getU8Codec = () => combineCodec(getU8Encoder(), getU8Decoder());\nexport { Endian, assertNumberIsBetweenForCodec, getF32Codec, getF32Decoder, getF32Encoder, getF64Codec, getF64Decoder, getF64Encoder, getI128Codec, getI128Decoder, getI128Encoder, getI16Codec, getI16Decoder, getI16Encoder, getI32Codec, getI32Decoder, getI32Encoder, getI64Codec, getI64Decoder, getI64Encoder, getI8Codec, getI8Decoder, getI8Encoder, getShortU16Codec, getShortU16Decoder, getShortU16Encoder, getU128Codec, getU128Decoder, getU128Encoder, getU16Codec, getU16Decoder, getU16Encoder, getU32Codec, getU32Decoder, getU32Encoder, getU64Codec, getU64Decoder, getU64Encoder, getU8Codec, getU8Decoder, getU8Encoder };\n\n//# sourceMappingURL=index.browser.mjs.map","map":{"version":3,"names":["assertNumberIsBetweenForCodec","codecDescription","min","max","value","SolanaError","SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE","Endian","Endian2","isLittleEndian","config","endian","numberEncoderFactory","input","createEncoder","fixedSize","size","write","bytes","offset","range","name","arrayBuffer","ArrayBuffer","set","DataView","Uint8Array","numberDecoderFactory","createDecoder","read","arguments","length","undefined","assertByteArrayIsNotEmptyForCodec","assertByteArrayHasEnoughBytesForCodec","view","toArrayBuffer","get","bytesOffset","byteOffset","bytesLength","byteLength","buffer","slice","getF32Encoder","le","setFloat32","Number","getF32Decoder","getFloat32","getF32Codec","combineCodec","getF64Encoder","setFloat64","getF64Decoder","getFloat64","getF64Codec","getI128Encoder","BigInt","leftOffset","rightOffset","rightMask","setBigInt64","setBigUint64","getI128Decoder","left","getBigInt64","right","getBigUint64","getI128Codec","getI16Encoder","setInt16","getI16Decoder","getInt16","getI16Codec","getI32Encoder","setInt32","getI32Decoder","getInt32","getI32Codec","getI64Encoder","getI64Decoder","getI64Codec","getI8Encoder","setInt8","getI8Decoder","getInt8","getI8Codec","getShortU16Encoder","getSizeFromValue","maxSize","shortU16Bytes","ii","alignedValue","nextSevenBits","getShortU16Decoder","byteCount","byteIndex","currentByte","getShortU16Codec","getU128Encoder","getU128Decoder","getU128Codec","getU16Encoder","setUint16","getU16Decoder","getUint16","getU16Codec","getU32Encoder","setUint32","getU32Decoder","getUint32","getU32Codec","getU64Encoder","getU64Decoder","getU64Codec","getU8Encoder","setUint8","getU8Decoder","getUint8","getU8Codec"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/assertions.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/common.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/utils.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/f32.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/f64.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/i128.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/i16.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/i32.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/i64.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/i8.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/short-u16.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/u128.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/u16.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/u32.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/u64.ts","/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@solana/codecs-numbers/src/u8.ts"],"sourcesContent":["import { SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, SolanaError } from '@solana/errors';\n\n/**\n * Asserts that a given number is between a given range.\n */\nexport function assertNumberIsBetweenForCodec(\n    codecDescription: string,\n    min: bigint | number,\n    max: bigint | number,\n    value: bigint | number,\n) {\n    if (value < min || value > max) {\n        throw new SolanaError(SOLANA_ERROR__CODECS__NUMBER_OUT_OF_RANGE, {\n            codecDescription,\n            max,\n            min,\n            value,\n        });\n    }\n}\n","import { Codec, Decoder, Encoder, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\n/** Defines a encoder for numbers and bigints. */\nexport type NumberEncoder = Encoder<bigint | number>;\n\n/** Defines a fixed-size encoder for numbers and bigints. */\nexport type FixedSizeNumberEncoder<TSize extends number = number> = FixedSizeEncoder<bigint | number, TSize>;\n\n/** Defines a decoder for numbers and bigints. */\nexport type NumberDecoder = Decoder<bigint> | Decoder<number>;\n\n/** Defines a fixed-size decoder for numbers and bigints. */\nexport type FixedSizeNumberDecoder<TSize extends number = number> =\n    | FixedSizeDecoder<bigint, TSize>\n    | FixedSizeDecoder<number, TSize>;\n\n/** Defines a codec for numbers and bigints. */\nexport type NumberCodec = Codec<bigint | number, bigint> | Codec<bigint | number, number>;\n\n/** Defines a fixed-size codec for numbers and bigints. */\nexport type FixedSizeNumberCodec<TSize extends number = number> =\n    | FixedSizeCodec<bigint | number, bigint, TSize>\n    | FixedSizeCodec<bigint | number, number, TSize>;\n\n/** Defines the config for number codecs that use more than one byte. */\nexport type NumberCodecConfig = {\n    /**\n     * Whether the serializer should use little-endian or big-endian encoding.\n     * @defaultValue `Endian.Little`\n     */\n    endian?: Endian;\n};\n\n/** Defines the endianness of a number serializer. */\nexport enum Endian {\n    Little,\n    Big,\n}\n","import {\n    assertByteArrayHasEnoughBytesForCodec,\n    assertByteArrayIsNotEmptyForCodec,\n    createDecoder,\n    createEncoder,\n    FixedSizeDecoder,\n    FixedSizeEncoder,\n    Offset,\n    ReadonlyUint8Array,\n} from '@solana/codecs-core';\n\nimport { assertNumberIsBetweenForCodec } from './assertions';\nimport { Endian, NumberCodecConfig } from './common';\n\ntype NumberFactorySharedInput<TSize extends number> = {\n    config?: NumberCodecConfig;\n    name: string;\n    size: TSize;\n};\n\ntype NumberFactoryEncoderInput<TFrom, TSize extends number> = NumberFactorySharedInput<TSize> & {\n    range?: [bigint | number, bigint | number];\n    set: (view: DataView, value: TFrom, littleEndian?: boolean) => void;\n};\n\ntype NumberFactoryDecoderInput<TTo, TSize extends number> = NumberFactorySharedInput<TSize> & {\n    get: (view: DataView, littleEndian?: boolean) => TTo;\n};\n\nfunction isLittleEndian(config?: NumberCodecConfig): boolean {\n    return config?.endian === Endian.Big ? false : true;\n}\n\nexport function numberEncoderFactory<TFrom extends bigint | number, TSize extends number>(\n    input: NumberFactoryEncoderInput<TFrom, TSize>,\n): FixedSizeEncoder<TFrom, TSize> {\n    return createEncoder({\n        fixedSize: input.size,\n        write(value: TFrom, bytes: Uint8Array, offset: Offset): Offset {\n            if (input.range) {\n                assertNumberIsBetweenForCodec(input.name, input.range[0], input.range[1], value);\n            }\n            const arrayBuffer = new ArrayBuffer(input.size);\n            input.set(new DataView(arrayBuffer), value, isLittleEndian(input.config));\n            bytes.set(new Uint8Array(arrayBuffer), offset);\n            return offset + input.size;\n        },\n    });\n}\n\nexport function numberDecoderFactory<TTo extends bigint | number, TSize extends number>(\n    input: NumberFactoryDecoderInput<TTo, TSize>,\n): FixedSizeDecoder<TTo, TSize> {\n    return createDecoder({\n        fixedSize: input.size,\n        read(bytes, offset = 0): [TTo, number] {\n            assertByteArrayIsNotEmptyForCodec(input.name, bytes, offset);\n            assertByteArrayHasEnoughBytesForCodec(input.name, input.size, bytes, offset);\n            const view = new DataView(toArrayBuffer(bytes, offset, input.size));\n            return [input.get(view, isLittleEndian(input.config)), offset + input.size];\n        },\n    });\n}\n\n/**\n * Helper function to ensure that the ArrayBuffer is converted properly from a Uint8Array\n * Source: https://stackoverflow.com/questions/37228285/uint8array-to-arraybuffer\n */\nfunction toArrayBuffer(bytes: ReadonlyUint8Array | Uint8Array, offset?: number, length?: number): ArrayBuffer {\n    const bytesOffset = bytes.byteOffset + (offset ?? 0);\n    const bytesLength = length ?? bytes.byteLength;\n    return bytes.buffer.slice(bytesOffset, bytesOffset + bytesLength);\n}\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getF32Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 4> =>\n    numberEncoderFactory({\n        config,\n        name: 'f32',\n        set: (view, value, le) => view.setFloat32(0, Number(value), le),\n        size: 4,\n    });\n\nexport const getF32Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 4> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getFloat32(0, le),\n        name: 'f32',\n        size: 4,\n    });\n\nexport const getF32Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, number, 4> =>\n    combineCodec(getF32Encoder(config), getF32Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getF64Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 8> =>\n    numberEncoderFactory({\n        config,\n        name: 'f64',\n        set: (view, value, le) => view.setFloat64(0, Number(value), le),\n        size: 8,\n    });\n\nexport const getF64Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 8> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getFloat64(0, le),\n        name: 'f64',\n        size: 8,\n    });\n\nexport const getF64Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, number, 8> =>\n    combineCodec(getF64Encoder(config), getF64Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI128Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 16> =>\n    numberEncoderFactory({\n        config,\n        name: 'i128',\n        range: [-BigInt('0x7fffffffffffffffffffffffffffffff') - 1n, BigInt('0x7fffffffffffffffffffffffffffffff')],\n        set: (view, value, le) => {\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const rightMask = 0xffffffffffffffffn;\n            view.setBigInt64(leftOffset, BigInt(value) >> 64n, le);\n            view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n        },\n        size: 16,\n    });\n\nexport const getI128Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<bigint, 16> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => {\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const left = view.getBigInt64(leftOffset, le);\n            const right = view.getBigUint64(rightOffset, le);\n            return (left << 64n) + right;\n        },\n        name: 'i128',\n        size: 16,\n    });\n\nexport const getI128Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, bigint, 16> =>\n    combineCodec(getI128Encoder(config), getI128Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI16Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 2> =>\n    numberEncoderFactory({\n        config,\n        name: 'i16',\n        range: [-Number('0x7fff') - 1, Number('0x7fff')],\n        set: (view, value, le) => view.setInt16(0, Number(value), le),\n        size: 2,\n    });\n\nexport const getI16Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 2> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getInt16(0, le),\n        name: 'i16',\n        size: 2,\n    });\n\nexport const getI16Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, number, 2> =>\n    combineCodec(getI16Encoder(config), getI16Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI32Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 4> =>\n    numberEncoderFactory({\n        config,\n        name: 'i32',\n        range: [-Number('0x7fffffff') - 1, Number('0x7fffffff')],\n        set: (view, value, le) => view.setInt32(0, Number(value), le),\n        size: 4,\n    });\n\nexport const getI32Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 4> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getInt32(0, le),\n        name: 'i32',\n        size: 4,\n    });\n\nexport const getI32Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, number, 4> =>\n    combineCodec(getI32Encoder(config), getI32Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI64Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 8> =>\n    numberEncoderFactory({\n        config,\n        name: 'i64',\n        range: [-BigInt('0x7fffffffffffffff') - 1n, BigInt('0x7fffffffffffffff')],\n        set: (view, value, le) => view.setBigInt64(0, BigInt(value), le),\n        size: 8,\n    });\n\nexport const getI64Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<bigint, 8> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getBigInt64(0, le),\n        name: 'i64',\n        size: 8,\n    });\n\nexport const getI64Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, bigint, 8> =>\n    combineCodec(getI64Encoder(config), getI64Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getI8Encoder = (): FixedSizeEncoder<bigint | number, 1> =>\n    numberEncoderFactory({\n        name: 'i8',\n        range: [-Number('0x7f') - 1, Number('0x7f')],\n        set: (view, value) => view.setInt8(0, Number(value)),\n        size: 1,\n    });\n\nexport const getI8Decoder = (): FixedSizeDecoder<number, 1> =>\n    numberDecoderFactory({\n        get: view => view.getInt8(0),\n        name: 'i8',\n        size: 1,\n    });\n\nexport const getI8Codec = (): FixedSizeCodec<bigint | number, number, 1> =>\n    combineCodec(getI8Encoder(), getI8Decoder());\n","import {\n    combineCodec,\n    createDecoder,\n    createEncoder,\n    Offset,\n    ReadonlyUint8Array,\n    VariableSizeCodec,\n    VariableSizeDecoder,\n    VariableSizeEncoder,\n} from '@solana/codecs-core';\n\nimport { assertNumberIsBetweenForCodec } from './assertions';\n\n/**\n * Encodes short u16 numbers.\n * @see {@link getShortU16Codec} for a more detailed description.\n */\nexport const getShortU16Encoder = (): VariableSizeEncoder<bigint | number> =>\n    createEncoder({\n        getSizeFromValue: (value: bigint | number): number => {\n            if (value <= 0b01111111) return 1;\n            if (value <= 0b0011111111111111) return 2;\n            return 3;\n        },\n        maxSize: 3,\n        write: (value: bigint | number, bytes: Uint8Array, offset: Offset): Offset => {\n            assertNumberIsBetweenForCodec('shortU16', 0, 65535, value);\n            const shortU16Bytes = [0];\n            for (let ii = 0; ; ii += 1) {\n                // Shift the bits of the value over such that the next 7 bits are at the right edge.\n                const alignedValue = Number(value) >> (ii * 7);\n                if (alignedValue === 0) {\n                    // No more bits to consume.\n                    break;\n                }\n                // Extract those 7 bits using a mask.\n                const nextSevenBits = 0b1111111 & alignedValue;\n                shortU16Bytes[ii] = nextSevenBits;\n                if (ii > 0) {\n                    // Set the continuation bit of the previous slice.\n                    shortU16Bytes[ii - 1] |= 0b10000000;\n                }\n            }\n            bytes.set(shortU16Bytes, offset);\n            return offset + shortU16Bytes.length;\n        },\n    });\n\n/**\n * Decodes short u16 numbers.\n * @see {@link getShortU16Codec} for a more detailed description.\n */\nexport const getShortU16Decoder = (): VariableSizeDecoder<number> =>\n    createDecoder({\n        maxSize: 3,\n        read: (bytes: ReadonlyUint8Array | Uint8Array, offset): [number, Offset] => {\n            let value = 0;\n            let byteCount = 0;\n            while (++byteCount) {\n                const byteIndex = byteCount - 1;\n                const currentByte = bytes[offset + byteIndex];\n                const nextSevenBits = 0b1111111 & currentByte;\n                // Insert the next group of seven bits into the correct slot of the output value.\n                value |= nextSevenBits << (byteIndex * 7);\n                if ((currentByte & 0b10000000) === 0) {\n                    // This byte does not have its continuation bit set. We're done.\n                    break;\n                }\n            }\n            return [value, offset + byteCount];\n        },\n    });\n\n/**\n * Encodes and decodes short u16 numbers.\n *\n * Short u16 numbers are the same as u16, but serialized with 1 to 3 bytes.\n * If the value is above 0x7f, the top bit is set and the remaining\n * value is stored in the next bytes. Each byte follows the same\n * pattern until the 3rd byte. The 3rd byte, if needed, uses\n * all 8 bits to store the last byte of the original value.\n */\nexport const getShortU16Codec = (): VariableSizeCodec<bigint | number, number> =>\n    combineCodec(getShortU16Encoder(), getShortU16Decoder());\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU128Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 16> =>\n    numberEncoderFactory({\n        config,\n        name: 'u128',\n        range: [0n, BigInt('0xffffffffffffffffffffffffffffffff')],\n        set: (view, value, le) => {\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const rightMask = 0xffffffffffffffffn;\n            view.setBigUint64(leftOffset, BigInt(value) >> 64n, le);\n            view.setBigUint64(rightOffset, BigInt(value) & rightMask, le);\n        },\n        size: 16,\n    });\n\nexport const getU128Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<bigint, 16> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => {\n            const leftOffset = le ? 8 : 0;\n            const rightOffset = le ? 0 : 8;\n            const left = view.getBigUint64(leftOffset, le);\n            const right = view.getBigUint64(rightOffset, le);\n            return (left << 64n) + right;\n        },\n        name: 'u128',\n        size: 16,\n    });\n\nexport const getU128Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, bigint, 16> =>\n    combineCodec(getU128Encoder(config), getU128Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU16Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 2> =>\n    numberEncoderFactory({\n        config,\n        name: 'u16',\n        range: [0, Number('0xffff')],\n        set: (view, value, le) => view.setUint16(0, Number(value), le),\n        size: 2,\n    });\n\nexport const getU16Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 2> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getUint16(0, le),\n        name: 'u16',\n        size: 2,\n    });\n\nexport const getU16Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, number, 2> =>\n    combineCodec(getU16Encoder(config), getU16Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU32Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 4> =>\n    numberEncoderFactory({\n        config,\n        name: 'u32',\n        range: [0, Number('0xffffffff')],\n        set: (view, value, le) => view.setUint32(0, Number(value), le),\n        size: 4,\n    });\n\nexport const getU32Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<number, 4> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getUint32(0, le),\n        name: 'u32',\n        size: 4,\n    });\n\nexport const getU32Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, number, 4> =>\n    combineCodec(getU32Encoder(config), getU32Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { NumberCodecConfig } from './common';\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU64Encoder = (config: NumberCodecConfig = {}): FixedSizeEncoder<bigint | number, 8> =>\n    numberEncoderFactory({\n        config,\n        name: 'u64',\n        range: [0n, BigInt('0xffffffffffffffff')],\n        set: (view, value, le) => view.setBigUint64(0, BigInt(value), le),\n        size: 8,\n    });\n\nexport const getU64Decoder = (config: NumberCodecConfig = {}): FixedSizeDecoder<bigint, 8> =>\n    numberDecoderFactory({\n        config,\n        get: (view, le) => view.getBigUint64(0, le),\n        name: 'u64',\n        size: 8,\n    });\n\nexport const getU64Codec = (config: NumberCodecConfig = {}): FixedSizeCodec<bigint | number, bigint, 8> =>\n    combineCodec(getU64Encoder(config), getU64Decoder(config));\n","import { combineCodec, FixedSizeCodec, FixedSizeDecoder, FixedSizeEncoder } from '@solana/codecs-core';\n\nimport { numberDecoderFactory, numberEncoderFactory } from './utils';\n\nexport const getU8Encoder = (): FixedSizeEncoder<bigint | number, 1> =>\n    numberEncoderFactory({\n        name: 'u8',\n        range: [0, Number('0xff')],\n        set: (view, value) => view.setUint8(0, Number(value)),\n        size: 1,\n    });\n\nexport const getU8Decoder = (): FixedSizeDecoder<number, 1> =>\n    numberDecoderFactory({\n        get: view => view.getUint8(0),\n        name: 'u8',\n        size: 1,\n    });\n\nexport const getU8Codec = (): FixedSizeCodec<bigint | number, number, 1> =>\n    combineCodec(getU8Encoder(), getU8Decoder());\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}