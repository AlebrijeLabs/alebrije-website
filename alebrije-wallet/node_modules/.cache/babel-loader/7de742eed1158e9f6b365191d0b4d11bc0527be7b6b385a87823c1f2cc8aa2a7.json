{"ast":null,"code":"import { defaultConverter as t, notEqual as e } from \"../reactive-element.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst o = {\n    attribute: !0,\n    type: String,\n    converter: t,\n    reflect: !1,\n    hasChanged: e\n  },\n  r = function () {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : o;\n    let e = arguments.length > 1 ? arguments[1] : undefined;\n    let r = arguments.length > 2 ? arguments[2] : undefined;\n    const {\n      kind: n,\n      metadata: i\n    } = r;\n    let s = globalThis.litPropertyMetadata.get(i);\n    if (void 0 === s && globalThis.litPropertyMetadata.set(i, s = new Map()), \"setter\" === n && ((t = Object.create(t)).wrapped = !0), s.set(r.name, t), \"accessor\" === n) {\n      const {\n        name: o\n      } = r;\n      return {\n        set(r) {\n          const n = e.get.call(this);\n          e.set.call(this, r), this.requestUpdate(o, n, t);\n        },\n        init(e) {\n          return void 0 !== e && this.C(o, void 0, t, e), e;\n        }\n      };\n    }\n    if (\"setter\" === n) {\n      const {\n        name: o\n      } = r;\n      return function (r) {\n        const n = this[o];\n        e.call(this, r), this.requestUpdate(o, n, t);\n      };\n    }\n    throw Error(\"Unsupported decorator location: \" + n);\n  };\nfunction n(t) {\n  return (e, o) => \"object\" == typeof o ? r(t, e, o) : ((t, e, o) => {\n    const r = e.hasOwnProperty(o);\n    return e.constructor.createProperty(o, t), r ? Object.getOwnPropertyDescriptor(e, o) : void 0;\n  })(t, e, o);\n}\nexport { n as property, r as standardProperty };","map":{"version":3,"names":["o","attribute","type","String","converter","t","reflect","hasChanged","e","r","standardProperty","arguments","length","undefined","kind","n","metadata","i","s","globalThis","litPropertyMetadata","get","set","Map","Object","create","wrapped","name","call","requestUpdate","init","C","Error","hasOwnProperty","constructor","createProperty","getOwnPropertyDescriptor","property"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/node_modules/@lit/reactive-element/src/decorators/property.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {\n  type PropertyDeclaration,\n  type ReactiveElement,\n  defaultConverter,\n  notEqual,\n} from '../reactive-element.js';\nimport type {Interface} from './base.js';\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  globalThis.litIssuedWarnings ??= new Set();\n\n  /**\n   * Issue a warning if we haven't already, based either on `code` or `warning`.\n   * Warnings are disabled automatically only by `warning`; disabling via `code`\n   * can be done by users.\n   */\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (\n      !globalThis.litIssuedWarnings!.has(warning) &&\n      !globalThis.litIssuedWarnings!.has(code)\n    ) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings!.add(warning);\n    }\n  };\n}\n\n// Overloads for property decorator so that TypeScript can infer the correct\n// return type when a decorator is used as an accessor decorator or a setter\n// decorator.\nexport type PropertyDecorator = {\n  // accessor decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): ClassAccessorDecoratorResult<C, V>;\n\n  // setter decorator signature\n  <C extends Interface<ReactiveElement>, V>(\n    target: (value: V) => void,\n    context: ClassSetterDecoratorContext<C, V>\n  ): (this: C, value: V) => void;\n\n  // legacy decorator signature\n  (\n    protoOrDescriptor: Object,\n    name: PropertyKey,\n    descriptor?: PropertyDescriptor\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any;\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration | undefined,\n  proto: Object,\n  name: PropertyKey\n) => {\n  const hasOwnProperty = proto.hasOwnProperty(name);\n  (proto.constructor as typeof ReactiveElement).createProperty(name, options);\n  // For accessors (which have a descriptor on the prototype) we need to\n  // return a descriptor, otherwise TypeScript overwrites the descriptor we\n  // define in createProperty() with the original descriptor. We don't do this\n  // for fields, which don't have a descriptor, because this could overwrite\n  // descriptor defined by other decorators.\n  return hasOwnProperty\n    ? Object.getOwnPropertyDescriptor(proto, name)\n    : undefined;\n};\n\n// This is duplicated from a similar variable in reactive-element.ts, but\n// actually makes sense to have this default defined with the decorator, so\n// that different decorators could have different defaults.\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n// Temporary type, until google3 is on TypeScript 5.2\ntype StandardPropertyContext<C, V> = (\n  | ClassAccessorDecoratorContext<C, V>\n  | ClassSetterDecoratorContext<C, V>\n) & {metadata: object};\n\n/**\n * Wraps a class accessor or setter so that `requestUpdate()` is called with the\n * property name and old value when the accessor is set.\n */\nexport const standardProperty = <C extends Interface<ReactiveElement>, V>(\n  options: PropertyDeclaration = defaultPropertyDeclaration,\n  target: ClassAccessorDecoratorTarget<C, V> | ((value: V) => void),\n  context: StandardPropertyContext<C, V>\n): ClassAccessorDecoratorResult<C, V> | ((this: C, value: V) => void) => {\n  const {kind, metadata} = context;\n\n  if (DEV_MODE && metadata == null) {\n    issueWarning(\n      'missing-class-metadata',\n      `The class ${target} is missing decorator metadata. This ` +\n        `could mean that you're using a compiler that supports decorators ` +\n        `but doesn't support decorator metadata, such as TypeScript 5.1. ` +\n        `Please update your compiler.`\n    );\n  }\n\n  // Store the property options\n  let properties = globalThis.litPropertyMetadata.get(metadata);\n  if (properties === undefined) {\n    globalThis.litPropertyMetadata.set(metadata, (properties = new Map()));\n  }\n  if (kind === 'setter') {\n    options = Object.create(options);\n    options.wrapped = true;\n  }\n  properties.set(context.name, options);\n\n  if (kind === 'accessor') {\n    // Standard decorators cannot dynamically modify the class, so we can't\n    // replace a field with accessors. The user must use the new `accessor`\n    // keyword instead.\n    const {name} = context;\n    return {\n      set(this: ReactiveElement, v: V) {\n        const oldValue = (\n          target as ClassAccessorDecoratorTarget<C, V>\n        ).get.call(this as unknown as C);\n        (target as ClassAccessorDecoratorTarget<C, V>).set.call(\n          this as unknown as C,\n          v\n        );\n        this.requestUpdate(name, oldValue, options);\n      },\n      init(this: ReactiveElement, v: V): V {\n        if (v !== undefined) {\n          this._$changeProperty(name, undefined, options, v);\n        }\n        return v;\n      },\n    } as unknown as ClassAccessorDecoratorResult<C, V>;\n  } else if (kind === 'setter') {\n    const {name} = context;\n    return function (this: ReactiveElement, value: V) {\n      const oldValue = this[name as keyof ReactiveElement];\n      (target as (value: V) => void).call(this, value);\n      this.requestUpdate(name, oldValue, options);\n    } as unknown as (this: C, value: V) => void;\n  }\n  throw new Error(`Unsupported decorator location: ${kind}`);\n};\n\n/**\n * A class field or accessor decorator which creates a reactive property that\n * reflects a corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration): PropertyDecorator {\n  return <C extends Interface<ReactiveElement>, V>(\n    protoOrTarget:\n      | object\n      | ClassAccessorDecoratorTarget<C, V>\n      | ((value: V) => void),\n    nameOrContext:\n      | PropertyKey\n      | ClassAccessorDecoratorContext<C, V>\n      | ClassSetterDecoratorContext<C, V>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any => {\n    return (\n      typeof nameOrContext === 'object'\n        ? standardProperty<C, V>(\n            options,\n            protoOrTarget as\n              | ClassAccessorDecoratorTarget<C, V>\n              | ((value: V) => void),\n            nameOrContext as StandardPropertyContext<C, V>\n          )\n        : legacyProperty(\n            options,\n            protoOrTarget as Object,\n            nameOrContext as PropertyKey\n          )\n    ) as PropertyDecorator;\n  };\n}\n"],"mappings":";;;;;;AAwEA,MAoBMA,CAAA,GAAkD;IACtDC,SAAA,GAAW;IACXC,IAAA,EAAMC,MAAA;IACNC,SAAA,EAAWC,CAAA;IACXC,OAAA,GAAS;IACTC,UAAA,EAAYC;EAAA;EAaDC,CAAA,GAAmB,SAAAC,CAAA,EAG9B;IAAA,IAFAL,CAAA,GAAAM,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+BX,CAAA;IAAA,IAC/BQ,CAAA,GAAAG,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAAA,IACAJ,CAAA,GAAAE,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAEA;MAAMC,IAAA,EAACC,CAAA;MAAIC,QAAA,EAAEC;IAAA,IAAYR,CAAA;IAazB,IAAIS,CAAA,GAAaC,UAAA,CAAWC,mBAAA,CAAoBC,GAAA,CAAIJ,CAAA;IAUpD,SATmB,MAAfC,CAAA,IACFC,UAAA,CAAWC,mBAAA,CAAoBE,GAAA,CAAIL,CAAA,EAAWC,CAAA,GAAa,IAAIK,GAAA,KAEpD,aAATR,CAAA,MACFV,CAAA,GAAUmB,MAAA,CAAOC,MAAA,CAAOpB,CAAA,GAChBqB,OAAA,IAAU,IAEpBR,CAAA,CAAWI,GAAA,CAAIb,CAAA,CAAQkB,IAAA,EAAMtB,CAAA,GAEhB,eAATU,CAAA,EAAqB;MAIvB;QAAMY,IAAA,EAAC3B;MAAA,IAAQS,CAAA;MACf,OAAO;QACLa,IAA2Bb,CAAA;UACzB,MAAMM,CAAA,GACJP,CAAA,CACAa,GAAA,CAAIO,IAAA,CAAK;UACVpB,CAAA,CAA8Cc,GAAA,CAAIM,IAAA,CACjD,MACAnB,CAAA,GAEF,KAAKoB,aAAA,CAAc7B,CAAA,EAAMe,CAAA,EAAUV,CAAA,CACpC;QAAA;QACDyB,KAA4BtB,CAAA;UAI1B,YAHU,MAANA,CAAA,IACF,KAAKuB,CAAA,CAAiB/B,CAAA,OAAM,GAAWK,CAAA,EAASG,CAAA,GAE3CA,CACR;QAAA;MAAA,CAEJ;IAAA;IAAM,IAAa,aAATO,CAAA,EAAmB;MAC5B;QAAMY,IAAA,EAAC3B;MAAA,IAAQS,CAAA;MACf,OAAO,UAAiCA,CAAA;QACtC,MAAMM,CAAA,GAAW,KAAKf,CAAA;QACrBQ,CAAA,CAA8BoB,IAAA,CAAK,MAAMnB,CAAA,GAC1C,KAAKoB,aAAA,CAAc7B,CAAA,EAAMe,CAAA,EAAUV,CAAA,CACrC;MAAA,CACD;IAAA;IACD,MAAU2B,KAAA,CAAM,qCAAmCjB,CAAA,CAAO;EAAA;AAmCtD,SAAUA,EAASV,CAAA;EACvB,OAAO,CACLG,CAAA,EAIAR,CAAA,KAO2B,mBAAlBA,CAAA,GACHS,CAAA,CACEJ,CAAA,EACAG,CAAA,EAGAR,CAAA,IAvJW,EACrBK,CAAA,EACAG,CAAA,EACAR,CAAA;IAEA,MAAMS,CAAA,GAAiBD,CAAA,CAAMyB,cAAA,CAAejC,CAAA;IAO5C,OANCQ,CAAA,CAAM0B,WAAA,CAAuCC,cAAA,CAAenC,CAAA,EAAMK,CAAA,GAM5DI,CAAA,GACHe,MAAA,CAAOY,wBAAA,CAAyB5B,CAAA,EAAOR,CAAA,SACvC,CAAS;EAAA,GA4IHK,CAAA,EACAG,CAAA,EACAR,CAAA,CAIZ;AAAA;AAAA,SAAAe,CAAA,IAAAsB,QAAA,EAAA5B,CAAA,IAAAC,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}