{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useWallet}from'../contexts/WalletContext';import TokenService from'../services/token-service';import{NotificationType}from'./Notifications';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Settings=()=>{const{connected,currentAccount}=useWallet();const[settings,setSettings]=useState({autoCreateTokenAccounts:true,shouldShowNotifications:true});// Load settings from TokenService\nuseEffect(()=>{setSettings(TokenService.getSettings());},[]);// Handle toggle for auto token account creation\nconst handleAutoTokenAccountsChange=e=>{const newValue=e.target.checked;updateSetting('autoCreateTokenAccounts',newValue);// Show notification about the change\nif(window.notifyInfo){window.notifyInfo('Settings Updated',`Automatic token account creation ${newValue?'enabled':'disabled'}.`,5000);}};// Handle toggle for notifications\nconst handleNotificationsChange=e=>{const newValue=e.target.checked;updateSetting('shouldShowNotifications',newValue);};// Update a specific setting\nconst updateSetting=(key,value)=>{const updatedSettings={...settings,[key]:value};// Update state\nsetSettings(updatedSettings);// Update settings in TokenService\nTokenService.updateSettings(updatedSettings);// Save to local storage\ntry{localStorage.setItem('alebrije_settings',JSON.stringify(updatedSettings));}catch(error){console.error('Failed to save settings to local storage:',error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"settings-container p-4 border rounded\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Wallet Settings\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"card mb-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-header\",children:/*#__PURE__*/_jsx(\"h5\",{className:\"mb-0\",children:\"Token Account Settings\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"card-body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-check form-switch mb-3\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"form-check-input\",type:\"checkbox\",id:\"autoCreateTokenAccounts\",checked:settings.autoCreateTokenAccounts,onChange:handleAutoTokenAccountsChange}),/*#__PURE__*/_jsx(\"label\",{className:\"form-check-label\",htmlFor:\"autoCreateTokenAccounts\",children:\"Automatically create token accounts\"}),/*#__PURE__*/_jsx(\"div\",{className:\"form-text\",children:\"When enabled, token accounts will be automatically created for recipients who don't have one. A small fee (~0.002 SOL) will be paid by you for each account creation.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-info\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"me-3\",children:/*#__PURE__*/_jsx(\"i\",{className:\"bi bi-info-circle-fill fs-4\"})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Why This Matters\"}),/*#__PURE__*/_jsx(\"p\",{children:\"On Solana, users need a specific token account for each type of token they want to receive. By enabling this feature, you'll have a much smoother experience when sending tokens to new users.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-0\",children:\"Without this feature, transfers could fail if the recipient doesn't already have a token account for the specific token you're sending.\"})]})]})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"card mb-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-header\",children:/*#__PURE__*/_jsx(\"h5\",{className:\"mb-0\",children:\"Notification Settings\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-check form-switch mb-3\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"form-check-input\",type:\"checkbox\",id:\"shouldShowNotifications\",checked:settings.shouldShowNotifications,onChange:handleNotificationsChange}),/*#__PURE__*/_jsx(\"label\",{className:\"form-check-label\",htmlFor:\"shouldShowNotifications\",children:\"Show notifications\"}),/*#__PURE__*/_jsx(\"div\",{className:\"form-text\",children:\"Enable or disable toast notifications for transactions and other events.\"})]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-4\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary me-2\",onClick:()=>{// Reset settings to defaults\nconst defaultSettings={autoCreateTokenAccounts:true,shouldShowNotifications:true};setSettings(defaultSettings);TokenService.updateSettings(defaultSettings);// Show notification\nif(window.notifyInfo){window.notifyInfo('Settings Reset','All settings have been reset to default values.',5000);}},children:\"Reset to Defaults\"})})]});};export default Settings;","map":{"version":3,"names":["React","useState","useEffect","useWallet","TokenService","NotificationType","jsx","_jsx","jsxs","_jsxs","Settings","connected","currentAccount","settings","setSettings","autoCreateTokenAccounts","shouldShowNotifications","getSettings","handleAutoTokenAccountsChange","e","newValue","target","checked","updateSetting","window","notifyInfo","handleNotificationsChange","key","value","updatedSettings","updateSettings","localStorage","setItem","JSON","stringify","error","console","className","children","type","id","onChange","htmlFor","onClick","defaultSettings"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/components/Settings.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWallet } from '../contexts/WalletContext';\nimport TokenService from '../services/token-service';\nimport { NotificationType } from './Notifications';\n\nconst Settings = () => {\n  const { connected, currentAccount } = useWallet();\n  const [settings, setSettings] = useState({\n    autoCreateTokenAccounts: true,\n    shouldShowNotifications: true\n  });\n  \n  // Load settings from TokenService\n  useEffect(() => {\n    setSettings(TokenService.getSettings());\n  }, []);\n  \n  // Handle toggle for auto token account creation\n  const handleAutoTokenAccountsChange = (e) => {\n    const newValue = e.target.checked;\n    updateSetting('autoCreateTokenAccounts', newValue);\n    \n    // Show notification about the change\n    if (window.notifyInfo) {\n      window.notifyInfo(\n        'Settings Updated',\n        `Automatic token account creation ${newValue ? 'enabled' : 'disabled'}.`,\n        5000\n      );\n    }\n  };\n  \n  // Handle toggle for notifications\n  const handleNotificationsChange = (e) => {\n    const newValue = e.target.checked;\n    updateSetting('shouldShowNotifications', newValue);\n  };\n  \n  // Update a specific setting\n  const updateSetting = (key, value) => {\n    const updatedSettings = {\n      ...settings,\n      [key]: value\n    };\n    \n    // Update state\n    setSettings(updatedSettings);\n    \n    // Update settings in TokenService\n    TokenService.updateSettings(updatedSettings);\n    \n    // Save to local storage\n    try {\n      localStorage.setItem('alebrije_settings', JSON.stringify(updatedSettings));\n    } catch (error) {\n      console.error('Failed to save settings to local storage:', error);\n    }\n  };\n  \n  return (\n    <div className=\"settings-container p-4 border rounded\">\n      <h3>Wallet Settings</h3>\n      \n      <div className=\"card mb-4\">\n        <div className=\"card-header\">\n          <h5 className=\"mb-0\">Token Account Settings</h5>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"form-check form-switch mb-3\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"autoCreateTokenAccounts\"\n              checked={settings.autoCreateTokenAccounts}\n              onChange={handleAutoTokenAccountsChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"autoCreateTokenAccounts\">\n              Automatically create token accounts\n            </label>\n            <div className=\"form-text\">\n              When enabled, token accounts will be automatically created for recipients who don't have one.\n              A small fee (~0.002 SOL) will be paid by you for each account creation.\n            </div>\n          </div>\n          \n          <div className=\"alert alert-info\">\n            <div className=\"d-flex\">\n              <div className=\"me-3\">\n                <i className=\"bi bi-info-circle-fill fs-4\"></i>\n              </div>\n              <div>\n                <h5>Why This Matters</h5>\n                <p>\n                  On Solana, users need a specific token account for each type of token they want to receive.\n                  By enabling this feature, you'll have a much smoother experience when sending tokens to new users.\n                </p>\n                <p className=\"mb-0\">\n                  Without this feature, transfers could fail if the recipient doesn't already have a token account for the specific token you're sending.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"card mb-4\">\n        <div className=\"card-header\">\n          <h5 className=\"mb-0\">Notification Settings</h5>\n        </div>\n        <div className=\"card-body\">\n          <div className=\"form-check form-switch mb-3\">\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              id=\"shouldShowNotifications\"\n              checked={settings.shouldShowNotifications}\n              onChange={handleNotificationsChange}\n            />\n            <label className=\"form-check-label\" htmlFor=\"shouldShowNotifications\">\n              Show notifications\n            </label>\n            <div className=\"form-text\">\n              Enable or disable toast notifications for transactions and other events.\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mb-4\">\n        <button \n          className=\"btn btn-secondary me-2\"\n          onClick={() => {\n            // Reset settings to defaults\n            const defaultSettings = {\n              autoCreateTokenAccounts: true,\n              shouldShowNotifications: true\n            };\n            setSettings(defaultSettings);\n            TokenService.updateSettings(defaultSettings);\n            \n            // Show notification\n            if (window.notifyInfo) {\n              window.notifyInfo(\n                'Settings Reset',\n                'All settings have been reset to default values.',\n                5000\n              );\n            }\n          }}\n        >\n          Reset to Defaults\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,SAAS,KAAQ,2BAA2B,CACrD,MAAO,CAAAC,YAAY,KAAM,2BAA2B,CACpD,OAASC,gBAAgB,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAAEC,SAAS,CAAEC,cAAe,CAAC,CAAGT,SAAS,CAAC,CAAC,CACjD,KAAM,CAACU,QAAQ,CAAEC,WAAW,CAAC,CAAGb,QAAQ,CAAC,CACvCc,uBAAuB,CAAE,IAAI,CAC7BC,uBAAuB,CAAE,IAC3B,CAAC,CAAC,CAEF;AACAd,SAAS,CAAC,IAAM,CACdY,WAAW,CAACV,YAAY,CAACa,WAAW,CAAC,CAAC,CAAC,CACzC,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAC,6BAA6B,CAAIC,CAAC,EAAK,CAC3C,KAAM,CAAAC,QAAQ,CAAGD,CAAC,CAACE,MAAM,CAACC,OAAO,CACjCC,aAAa,CAAC,yBAAyB,CAAEH,QAAQ,CAAC,CAElD;AACA,GAAII,MAAM,CAACC,UAAU,CAAE,CACrBD,MAAM,CAACC,UAAU,CACf,kBAAkB,CAClB,oCAAoCL,QAAQ,CAAG,SAAS,CAAG,UAAU,GAAG,CACxE,IACF,CAAC,CACH,CACF,CAAC,CAED;AACA,KAAM,CAAAM,yBAAyB,CAAIP,CAAC,EAAK,CACvC,KAAM,CAAAC,QAAQ,CAAGD,CAAC,CAACE,MAAM,CAACC,OAAO,CACjCC,aAAa,CAAC,yBAAyB,CAAEH,QAAQ,CAAC,CACpD,CAAC,CAED;AACA,KAAM,CAAAG,aAAa,CAAGA,CAACI,GAAG,CAAEC,KAAK,GAAK,CACpC,KAAM,CAAAC,eAAe,CAAG,CACtB,GAAGhB,QAAQ,CACX,CAACc,GAAG,EAAGC,KACT,CAAC,CAED;AACAd,WAAW,CAACe,eAAe,CAAC,CAE5B;AACAzB,YAAY,CAAC0B,cAAc,CAACD,eAAe,CAAC,CAE5C;AACA,GAAI,CACFE,YAAY,CAACC,OAAO,CAAC,mBAAmB,CAAEC,IAAI,CAACC,SAAS,CAACL,eAAe,CAAC,CAAC,CAC5E,CAAE,MAAOM,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,CAAEA,KAAK,CAAC,CACnE,CACF,CAAC,CAED,mBACE1B,KAAA,QAAK4B,SAAS,CAAC,uCAAuC,CAAAC,QAAA,eACpD/B,IAAA,OAAA+B,QAAA,CAAI,iBAAe,CAAI,CAAC,cAExB7B,KAAA,QAAK4B,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB/B,IAAA,QAAK8B,SAAS,CAAC,aAAa,CAAAC,QAAA,cAC1B/B,IAAA,OAAI8B,SAAS,CAAC,MAAM,CAAAC,QAAA,CAAC,wBAAsB,CAAI,CAAC,CAC7C,CAAC,cACN7B,KAAA,QAAK4B,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB7B,KAAA,QAAK4B,SAAS,CAAC,6BAA6B,CAAAC,QAAA,eAC1C/B,IAAA,UACE8B,SAAS,CAAC,kBAAkB,CAC5BE,IAAI,CAAC,UAAU,CACfC,EAAE,CAAC,yBAAyB,CAC5BlB,OAAO,CAAET,QAAQ,CAACE,uBAAwB,CAC1C0B,QAAQ,CAAEvB,6BAA8B,CACzC,CAAC,cACFX,IAAA,UAAO8B,SAAS,CAAC,kBAAkB,CAACK,OAAO,CAAC,yBAAyB,CAAAJ,QAAA,CAAC,qCAEtE,CAAO,CAAC,cACR/B,IAAA,QAAK8B,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAC,uKAG3B,CAAK,CAAC,EACH,CAAC,cAEN/B,IAAA,QAAK8B,SAAS,CAAC,kBAAkB,CAAAC,QAAA,cAC/B7B,KAAA,QAAK4B,SAAS,CAAC,QAAQ,CAAAC,QAAA,eACrB/B,IAAA,QAAK8B,SAAS,CAAC,MAAM,CAAAC,QAAA,cACnB/B,IAAA,MAAG8B,SAAS,CAAC,6BAA6B,CAAI,CAAC,CAC5C,CAAC,cACN5B,KAAA,QAAA6B,QAAA,eACE/B,IAAA,OAAA+B,QAAA,CAAI,kBAAgB,CAAI,CAAC,cACzB/B,IAAA,MAAA+B,QAAA,CAAG,gMAGH,CAAG,CAAC,cACJ/B,IAAA,MAAG8B,SAAS,CAAC,MAAM,CAAAC,QAAA,CAAC,yIAEpB,CAAG,CAAC,EACD,CAAC,EACH,CAAC,CACH,CAAC,EACH,CAAC,EACH,CAAC,cAEN7B,KAAA,QAAK4B,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB/B,IAAA,QAAK8B,SAAS,CAAC,aAAa,CAAAC,QAAA,cAC1B/B,IAAA,OAAI8B,SAAS,CAAC,MAAM,CAAAC,QAAA,CAAC,uBAAqB,CAAI,CAAC,CAC5C,CAAC,cACN/B,IAAA,QAAK8B,SAAS,CAAC,WAAW,CAAAC,QAAA,cACxB7B,KAAA,QAAK4B,SAAS,CAAC,6BAA6B,CAAAC,QAAA,eAC1C/B,IAAA,UACE8B,SAAS,CAAC,kBAAkB,CAC5BE,IAAI,CAAC,UAAU,CACfC,EAAE,CAAC,yBAAyB,CAC5BlB,OAAO,CAAET,QAAQ,CAACG,uBAAwB,CAC1CyB,QAAQ,CAAEf,yBAA0B,CACrC,CAAC,cACFnB,IAAA,UAAO8B,SAAS,CAAC,kBAAkB,CAACK,OAAO,CAAC,yBAAyB,CAAAJ,QAAA,CAAC,oBAEtE,CAAO,CAAC,cACR/B,IAAA,QAAK8B,SAAS,CAAC,WAAW,CAAAC,QAAA,CAAC,0EAE3B,CAAK,CAAC,EACH,CAAC,CACH,CAAC,EACH,CAAC,cAEN/B,IAAA,QAAK8B,SAAS,CAAC,MAAM,CAAAC,QAAA,cACnB/B,IAAA,WACE8B,SAAS,CAAC,wBAAwB,CAClCM,OAAO,CAAEA,CAAA,GAAM,CACb;AACA,KAAM,CAAAC,eAAe,CAAG,CACtB7B,uBAAuB,CAAE,IAAI,CAC7BC,uBAAuB,CAAE,IAC3B,CAAC,CACDF,WAAW,CAAC8B,eAAe,CAAC,CAC5BxC,YAAY,CAAC0B,cAAc,CAACc,eAAe,CAAC,CAE5C;AACA,GAAIpB,MAAM,CAACC,UAAU,CAAE,CACrBD,MAAM,CAACC,UAAU,CACf,gBAAgB,CAChB,iDAAiD,CACjD,IACF,CAAC,CACH,CACF,CAAE,CAAAa,QAAA,CACH,mBAED,CAAQ,CAAC,CACN,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAA5B,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}