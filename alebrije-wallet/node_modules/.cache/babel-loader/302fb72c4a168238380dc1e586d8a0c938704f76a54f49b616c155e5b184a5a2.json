{"ast":null,"code":"import WalletService from'./wallet-service';import{Connection,PublicKey,Transaction}from'@solana/web3.js';import{createTransferInstruction,TOKEN_PROGRAM_ID}from'@solana/spl-token';class TokenService{constructor(){this.connection=null;this.tokenInfo={};}initialize(endpoint){this.connection=new Connection(endpoint,'confirmed');}async getTokenBalance(tokenAddress,walletAddress){if(!this.connection)throw new Error('Token service not initialized');if(!walletAddress)throw new Error('Wallet address is required');try{const tokenPublicKey=new PublicKey(tokenAddress);const walletPublicKey=new PublicKey(walletAddress);// Get token account info\nconst tokenAccounts=await this.connection.getParsedTokenAccountsByOwner(walletPublicKey,{mint:tokenPublicKey});// If no token accounts found, balance is 0\nif(tokenAccounts.value.length===0)return 0;// Get balance from the first token account\nconst balance=tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;return balance;}catch(error){console.error('Error getting token balance:',error);throw error;}}async transferToken(tokenAddress,fromWallet,toAddress,amount){if(!this.connection)throw new Error('Token service not initialized');if(!WalletService.isConnected())throw new Error('Wallet not connected');try{var _this$tokenInfo$token;const tokenPublicKey=new PublicKey(tokenAddress);const toPublicKey=new PublicKey(toAddress);// Get the token account of the fromWallet address for the token\nconst fromTokenAccounts=await this.connection.getParsedTokenAccountsByOwner(new PublicKey(fromWallet),{mint:tokenPublicKey});// If no token account found, throw error\nif(fromTokenAccounts.value.length===0){throw new Error('No token account found for the sender');}const fromTokenAccount=fromTokenAccounts.value[0].pubkey;// Get or create associated token account for recipient\nlet toTokenAccount;try{const toTokenAccounts=await this.connection.getParsedTokenAccountsByOwner(toPublicKey,{mint:tokenPublicKey});if(toTokenAccounts.value.length>0){toTokenAccount=toTokenAccounts.value[0].pubkey;}else{// In a real implementation, you would create an associated token account\n// This is simplified for the example\nthrow new Error('Recipient does not have a token account for this token');}}catch(error){throw new Error('Error checking recipient token account: '+error.message);}// Create transfer instruction - Updated to use createTransferInstruction\nconst transferInstruction=createTransferInstruction(fromTokenAccount,toTokenAccount,new PublicKey(fromWallet),amount*Math.pow(10,((_this$tokenInfo$token=this.tokenInfo[tokenAddress])===null||_this$tokenInfo$token===void 0?void 0:_this$tokenInfo$token.decimals)||9),[],TOKEN_PROGRAM_ID);// Create transaction and add the transfer instruction\nconst transaction=new Transaction().add(transferInstruction);// Set recent blockhash and fee payer\ntransaction.recentBlockhash=(await this.connection.getRecentBlockhash()).blockhash;transaction.feePayer=new PublicKey(fromWallet);// Sign and send transaction\nconst signedTransaction=await WalletService.signTransaction(transaction);const signature=await this.connection.sendRawTransaction(signedTransaction.serialize());// Wait for confirmation\nawait this.connection.confirmTransaction(signature);return{signature,status:'confirmed'};}catch(error){console.error('Error transferring tokens:',error);throw error;}}async getTokenInfo(tokenAddress){if(!this.connection)throw new Error('Token service not initialized');try{// If we already have the info cached, return it\nif(this.tokenInfo[tokenAddress]){return this.tokenInfo[tokenAddress];}const tokenPublicKey=new PublicKey(tokenAddress);const tokenInfo=await this.connection.getParsedAccountInfo(tokenPublicKey);if(!tokenInfo.value){throw new Error('Token not found');}// Parse token info\nconst parsedInfo={address:tokenAddress,decimals:tokenInfo.value.data.parsed.info.decimals,supply:tokenInfo.value.data.parsed.info.supply,name:tokenInfo.value.data.parsed.info.name||'Unknown Token',symbol:tokenInfo.value.data.parsed.info.symbol||'UNKNOWN'};// Cache the info\nthis.tokenInfo[tokenAddress]=parsedInfo;return parsedInfo;}catch(error){console.error('Error getting token info:',error);throw error;}}}export default new TokenService();","map":{"version":3,"names":["WalletService","Connection","PublicKey","Transaction","createTransferInstruction","TOKEN_PROGRAM_ID","TokenService","constructor","connection","tokenInfo","initialize","endpoint","getTokenBalance","tokenAddress","walletAddress","Error","tokenPublicKey","walletPublicKey","tokenAccounts","getParsedTokenAccountsByOwner","mint","value","length","balance","account","data","parsed","info","tokenAmount","uiAmount","error","console","transferToken","fromWallet","toAddress","amount","isConnected","_this$tokenInfo$token","toPublicKey","fromTokenAccounts","fromTokenAccount","pubkey","toTokenAccount","toTokenAccounts","message","transferInstruction","Math","pow","decimals","transaction","add","recentBlockhash","getRecentBlockhash","blockhash","feePayer","signedTransaction","signTransaction","signature","sendRawTransaction","serialize","confirmTransaction","status","getTokenInfo","getParsedAccountInfo","parsedInfo","address","supply","name","symbol"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/services/token-service.js"],"sourcesContent":["import WalletService from './wallet-service';\nimport { Connection, PublicKey, Transaction } from '@solana/web3.js';\nimport { createTransferInstruction, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nclass TokenService {\n  constructor() {\n    this.connection = null;\n    this.tokenInfo = {};\n  }\n\n  initialize(endpoint) {\n    this.connection = new Connection(endpoint, 'confirmed');\n  }\n\n  async getTokenBalance(tokenAddress, walletAddress) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    if (!walletAddress) throw new Error('Wallet address is required');\n    \n    try {\n      const tokenPublicKey = new PublicKey(tokenAddress);\n      const walletPublicKey = new PublicKey(walletAddress);\n      \n      // Get token account info\n      const tokenAccounts = await this.connection.getParsedTokenAccountsByOwner(\n        walletPublicKey,\n        { mint: tokenPublicKey }\n      );\n      \n      // If no token accounts found, balance is 0\n      if (tokenAccounts.value.length === 0) return 0;\n      \n      // Get balance from the first token account\n      const balance = tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;\n      return balance;\n    } catch (error) {\n      console.error('Error getting token balance:', error);\n      throw error;\n    }\n  }\n\n  async transferToken(tokenAddress, fromWallet, toAddress, amount) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    if (!WalletService.isConnected()) throw new Error('Wallet not connected');\n    \n    try {\n      const tokenPublicKey = new PublicKey(tokenAddress);\n      const toPublicKey = new PublicKey(toAddress);\n      \n      // Get the token account of the fromWallet address for the token\n      const fromTokenAccounts = await this.connection.getParsedTokenAccountsByOwner(\n        new PublicKey(fromWallet),\n        { mint: tokenPublicKey }\n      );\n      \n      // If no token account found, throw error\n      if (fromTokenAccounts.value.length === 0) {\n        throw new Error('No token account found for the sender');\n      }\n      \n      const fromTokenAccount = fromTokenAccounts.value[0].pubkey;\n      \n      // Get or create associated token account for recipient\n      let toTokenAccount;\n      try {\n        const toTokenAccounts = await this.connection.getParsedTokenAccountsByOwner(\n          toPublicKey,\n          { mint: tokenPublicKey }\n        );\n        \n        if (toTokenAccounts.value.length > 0) {\n          toTokenAccount = toTokenAccounts.value[0].pubkey;\n        } else {\n          // In a real implementation, you would create an associated token account\n          // This is simplified for the example\n          throw new Error('Recipient does not have a token account for this token');\n        }\n      } catch (error) {\n        throw new Error('Error checking recipient token account: ' + error.message);\n      }\n      \n      // Create transfer instruction - Updated to use createTransferInstruction\n      const transferInstruction = createTransferInstruction(\n        fromTokenAccount,\n        toTokenAccount,\n        new PublicKey(fromWallet),\n        amount * Math.pow(10, this.tokenInfo[tokenAddress]?.decimals || 9),\n        [],\n        TOKEN_PROGRAM_ID\n      );\n      \n      // Create transaction and add the transfer instruction\n      const transaction = new Transaction().add(transferInstruction);\n      \n      // Set recent blockhash and fee payer\n      transaction.recentBlockhash = (await this.connection.getRecentBlockhash()).blockhash;\n      transaction.feePayer = new PublicKey(fromWallet);\n      \n      // Sign and send transaction\n      const signedTransaction = await WalletService.signTransaction(transaction);\n      const signature = await this.connection.sendRawTransaction(signedTransaction.serialize());\n      \n      // Wait for confirmation\n      await this.connection.confirmTransaction(signature);\n      \n      return {\n        signature,\n        status: 'confirmed'\n      };\n    } catch (error) {\n      console.error('Error transferring tokens:', error);\n      throw error;\n    }\n  }\n\n  async getTokenInfo(tokenAddress) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    \n    try {\n      // If we already have the info cached, return it\n      if (this.tokenInfo[tokenAddress]) {\n        return this.tokenInfo[tokenAddress];\n      }\n      \n      const tokenPublicKey = new PublicKey(tokenAddress);\n      const tokenInfo = await this.connection.getParsedAccountInfo(tokenPublicKey);\n      \n      if (!tokenInfo.value) {\n        throw new Error('Token not found');\n      }\n      \n      // Parse token info\n      const parsedInfo = {\n        address: tokenAddress,\n        decimals: tokenInfo.value.data.parsed.info.decimals,\n        supply: tokenInfo.value.data.parsed.info.supply,\n        name: tokenInfo.value.data.parsed.info.name || 'Unknown Token',\n        symbol: tokenInfo.value.data.parsed.info.symbol || 'UNKNOWN'\n      };\n      \n      // Cache the info\n      this.tokenInfo[tokenAddress] = parsedInfo;\n      \n      return parsedInfo;\n    } catch (error) {\n      console.error('Error getting token info:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new TokenService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}