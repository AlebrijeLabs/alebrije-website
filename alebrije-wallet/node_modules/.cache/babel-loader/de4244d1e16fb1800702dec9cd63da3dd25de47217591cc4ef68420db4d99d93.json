{"ast":null,"code":"import WalletService from'./wallet-service';import{Connection,PublicKey,Transaction,SystemProgram,LAMPORTS_PER_SOL}from'@solana/web3.js';import{createTransferInstruction,TOKEN_PROGRAM_ID,createBurnInstruction}from'@solana/spl-token';import{useWallet}from'../contexts/WalletContext';import{clusterApiUrl}from'@solana/web3.js';import{getAssociatedTokenAddress,getMintDecimals}from'@solana/spl-token';class TokenService{constructor(){this.connection=null;this.tokenInfo={};}initialize(endpoint){this.connection=new Connection(endpoint,'confirmed');}async getTokenBalance(tokenAddress,walletAddress){if(!this.connection)throw new Error('Token service not initialized');if(!walletAddress)throw new Error('Wallet address is required');try{const tokenPublicKey=new PublicKey(tokenAddress);const walletPublicKey=new PublicKey(walletAddress);// Get token account info\nconst tokenAccounts=await this.connection.getParsedTokenAccountsByOwner(walletPublicKey,{mint:tokenPublicKey});// If no token accounts found, balance is 0\nif(tokenAccounts.value.length===0)return 0;// Get balance from the first token account\nconst balance=tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;return balance;}catch(error){console.error('Error getting token balance:',error);throw error;}}async transferToken(tokenAddress,fromWallet,toAddress,amount){if(!this.connection)throw new Error('Token service not initialized');try{var _this$tokenInfo$token,_window$solana;const tokenPublicKey=new PublicKey(tokenAddress);const toPublicKey=new PublicKey(toAddress);const fromPublicKey=new PublicKey(fromWallet);// Calculate tax amounts (5% total)\nconst liquidityTax=amount*0.03;// 3% for liquidity\nconst marketingTax=amount*0.01;// 1% for marketing\nconst charityTax=amount*0.01;// 1% for charity\nconst burnTax=amount*0.01;// 1% for burn\n// Calculate amount after tax\nconst amountAfterTax=amount-(liquidityTax+marketingTax+charityTax+burnTax);// Get token decimals\nconst decimals=((_this$tokenInfo$token=this.tokenInfo[tokenAddress])===null||_this$tokenInfo$token===void 0?void 0:_this$tokenInfo$token.decimals)||(await this.getTokenInfo(tokenAddress)).decimals;// Create transaction\nconst transaction=new Transaction();// Get the token account of the fromWallet address for the token\nconst fromTokenAccounts=await this.connection.getParsedTokenAccountsByOwner(fromPublicKey,{mint:tokenPublicKey});// If no token account found, throw error\nif(fromTokenAccounts.value.length===0){throw new Error('No token account found for the sender');}const fromTokenAccount=fromTokenAccounts.value[0].pubkey;// Get or create associated token account for recipient\nlet toTokenAccount;try{const toTokenAccounts=await this.connection.getParsedTokenAccountsByOwner(toPublicKey,{mint:tokenPublicKey});if(toTokenAccounts.value.length>0){toTokenAccount=toTokenAccounts.value[0].pubkey;}else{// In a real implementation, you would create an associated token account\n// This is simplified for the example\nthrow new Error('Recipient does not have a token account for this token');}}catch(error){throw new Error('Error checking recipient token account: '+error.message);}// Create transfer instruction\nconst transferInstruction=createTransferInstruction(fromTokenAccount,toTokenAccount,fromPublicKey,amountAfterTax*Math.pow(10,decimals),[],TOKEN_PROGRAM_ID);// Add transfer instruction to transaction\ntransaction.add(transferInstruction);// Add burn instruction for the burn tax\nif(burnTax>0){// Create burn instruction\nconst burnInstruction=createBurnInstruction(fromTokenAccount,tokenPublicKey,fromPublicKey,burnTax*Math.pow(10,decimals));// Add burn instruction to transaction\ntransaction.add(burnInstruction);}// Set recent blockhash and fee payer\ntransaction.recentBlockhash=(await this.connection.getRecentBlockhash()).blockhash;transaction.feePayer=fromPublicKey;// Sign transaction using the wallet adapter\nlet signedTransaction;// For Phantom\nif((_window$solana=window.solana)!==null&&_window$solana!==void 0&&_window$solana.isPhantom){signedTransaction=await window.solana.signTransaction(transaction);}// For Solflare\nelse if(window.solflare){signedTransaction=await window.solflare.signTransaction(transaction);}else{throw new Error('No compatible wallet found');}const signature=await this.connection.sendRawTransaction(signedTransaction.serialize());// Wait for confirmation\nawait this.connection.confirmTransaction(signature);return{signature,status:'confirmed',amountBurned:burnTax};}catch(error){console.error('Error transferring token:',error);throw error;}}async getTokenInfo(tokenAddress){if(!this.connection)throw new Error('Token service not initialized');try{// If we already have the info cached, return it\nif(this.tokenInfo[tokenAddress]){return this.tokenInfo[tokenAddress];}const tokenPublicKey=new PublicKey(tokenAddress);const tokenInfo=await this.connection.getParsedAccountInfo(tokenPublicKey);if(!tokenInfo.value){throw new Error('Token not found');}// Parse token info\nconst parsedInfo={address:tokenAddress,decimals:tokenInfo.value.data.parsed.info.decimals,supply:tokenInfo.value.data.parsed.info.supply,name:tokenInfo.value.data.parsed.info.name||'Unknown Token',symbol:tokenInfo.value.data.parsed.info.symbol||'UNKNOWN'};// Cache the info\nthis.tokenInfo[tokenAddress]=parsedInfo;return parsedInfo;}catch(error){console.error('Error getting token info:',error);throw error;}}async getAccountTransactions(walletAddress){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;if(!this.connection)throw new Error('Token service not initialized');if(!walletAddress)throw new Error('Wallet address is required');try{const walletPublicKey=new PublicKey(walletAddress);// Get recent transactions for the account\nconst signatures=await this.connection.getSignaturesForAddress(walletPublicKey,{limit});// Return simplified transaction data\nreturn signatures.map(sig=>({signature:sig.signature,timestamp:sig.blockTime||Date.now()/1000,status:sig.confirmationStatus||'confirmed',type:'unknown',symbol:'SOL',decimals:9,amount:0// We don't parse the amount here for simplicity\n}));}catch(error){console.error('Error getting account transactions:',error);return[];// Return empty array instead of throwing\n}}async getTokenTransactions(tokenAddress,walletAddress){let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;if(!this.connection)throw new Error('Token service not initialized');if(!tokenAddress)throw new Error('Token address is required');if(!walletAddress)throw new Error('Wallet address is required');try{// Just return empty array for now to avoid errors\nreturn[];}catch(error){console.error('Error getting token transactions:',error);return[];// Return empty array instead of throwing\n}}async getNativeBalance(walletAddress){if(!this.connection)throw new Error('Token service not initialized');if(!walletAddress)throw new Error('Wallet address is required');try{const walletPublicKey=new PublicKey(walletAddress);const balance=await this.connection.getBalance(walletPublicKey);return balance/1000000000;// Convert lamports to SOL\n}catch(error){console.error('Error getting native balance:',error);throw error;}}async transferNativeSOL(fromWallet,toAddress,amount){if(!this.connection)throw new Error('Token service not initialized');try{var _window$solana2;const toPublicKey=new PublicKey(toAddress);const fromPublicKey=new PublicKey(fromWallet);// Create a simple transfer instruction\nconst transaction=new Transaction().add(SystemProgram.transfer({fromPubkey:fromPublicKey,toPubkey:toPublicKey,lamports:amount*1000000000// Convert SOL to lamports\n}));// Set recent blockhash and fee payer\ntransaction.recentBlockhash=(await this.connection.getRecentBlockhash()).blockhash;transaction.feePayer=fromPublicKey;// Sign transaction using the wallet adapter\nlet signedTransaction;// For Phantom\nif((_window$solana2=window.solana)!==null&&_window$solana2!==void 0&&_window$solana2.isPhantom){signedTransaction=await window.solana.signTransaction(transaction);}// For Solflare\nelse if(window.solflare){signedTransaction=await window.solflare.signTransaction(transaction);}else{throw new Error('No compatible wallet found');}const signature=await this.connection.sendRawTransaction(signedTransaction.serialize());// Wait for confirmation\nawait this.connection.confirmTransaction(signature);return{signature,status:'confirmed'};}catch(error){console.error('Error transferring SOL:',error);throw error;}}async burnToken(tokenAddress,ownerAddress,amount){if(!this.connection)throw new Error('Token service not initialized');try{var _this$tokenInfo$token2,_window$solana3;const tokenPublicKey=new PublicKey(tokenAddress);const ownerPublicKey=new PublicKey(ownerAddress);// Get the token account of the owner\nconst tokenAccounts=await this.connection.getParsedTokenAccountsByOwner(ownerPublicKey,{mint:tokenPublicKey});if(tokenAccounts.value.length===0){throw new Error('No token account found for the owner');}const tokenAccount=tokenAccounts.value[0].pubkey;// Get token decimals\nconst decimals=((_this$tokenInfo$token2=this.tokenInfo[tokenAddress])===null||_this$tokenInfo$token2===void 0?void 0:_this$tokenInfo$token2.decimals)||(await this.getTokenInfo(tokenAddress)).decimals;// Create burn instruction\nconst burnInstruction=createBurnInstruction(tokenAccount,tokenPublicKey,ownerPublicKey,amount*Math.pow(10,decimals));// Create transaction and add the burn instruction\nconst transaction=new Transaction().add(burnInstruction);// Set recent blockhash and fee payer\ntransaction.recentBlockhash=(await this.connection.getRecentBlockhash()).blockhash;transaction.feePayer=ownerPublicKey;// Sign transaction using the wallet adapter\nlet signedTransaction;// For Phantom\nif((_window$solana3=window.solana)!==null&&_window$solana3!==void 0&&_window$solana3.isPhantom){signedTransaction=await window.solana.signTransaction(transaction);}// For Solflare\nelse if(window.solflare){signedTransaction=await window.solflare.signTransaction(transaction);}else{throw new Error('No compatible wallet found');}const signature=await this.connection.sendRawTransaction(signedTransaction.serialize());// Wait for confirmation\nawait this.connection.confirmTransaction(signature);return{signature,status:'confirmed'};}catch(error){console.error('Error burning token:',error);throw error;}}}export default new TokenService();export const burnTokens=async(wallet,tokenAddress,amount)=>{if(!wallet.publicKey){throw new Error('Wallet not connected');}const connection=new Connection(clusterApiUrl(process.env.REACT_APP_SOLANA_NETWORK||'devnet'),'confirmed');// For SOL burning (send to a dead address)\nif(tokenAddress==='native'){// Burn address (a known unusable address)\nconst burnAddress=new PublicKey('1111111111111111111111111111111111111111111');const transaction=new Transaction().add(SystemProgram.transfer({fromPubkey:wallet.publicKey,toPubkey:burnAddress,lamports:amount*LAMPORTS_PER_SOL}));const signature=await wallet.sendTransaction(transaction,connection);await connection.confirmTransaction(signature,'confirmed');return signature;}else{// For SPL tokens\nconst mint=new PublicKey(tokenAddress);const associatedTokenAddress=await getAssociatedTokenAddress(mint,wallet.publicKey);const burnInstruction=createBurnInstruction(associatedTokenAddress,mint,wallet.publicKey,amount*Math.pow(10,await getMintDecimals(connection,mint)));const transaction=new Transaction().add(burnInstruction);const signature=await wallet.sendTransaction(transaction,connection);await connection.confirmTransaction(signature,'confirmed');return signature;}};","map":{"version":3,"names":["WalletService","Connection","PublicKey","Transaction","SystemProgram","LAMPORTS_PER_SOL","createTransferInstruction","TOKEN_PROGRAM_ID","createBurnInstruction","useWallet","clusterApiUrl","getAssociatedTokenAddress","getMintDecimals","TokenService","constructor","connection","tokenInfo","initialize","endpoint","getTokenBalance","tokenAddress","walletAddress","Error","tokenPublicKey","walletPublicKey","tokenAccounts","getParsedTokenAccountsByOwner","mint","value","length","balance","account","data","parsed","info","tokenAmount","uiAmount","error","console","transferToken","fromWallet","toAddress","amount","_this$tokenInfo$token","_window$solana","toPublicKey","fromPublicKey","liquidityTax","marketingTax","charityTax","burnTax","amountAfterTax","decimals","getTokenInfo","transaction","fromTokenAccounts","fromTokenAccount","pubkey","toTokenAccount","toTokenAccounts","message","transferInstruction","Math","pow","add","burnInstruction","recentBlockhash","getRecentBlockhash","blockhash","feePayer","signedTransaction","window","solana","isPhantom","signTransaction","solflare","signature","sendRawTransaction","serialize","confirmTransaction","status","amountBurned","getParsedAccountInfo","parsedInfo","address","supply","name","symbol","getAccountTransactions","limit","arguments","undefined","signatures","getSignaturesForAddress","map","sig","timestamp","blockTime","Date","now","confirmationStatus","type","getTokenTransactions","getNativeBalance","getBalance","transferNativeSOL","_window$solana2","transfer","fromPubkey","toPubkey","lamports","burnToken","ownerAddress","_this$tokenInfo$token2","_window$solana3","ownerPublicKey","tokenAccount","burnTokens","wallet","publicKey","process","env","REACT_APP_SOLANA_NETWORK","burnAddress","sendTransaction","associatedTokenAddress"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/services/token-service.js"],"sourcesContent":["import WalletService from './wallet-service';\nimport { Connection, PublicKey, Transaction, SystemProgram, LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport { createTransferInstruction, TOKEN_PROGRAM_ID, createBurnInstruction } from '@solana/spl-token';\nimport { useWallet } from '../contexts/WalletContext';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { getAssociatedTokenAddress, getMintDecimals } from '@solana/spl-token';\n\nclass TokenService {\n  constructor() {\n    this.connection = null;\n    this.tokenInfo = {};\n  }\n\n  initialize(endpoint) {\n    this.connection = new Connection(endpoint, 'confirmed');\n  }\n\n  async getTokenBalance(tokenAddress, walletAddress) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    if (!walletAddress) throw new Error('Wallet address is required');\n    \n    try {\n      const tokenPublicKey = new PublicKey(tokenAddress);\n      const walletPublicKey = new PublicKey(walletAddress);\n      \n      // Get token account info\n      const tokenAccounts = await this.connection.getParsedTokenAccountsByOwner(\n        walletPublicKey,\n        { mint: tokenPublicKey }\n      );\n      \n      // If no token accounts found, balance is 0\n      if (tokenAccounts.value.length === 0) return 0;\n      \n      // Get balance from the first token account\n      const balance = tokenAccounts.value[0].account.data.parsed.info.tokenAmount.uiAmount;\n      return balance;\n    } catch (error) {\n      console.error('Error getting token balance:', error);\n      throw error;\n    }\n  }\n\n  async transferToken(tokenAddress, fromWallet, toAddress, amount) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    \n    try {\n      const tokenPublicKey = new PublicKey(tokenAddress);\n      const toPublicKey = new PublicKey(toAddress);\n      const fromPublicKey = new PublicKey(fromWallet);\n      \n      // Calculate tax amounts (5% total)\n      const liquidityTax = amount * 0.03; // 3% for liquidity\n      const marketingTax = amount * 0.01; // 1% for marketing\n      const charityTax = amount * 0.01; // 1% for charity\n      const burnTax = amount * 0.01; // 1% for burn\n      \n      // Calculate amount after tax\n      const amountAfterTax = amount - (liquidityTax + marketingTax + charityTax + burnTax);\n      \n      // Get token decimals\n      const decimals = this.tokenInfo[tokenAddress]?.decimals || \n                      (await this.getTokenInfo(tokenAddress)).decimals;\n      \n      // Create transaction\n      const transaction = new Transaction();\n      \n      // Get the token account of the fromWallet address for the token\n      const fromTokenAccounts = await this.connection.getParsedTokenAccountsByOwner(\n        fromPublicKey,\n        { mint: tokenPublicKey }\n      );\n      \n      // If no token account found, throw error\n      if (fromTokenAccounts.value.length === 0) {\n        throw new Error('No token account found for the sender');\n      }\n      \n      const fromTokenAccount = fromTokenAccounts.value[0].pubkey;\n      \n      // Get or create associated token account for recipient\n      let toTokenAccount;\n      try {\n        const toTokenAccounts = await this.connection.getParsedTokenAccountsByOwner(\n          toPublicKey,\n          { mint: tokenPublicKey }\n        );\n        \n        if (toTokenAccounts.value.length > 0) {\n          toTokenAccount = toTokenAccounts.value[0].pubkey;\n        } else {\n          // In a real implementation, you would create an associated token account\n          // This is simplified for the example\n          throw new Error('Recipient does not have a token account for this token');\n        }\n      } catch (error) {\n        throw new Error('Error checking recipient token account: ' + error.message);\n      }\n      \n      // Create transfer instruction\n      const transferInstruction = createTransferInstruction(\n        fromTokenAccount,\n        toTokenAccount,\n        fromPublicKey,\n        amountAfterTax * Math.pow(10, decimals),\n        [],\n        TOKEN_PROGRAM_ID\n      );\n      \n      // Add transfer instruction to transaction\n      transaction.add(transferInstruction);\n      \n      // Add burn instruction for the burn tax\n      if (burnTax > 0) {\n        // Create burn instruction\n        const burnInstruction = createBurnInstruction(\n          fromTokenAccount,\n          tokenPublicKey,\n          fromPublicKey,\n          burnTax * Math.pow(10, decimals)\n        );\n        \n        // Add burn instruction to transaction\n        transaction.add(burnInstruction);\n      }\n      \n      // Set recent blockhash and fee payer\n      transaction.recentBlockhash = (await this.connection.getRecentBlockhash()).blockhash;\n      transaction.feePayer = fromPublicKey;\n      \n      // Sign transaction using the wallet adapter\n      let signedTransaction;\n      \n      // For Phantom\n      if (window.solana?.isPhantom) {\n        signedTransaction = await window.solana.signTransaction(transaction);\n      }\n      // For Solflare\n      else if (window.solflare) {\n        signedTransaction = await window.solflare.signTransaction(transaction);\n      }\n      else {\n        throw new Error('No compatible wallet found');\n      }\n      \n      const signature = await this.connection.sendRawTransaction(signedTransaction.serialize());\n      \n      // Wait for confirmation\n      await this.connection.confirmTransaction(signature);\n      \n      return {\n        signature,\n        status: 'confirmed',\n        amountBurned: burnTax\n      };\n    } catch (error) {\n      console.error('Error transferring token:', error);\n      throw error;\n    }\n  }\n\n  async getTokenInfo(tokenAddress) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    \n    try {\n      // If we already have the info cached, return it\n      if (this.tokenInfo[tokenAddress]) {\n        return this.tokenInfo[tokenAddress];\n      }\n      \n      const tokenPublicKey = new PublicKey(tokenAddress);\n      const tokenInfo = await this.connection.getParsedAccountInfo(tokenPublicKey);\n      \n      if (!tokenInfo.value) {\n        throw new Error('Token not found');\n      }\n      \n      // Parse token info\n      const parsedInfo = {\n        address: tokenAddress,\n        decimals: tokenInfo.value.data.parsed.info.decimals,\n        supply: tokenInfo.value.data.parsed.info.supply,\n        name: tokenInfo.value.data.parsed.info.name || 'Unknown Token',\n        symbol: tokenInfo.value.data.parsed.info.symbol || 'UNKNOWN'\n      };\n      \n      // Cache the info\n      this.tokenInfo[tokenAddress] = parsedInfo;\n      \n      return parsedInfo;\n    } catch (error) {\n      console.error('Error getting token info:', error);\n      throw error;\n    }\n  }\n\n  async getAccountTransactions(walletAddress, limit = 10) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    if (!walletAddress) throw new Error('Wallet address is required');\n    \n    try {\n      const walletPublicKey = new PublicKey(walletAddress);\n      \n      // Get recent transactions for the account\n      const signatures = await this.connection.getSignaturesForAddress(\n        walletPublicKey,\n        { limit }\n      );\n      \n      // Return simplified transaction data\n      return signatures.map(sig => ({\n        signature: sig.signature,\n        timestamp: sig.blockTime || Date.now() / 1000,\n        status: sig.confirmationStatus || 'confirmed',\n        type: 'unknown',\n        symbol: 'SOL',\n        decimals: 9,\n        amount: 0 // We don't parse the amount here for simplicity\n      }));\n    } catch (error) {\n      console.error('Error getting account transactions:', error);\n      return []; // Return empty array instead of throwing\n    }\n  }\n\n  async getTokenTransactions(tokenAddress, walletAddress, limit = 10) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    if (!tokenAddress) throw new Error('Token address is required');\n    if (!walletAddress) throw new Error('Wallet address is required');\n    \n    try {\n      // Just return empty array for now to avoid errors\n      return [];\n    } catch (error) {\n      console.error('Error getting token transactions:', error);\n      return []; // Return empty array instead of throwing\n    }\n  }\n\n  async getNativeBalance(walletAddress) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    if (!walletAddress) throw new Error('Wallet address is required');\n    \n    try {\n      const walletPublicKey = new PublicKey(walletAddress);\n      const balance = await this.connection.getBalance(walletPublicKey);\n      return balance / 1000000000; // Convert lamports to SOL\n    } catch (error) {\n      console.error('Error getting native balance:', error);\n      throw error;\n    }\n  }\n\n  async transferNativeSOL(fromWallet, toAddress, amount) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    \n    try {\n      const toPublicKey = new PublicKey(toAddress);\n      const fromPublicKey = new PublicKey(fromWallet);\n      \n      // Create a simple transfer instruction\n      const transaction = new Transaction().add(\n        SystemProgram.transfer({\n          fromPubkey: fromPublicKey,\n          toPubkey: toPublicKey,\n          lamports: amount * 1000000000 // Convert SOL to lamports\n        })\n      );\n      \n      // Set recent blockhash and fee payer\n      transaction.recentBlockhash = (await this.connection.getRecentBlockhash()).blockhash;\n      transaction.feePayer = fromPublicKey;\n      \n      // Sign transaction using the wallet adapter\n      let signedTransaction;\n      \n      // For Phantom\n      if (window.solana?.isPhantom) {\n        signedTransaction = await window.solana.signTransaction(transaction);\n      }\n      // For Solflare\n      else if (window.solflare) {\n        signedTransaction = await window.solflare.signTransaction(transaction);\n      }\n      else {\n        throw new Error('No compatible wallet found');\n      }\n      \n      const signature = await this.connection.sendRawTransaction(signedTransaction.serialize());\n      \n      // Wait for confirmation\n      await this.connection.confirmTransaction(signature);\n      \n      return {\n        signature,\n        status: 'confirmed'\n      };\n    } catch (error) {\n      console.error('Error transferring SOL:', error);\n      throw error;\n    }\n  }\n\n  async burnToken(tokenAddress, ownerAddress, amount) {\n    if (!this.connection) throw new Error('Token service not initialized');\n    \n    try {\n      const tokenPublicKey = new PublicKey(tokenAddress);\n      const ownerPublicKey = new PublicKey(ownerAddress);\n      \n      // Get the token account of the owner\n      const tokenAccounts = await this.connection.getParsedTokenAccountsByOwner(\n        ownerPublicKey,\n        { mint: tokenPublicKey }\n      );\n      \n      if (tokenAccounts.value.length === 0) {\n        throw new Error('No token account found for the owner');\n      }\n      \n      const tokenAccount = tokenAccounts.value[0].pubkey;\n      \n      // Get token decimals\n      const decimals = this.tokenInfo[tokenAddress]?.decimals || \n                      (await this.getTokenInfo(tokenAddress)).decimals;\n      \n      // Create burn instruction\n      const burnInstruction = createBurnInstruction(\n        tokenAccount,\n        tokenPublicKey,\n        ownerPublicKey,\n        amount * Math.pow(10, decimals)\n      );\n      \n      // Create transaction and add the burn instruction\n      const transaction = new Transaction().add(burnInstruction);\n      \n      // Set recent blockhash and fee payer\n      transaction.recentBlockhash = (await this.connection.getRecentBlockhash()).blockhash;\n      transaction.feePayer = ownerPublicKey;\n      \n      // Sign transaction using the wallet adapter\n      let signedTransaction;\n      \n      // For Phantom\n      if (window.solana?.isPhantom) {\n        signedTransaction = await window.solana.signTransaction(transaction);\n      }\n      // For Solflare\n      else if (window.solflare) {\n        signedTransaction = await window.solflare.signTransaction(transaction);\n      }\n      else {\n        throw new Error('No compatible wallet found');\n      }\n      \n      const signature = await this.connection.sendRawTransaction(signedTransaction.serialize());\n      \n      // Wait for confirmation\n      await this.connection.confirmTransaction(signature);\n      \n      return {\n        signature,\n        status: 'confirmed'\n      };\n    } catch (error) {\n      console.error('Error burning token:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new TokenService();\n\nexport const burnTokens = async (wallet, tokenAddress, amount) => {\n  if (!wallet.publicKey) {\n    throw new Error('Wallet not connected');\n  }\n\n  const connection = new Connection(\n    clusterApiUrl(process.env.REACT_APP_SOLANA_NETWORK || 'devnet'),\n    'confirmed'\n  );\n\n  // For SOL burning (send to a dead address)\n  if (tokenAddress === 'native') {\n    // Burn address (a known unusable address)\n    const burnAddress = new PublicKey('1111111111111111111111111111111111111111111');\n    \n    const transaction = new Transaction().add(\n      SystemProgram.transfer({\n        fromPubkey: wallet.publicKey,\n        toPubkey: burnAddress,\n        lamports: amount * LAMPORTS_PER_SOL,\n      })\n    );\n\n    const signature = await wallet.sendTransaction(transaction, connection);\n    await connection.confirmTransaction(signature, 'confirmed');\n    return signature;\n  } else {\n    // For SPL tokens\n    const mint = new PublicKey(tokenAddress);\n    const associatedTokenAddress = await getAssociatedTokenAddress(\n      mint,\n      wallet.publicKey\n    );\n\n    const burnInstruction = createBurnInstruction(\n      associatedTokenAddress,\n      mint,\n      wallet.publicKey,\n      amount * Math.pow(10, await getMintDecimals(connection, mint))\n    );\n\n    const transaction = new Transaction().add(burnInstruction);\n    \n    const signature = await wallet.sendTransaction(transaction, connection);\n    await connection.confirmTransaction(signature, 'confirmed');\n    return signature;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}