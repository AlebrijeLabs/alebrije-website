{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{ConnectionProvider,WalletProvider,useWallet as useSolanaWallet,useConnection}from'@solana/wallet-adapter-react';import{WalletAdapterNetwork}from'@solana/wallet-adapter-base';import{PhantomWalletAdapter,SolflareWalletAdapter}from'@solana/wallet-adapter-wallets';import{WalletModalProvider,WalletMultiButton}from'@solana/wallet-adapter-react-ui';import{clusterApiUrl}from'@solana/web3.js';import{AlebrijeError,ErrorTypes}from'../utils/error-handler';// Import wallet adapter CSS\nimport'@solana/wallet-adapter-react-ui/styles.css';// Create a simpler context structure\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AlebrijeWalletContext=/*#__PURE__*/createContext(null);export function WalletContextProvider(_ref){let{children}=_ref;// Network configuration\nconst[network,setNetwork]=useState(WalletAdapterNetwork.Devnet);const endpoint=clusterApiUrl(network);// Get wallet adapters\nconst wallets=[new PhantomWalletAdapter(),new SolflareWalletAdapter()];const switchNetwork=newNetwork=>{if(Object.values(WalletAdapterNetwork).includes(newNetwork)){setNetwork(newNetwork);return true;}return false;};// Create a wrapper to provide our custom context\nconst AlebrijeWalletContextProvider=_ref2=>{let{children}=_ref2;const{publicKey,connected,connecting,disconnect,select,wallet}=useSolanaWallet();const{connection}=useConnection();const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const contextValue={publicKey,connected,connecting,connection,currentAccount:(publicKey===null||publicKey===void 0?void 0:publicKey.toString())||null,loading,error,walletName:(wallet===null||wallet===void 0?void 0:wallet.name)||null,disconnectWallet:async()=>{try{setLoading(true);await disconnect();return true;}catch(err){setError(err);throw err;}finally{setLoading(false);}},connectWallet:async walletName=>{try{setLoading(true);if(walletName){select(walletName);}return connected;}catch(err){setError(err);throw err;}finally{setLoading(false);}},switchNetwork,network};return/*#__PURE__*/_jsx(AlebrijeWalletContext.Provider,{value:contextValue,children:children});};return/*#__PURE__*/_jsx(ConnectionProvider,{endpoint:endpoint,children:/*#__PURE__*/_jsx(WalletProvider,{wallets:wallets,autoConnect:true,children:/*#__PURE__*/_jsx(WalletModalProvider,{children:/*#__PURE__*/_jsx(AlebrijeWalletContextProvider,{children:children})})})});}// Custom hook to use our wallet context\nexport function useAlebrijeWallet(){const context=useContext(AlebrijeWalletContext);if(!context){throw new Error('useAlebrijeWallet must be used within a WalletContextProvider');}return context;}// For backward compatibility\nexport const useWallet=useAlebrijeWallet;// Export the WalletMultiButton component for easy access\nexport{WalletMultiButton};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ConnectionProvider","WalletProvider","useWallet","useSolanaWallet","useConnection","WalletAdapterNetwork","PhantomWalletAdapter","SolflareWalletAdapter","WalletModalProvider","WalletMultiButton","clusterApiUrl","AlebrijeError","ErrorTypes","jsx","_jsx","AlebrijeWalletContext","WalletContextProvider","_ref","children","network","setNetwork","Devnet","endpoint","wallets","switchNetwork","newNetwork","Object","values","includes","AlebrijeWalletContextProvider","_ref2","publicKey","connected","connecting","disconnect","select","wallet","connection","loading","setLoading","error","setError","contextValue","currentAccount","toString","walletName","name","disconnectWallet","err","connectWallet","Provider","value","autoConnect","useAlebrijeWallet","context","Error"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/contexts/WalletContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport {\n  ConnectionProvider,\n  WalletProvider,\n  useWallet as useSolanaWallet,\n  useConnection\n} from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport {\n  PhantomWalletAdapter,\n  SolflareWalletAdapter\n} from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport { AlebrijeError, ErrorTypes } from '../utils/error-handler';\n\n// Import wallet adapter CSS\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\n// Create a simpler context structure\nconst AlebrijeWalletContext = createContext(null);\n\nexport function WalletContextProvider({ children }) {\n  // Network configuration\n  const [network, setNetwork] = useState(WalletAdapterNetwork.Devnet);\n  const endpoint = clusterApiUrl(network);\n  \n  // Get wallet adapters\n  const wallets = [\n    new PhantomWalletAdapter(),\n    new SolflareWalletAdapter()\n  ];\n  \n  const switchNetwork = (newNetwork) => {\n    if (Object.values(WalletAdapterNetwork).includes(newNetwork)) {\n      setNetwork(newNetwork);\n      return true;\n    }\n    return false;\n  };\n  \n  // Create a wrapper to provide our custom context\n  const AlebrijeWalletContextProvider = ({ children }) => {\n    const { publicKey, connected, connecting, disconnect, select, wallet } = useSolanaWallet();\n    const { connection } = useConnection();\n    \n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n    const contextValue = {\n      publicKey,\n      connected,\n      connecting,\n      connection,\n      currentAccount: publicKey?.toString() || null,\n      loading,\n      error,\n      walletName: wallet?.name || null,\n      disconnectWallet: async () => {\n        try {\n          setLoading(true);\n          await disconnect();\n          return true;\n        } catch (err) {\n          setError(err);\n          throw err;\n        } finally {\n          setLoading(false);\n        }\n      },\n      connectWallet: async (walletName) => {\n        try {\n          setLoading(true);\n          if (walletName) {\n            select(walletName);\n          }\n          return connected;\n        } catch (err) {\n          setError(err);\n          throw err;\n        } finally {\n          setLoading(false);\n        }\n      },\n      switchNetwork,\n      network\n    };\n    \n    return (\n      <AlebrijeWalletContext.Provider value={contextValue}>\n        {children}\n      </AlebrijeWalletContext.Provider>\n    );\n  };\n  \n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <AlebrijeWalletContextProvider>\n            {children}\n          </AlebrijeWalletContextProvider>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\n// Custom hook to use our wallet context\nexport function useAlebrijeWallet() {\n  const context = useContext(AlebrijeWalletContext);\n  \n  if (!context) {\n    throw new Error('useAlebrijeWallet must be used within a WalletContextProvider');\n  }\n  \n  return context;\n}\n\n// For backward compatibility\nexport const useWallet = useAlebrijeWallet;\n\n// Export the WalletMultiButton component for easy access\nexport { WalletMultiButton }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}