{"ast":null,"code":"var _jsxFileName = \"/Users/rastavo/alebrije-project/alebrije-wallet/src/components/TokenTransfer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, Card, Alert } from 'react-bootstrap';\nimport { PublicKey } from '@solana/web3.js';\nimport TokenService from '../services/token-service';\nimport { useWallet } from '../contexts/WalletContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TokenTransfer = ({\n  tokenAddress: propTokenAddress\n}) => {\n  _s();\n  const {\n    connected,\n    publicKey\n  } = useWallet();\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [customTokenAddress, setCustomTokenAddress] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [isValidAddress, setIsValidAddress] = useState(true);\n  const [isValidTokenAddress, setIsValidTokenAddress] = useState(true);\n  const [balance, setBalance] = useState(null);\n  const [tokenInfo, setTokenInfo] = useState(null);\n  const effectiveTokenAddress = propTokenAddress || customTokenAddress;\n  useEffect(() => {\n    if (connected && publicKey && effectiveTokenAddress) {\n      loadTokenInfo();\n      loadBalance();\n    }\n  }, [connected, publicKey, effectiveTokenAddress]);\n  const loadTokenInfo = async () => {\n    if (!effectiveTokenAddress) return;\n    try {\n      const info = await TokenService.getTokenInfo(effectiveTokenAddress);\n      setTokenInfo(info);\n    } catch (err) {\n      console.error('Error loading token info:', err);\n      setTokenInfo(null);\n    }\n  };\n  const loadBalance = async () => {\n    try {\n      if (!effectiveTokenAddress) {\n        setBalance(null);\n        return;\n      }\n      if (effectiveTokenAddress === 'native') {\n        const bal = await TokenService.getNativeBalance(publicKey.toString());\n        setBalance(bal);\n      } else {\n        const bal = await TokenService.getTokenBalance(effectiveTokenAddress, publicKey.toString());\n        setBalance(bal);\n      }\n    } catch (err) {\n      console.error('Error loading balance:', err);\n      setBalance(null);\n    }\n  };\n  const validateAddress = address => {\n    try {\n      if (!address) return true;\n      new PublicKey(address);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n  const handleTokenAddressChange = e => {\n    const value = e.target.value;\n    setCustomTokenAddress(value);\n    setIsValidTokenAddress(validateAddress(value));\n    setError(null);\n    setBalance(null);\n    setTokenInfo(null);\n  };\n  const handleRecipientChange = e => {\n    const value = e.target.value;\n    setRecipient(value);\n    setIsValidAddress(validateAddress(value));\n    setError(null);\n  };\n  const handleAmountChange = e => {\n    const value = e.target.value;\n    setAmount(value);\n    setError(null);\n    const numValue = parseFloat(value);\n    if (!isNaN(numValue) && balance !== null && numValue > balance) {\n      setError('Insufficient balance');\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!connected || !publicKey) {\n      setError('Wallet not connected');\n      return;\n    }\n    if (!effectiveTokenAddress) {\n      setError('Please enter a token address');\n      return;\n    }\n    if (!isValidTokenAddress && effectiveTokenAddress !== 'native') {\n      setError('Invalid token address');\n      return;\n    }\n    if (!recipient || !amount) {\n      setError('Please fill in all fields');\n      return;\n    }\n    if (!validateAddress(recipient)) {\n      setError('Invalid recipient address');\n      return;\n    }\n    const amountValue = parseFloat(amount);\n    if (isNaN(amountValue) || amountValue <= 0) {\n      setError('Invalid amount');\n      return;\n    }\n\n    // For native SOL, we need to account for transaction fees\n    if (effectiveTokenAddress === 'native') {\n      const estimatedFee = 0.000005; // 5000 lamports\n      if (amountValue + estimatedFee > balance) {\n        setError(`Insufficient balance for transfer and network fees. You need ${(amountValue + estimatedFee).toFixed(9)} SOL but have ${balance.toFixed(9)} SOL`);\n        return;\n      }\n    } else if (amountValue > balance) {\n      setError(`Insufficient balance. You need ${amountValue} tokens but have ${balance} tokens`);\n      return;\n    }\n    setIsSubmitting(true);\n    setError(null);\n    setSuccess(null);\n    try {\n      console.log('Initiating transfer:', {\n        type: effectiveTokenAddress === 'native' ? 'SOL' : 'TOKEN',\n        from: publicKey.toString(),\n        to: recipient,\n        amount: amountValue\n      });\n      let result;\n      if (effectiveTokenAddress === 'native') {\n        result = await TokenService.transferNativeSOL(publicKey.toString(), recipient, amountValue);\n      } else {\n        result = await TokenService.transferToken(effectiveTokenAddress, publicKey.toString(), recipient, amountValue);\n      }\n      console.log('Transfer result:', result);\n      if (result.status === 'confirmed') {\n        setSuccess(`Transfer successful! Transaction signature: ${result.signature}`);\n        setRecipient('');\n        setAmount('');\n        setTimeout(loadBalance, 2000);\n      } else {\n        throw new Error('Transfer failed: Transaction was not confirmed');\n      }\n    } catch (err) {\n      var _err$message, _err$message2, _err$message3, _err$message4, _err$message5;\n      console.error('Transfer error:', err);\n\n      // Handle specific error cases\n      if ((_err$message = err.message) !== null && _err$message !== void 0 && _err$message.includes('insufficient balance')) {\n        setError('Insufficient balance for transfer and network fees');\n      } else if ((_err$message2 = err.message) !== null && _err$message2 !== void 0 && _err$message2.includes('User rejected')) {\n        setError('Transaction was cancelled by user');\n      } else if ((_err$message3 = err.message) !== null && _err$message3 !== void 0 && _err$message3.includes('simulation failed')) {\n        setError('Transaction failed. Please check your balance and try again.');\n      } else if ((_err$message4 = err.message) !== null && _err$message4 !== void 0 && _err$message4.includes('Network error') || (_err$message5 = err.message) !== null && _err$message5 !== void 0 && _err$message5.includes('timeout')) {\n        setError('Network error. Please try again.');\n      } else {\n        setError(err.message || 'Transfer failed: Unexpected error');\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: [\"Transfer \", effectiveTokenAddress === 'native' ? 'SOL' : 'Tokens']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 19\n      }, this), success && /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"success\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }, this), !propTokenAddress && /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Token Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          value: customTokenAddress,\n          onChange: handleTokenAddressChange,\n          disabled: isSubmitting,\n          isInvalid: !isValidTokenAddress && customTokenAddress !== '',\n          className: \"font-monospace\",\n          placeholder: \"Enter token mint address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), tokenInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2 text-muted\",\n          children: [\"Token: \", tokenInfo.symbol, \" (\", tokenInfo.name, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-muted\",\n              children: balance !== null ? `${balance} ${(tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.symbol) || (effectiveTokenAddress === 'native' ? 'SOL' : 'tokens')}` : effectiveTokenAddress ? 'Loading...' : 'Enter token address'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Recipient Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: recipient,\n            onChange: handleRecipientChange,\n            disabled: isSubmitting,\n            isInvalid: !isValidAddress && recipient !== '',\n            className: \"font-monospace\",\n            placeholder: \"Enter recipient's Solana address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"number\",\n              step: \"0.000001\",\n              min: \"0\",\n              value: amount,\n              onChange: handleAmountChange,\n              disabled: isSubmitting || !effectiveTokenAddress,\n              placeholder: \"Enter amount to transfer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"input-group-text\",\n              children: (tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.symbol) || (effectiveTokenAddress === 'native' ? 'SOL' : 'tokens')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          disabled: isSubmitting || !isValidAddress || !isValidTokenAddress || !effectiveTokenAddress || amount && parseFloat(amount) > balance,\n          className: \"w-100\",\n          children: isSubmitting ? 'Processing...' : 'Transfer'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(TokenTransfer, \"XlpEdYqNDquy/+2N/cVz9npy8HE=\", false, function () {\n  return [useWallet];\n});\n_c = TokenTransfer;\nexport default TokenTransfer;\nvar _c;\n$RefreshReg$(_c, \"TokenTransfer\");","map":{"version":3,"names":["React","useState","useEffect","Form","Button","Card","Alert","PublicKey","TokenService","useWallet","jsxDEV","_jsxDEV","TokenTransfer","tokenAddress","propTokenAddress","_s","connected","publicKey","recipient","setRecipient","amount","setAmount","customTokenAddress","setCustomTokenAddress","isSubmitting","setIsSubmitting","error","setError","success","setSuccess","isValidAddress","setIsValidAddress","isValidTokenAddress","setIsValidTokenAddress","balance","setBalance","tokenInfo","setTokenInfo","effectiveTokenAddress","loadTokenInfo","loadBalance","info","getTokenInfo","err","console","bal","getNativeBalance","toString","getTokenBalance","validateAddress","address","handleTokenAddressChange","e","value","target","handleRecipientChange","handleAmountChange","numValue","parseFloat","isNaN","handleSubmit","preventDefault","amountValue","estimatedFee","toFixed","log","type","from","to","result","transferNativeSOL","transferToken","status","signature","setTimeout","Error","_err$message","_err$message2","_err$message3","_err$message4","_err$message5","message","includes","children","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","variant","Group","className","Label","Control","onChange","disabled","isInvalid","placeholder","symbol","name","onSubmit","step","min","_c","$RefreshReg$"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/components/TokenTransfer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Form, Button, Card, Alert } from 'react-bootstrap';\nimport { PublicKey } from '@solana/web3.js';\nimport TokenService from '../services/token-service';\nimport { useWallet } from '../contexts/WalletContext';\n\nconst TokenTransfer = ({ tokenAddress: propTokenAddress }) => {\n  const { connected, publicKey } = useWallet();\n  const [recipient, setRecipient] = useState('');\n  const [amount, setAmount] = useState('');\n  const [customTokenAddress, setCustomTokenAddress] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [isValidAddress, setIsValidAddress] = useState(true);\n  const [isValidTokenAddress, setIsValidTokenAddress] = useState(true);\n  const [balance, setBalance] = useState(null);\n  const [tokenInfo, setTokenInfo] = useState(null);\n  \n  const effectiveTokenAddress = propTokenAddress || customTokenAddress;\n  \n  useEffect(() => {\n    if (connected && publicKey && effectiveTokenAddress) {\n      loadTokenInfo();\n      loadBalance();\n    }\n  }, [connected, publicKey, effectiveTokenAddress]);\n\n  const loadTokenInfo = async () => {\n    if (!effectiveTokenAddress) return;\n    try {\n      const info = await TokenService.getTokenInfo(effectiveTokenAddress);\n      setTokenInfo(info);\n    } catch (err) {\n      console.error('Error loading token info:', err);\n      setTokenInfo(null);\n    }\n  };\n\n  const loadBalance = async () => {\n    try {\n      if (!effectiveTokenAddress) {\n        setBalance(null);\n        return;\n      }\n      \n      if (effectiveTokenAddress === 'native') {\n        const bal = await TokenService.getNativeBalance(publicKey.toString());\n        setBalance(bal);\n      } else {\n        const bal = await TokenService.getTokenBalance(effectiveTokenAddress, publicKey.toString());\n        setBalance(bal);\n      }\n    } catch (err) {\n      console.error('Error loading balance:', err);\n      setBalance(null);\n    }\n  };\n  \n  const validateAddress = (address) => {\n    try {\n      if (!address) return true;\n      new PublicKey(address);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  const handleTokenAddressChange = (e) => {\n    const value = e.target.value;\n    setCustomTokenAddress(value);\n    setIsValidTokenAddress(validateAddress(value));\n    setError(null);\n    setBalance(null);\n    setTokenInfo(null);\n  };\n\n  const handleRecipientChange = (e) => {\n    const value = e.target.value;\n    setRecipient(value);\n    setIsValidAddress(validateAddress(value));\n    setError(null);\n  };\n\n  const handleAmountChange = (e) => {\n    const value = e.target.value;\n    setAmount(value);\n    setError(null);\n    \n    const numValue = parseFloat(value);\n    if (!isNaN(numValue) && balance !== null && numValue > balance) {\n      setError('Insufficient balance');\n    }\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!connected || !publicKey) {\n      setError('Wallet not connected');\n      return;\n    }\n    \n    if (!effectiveTokenAddress) {\n      setError('Please enter a token address');\n      return;\n    }\n\n    if (!isValidTokenAddress && effectiveTokenAddress !== 'native') {\n      setError('Invalid token address');\n      return;\n    }\n    \n    if (!recipient || !amount) {\n      setError('Please fill in all fields');\n      return;\n    }\n    \n    if (!validateAddress(recipient)) {\n      setError('Invalid recipient address');\n      return;\n    }\n    \n    const amountValue = parseFloat(amount);\n    if (isNaN(amountValue) || amountValue <= 0) {\n      setError('Invalid amount');\n      return;\n    }\n\n    // For native SOL, we need to account for transaction fees\n    if (effectiveTokenAddress === 'native') {\n      const estimatedFee = 0.000005; // 5000 lamports\n      if (amountValue + estimatedFee > balance) {\n        setError(`Insufficient balance for transfer and network fees. You need ${(amountValue + estimatedFee).toFixed(9)} SOL but have ${balance.toFixed(9)} SOL`);\n        return;\n      }\n    } else if (amountValue > balance) {\n      setError(`Insufficient balance. You need ${amountValue} tokens but have ${balance} tokens`);\n      return;\n    }\n    \n    setIsSubmitting(true);\n    setError(null);\n    setSuccess(null);\n    \n    try {\n      console.log('Initiating transfer:', {\n        type: effectiveTokenAddress === 'native' ? 'SOL' : 'TOKEN',\n        from: publicKey.toString(),\n        to: recipient,\n        amount: amountValue\n      });\n\n      let result;\n      \n      if (effectiveTokenAddress === 'native') {\n        result = await TokenService.transferNativeSOL(\n          publicKey.toString(),\n          recipient,\n          amountValue\n        );\n      } else {\n        result = await TokenService.transferToken(\n          effectiveTokenAddress,\n          publicKey.toString(),\n          recipient,\n          amountValue\n        );\n      }\n      \n      console.log('Transfer result:', result);\n      \n      if (result.status === 'confirmed') {\n        setSuccess(`Transfer successful! Transaction signature: ${result.signature}`);\n        setRecipient('');\n        setAmount('');\n        setTimeout(loadBalance, 2000);\n      } else {\n        throw new Error('Transfer failed: Transaction was not confirmed');\n      }\n    } catch (err) {\n      console.error('Transfer error:', err);\n      \n      // Handle specific error cases\n      if (err.message?.includes('insufficient balance')) {\n        setError('Insufficient balance for transfer and network fees');\n      } else if (err.message?.includes('User rejected')) {\n        setError('Transaction was cancelled by user');\n      } else if (err.message?.includes('simulation failed')) {\n        setError('Transaction failed. Please check your balance and try again.');\n      } else if (err.message?.includes('Network error') || err.message?.includes('timeout')) {\n        setError('Network error. Please try again.');\n      } else {\n        setError(err.message || 'Transfer failed: Unexpected error');\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Transfer {effectiveTokenAddress === 'native' ? 'SOL' : 'Tokens'}</Card.Title>\n        \n        {error && <Alert variant=\"danger\">{error}</Alert>}\n        {success && <Alert variant=\"success\">{success}</Alert>}\n        \n        {!propTokenAddress && (\n          <Form.Group className=\"mb-4\">\n            <Form.Label>Token Address</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={customTokenAddress}\n              onChange={handleTokenAddressChange}\n              disabled={isSubmitting}\n              isInvalid={!isValidTokenAddress && customTokenAddress !== ''}\n              className=\"font-monospace\"\n              placeholder=\"Enter token mint address\"\n            />\n            {tokenInfo && (\n              <div className=\"mt-2 text-muted\">\n                Token: {tokenInfo.symbol} ({tokenInfo.name})\n              </div>\n            )}\n          </Form.Group>\n        )}\n        \n        <div className=\"mb-4\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <div>\n              <strong>Balance</strong>\n              <div className=\"text-muted\">\n                {balance !== null \n                  ? `${balance} ${tokenInfo?.symbol || (effectiveTokenAddress === 'native' ? 'SOL' : 'tokens')}` \n                  : effectiveTokenAddress \n                    ? 'Loading...' \n                    : 'Enter token address'}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <Form onSubmit={handleSubmit}>\n          <Form.Group className=\"mb-4\">\n            <Form.Label>Recipient Address</Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={recipient}\n              onChange={handleRecipientChange}\n              disabled={isSubmitting}\n              isInvalid={!isValidAddress && recipient !== ''}\n              className=\"font-monospace\"\n              placeholder=\"Enter recipient's Solana address\"\n            />\n          </Form.Group>\n          \n          <Form.Group className=\"mb-4\">\n            <Form.Label>Amount</Form.Label>\n            <div className=\"input-group\">\n              <Form.Control\n                type=\"number\"\n                step=\"0.000001\"\n                min=\"0\"\n                value={amount}\n                onChange={handleAmountChange}\n                disabled={isSubmitting || !effectiveTokenAddress}\n                placeholder=\"Enter amount to transfer\"\n              />\n              <span className=\"input-group-text\">\n                {tokenInfo?.symbol || (effectiveTokenAddress === 'native' ? 'SOL' : 'tokens')}\n              </span>\n            </div>\n          </Form.Group>\n          \n          <Button \n            variant=\"primary\" \n            type=\"submit\"\n            disabled={\n              isSubmitting || \n              !isValidAddress || \n              !isValidTokenAddress || \n              !effectiveTokenAddress ||\n              (amount && parseFloat(amount) > balance)\n            }\n            className=\"w-100\"\n          >\n            {isSubmitting ? 'Processing...' : 'Transfer'}\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default TokenTransfer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}