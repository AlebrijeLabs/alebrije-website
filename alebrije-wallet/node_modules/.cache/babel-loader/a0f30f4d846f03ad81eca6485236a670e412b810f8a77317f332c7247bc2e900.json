{"ast":null,"code":"/**\n * Error types for the application\n */\nexport const ErrorTypes = {\n  NETWORK: 'NETWORK',\n  WALLET: 'WALLET',\n  USER: 'USER',\n  UNKNOWN: 'UNKNOWN'\n};\n\n/**\n * Custom error class for Alebrije Wallet\n */\nexport class AlebrijeError extends Error {\n  constructor(message, type = ErrorTypes.UNKNOWN, originalError = null) {\n    super(message);\n    this.name = 'AlebrijeError';\n    this.type = type;\n    this.originalError = originalError;\n  }\n}\n\n/**\n * Handle and transform errors from various sources\n * @param {Error} error - Original error object\n * @param {string} message - Custom message for the error\n * @returns {AlebrijeError} - Transformed error\n */\nexport const handleError = (error, message = '') => {\n  console.error('Error:', error);\n\n  // If it's already an AlebrijeError, just return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n\n  // Determine error type\n  let errorType = ErrorTypes.UNKNOWN;\n\n  // Check for network errors\n  if (error.message && (error.message.includes('Network') || error.message.includes('timeout') || error.message.includes('connection'))) {\n    errorType = ErrorTypes.NETWORK;\n  }\n\n  // Check for wallet-related errors\n  else if (error.message && (error.message.includes('wallet') || error.message.includes('account') || error.message.includes('signature'))) {\n    errorType = ErrorTypes.WALLET;\n  }\n\n  // Create new error with context\n  const finalMessage = message ? `${message}: ${error.message}` : error.message;\n  return new AlebrijeError(finalMessage, errorType, error);\n};\n\n/**\n * Error handler for wallet operations\n */\nexport const handleWalletError = (error, defaultMessage = 'Operation failed') => {\n  console.error('Wallet error:', error);\n\n  // If it's already an AlebrijeError, return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n\n  // Determine error type based on message or code\n  let errorType = ErrorTypes.UNKNOWN;\n  let errorMessage = defaultMessage;\n\n  // Handle Web3 and Ethereum provider errors\n  if (error.code) {\n    switch (error.code) {\n      case 4001:\n        // User rejected the request\n        errorType = ErrorTypes.USER;\n        errorMessage = 'Request was rejected by the user';\n        break;\n      case -32602:\n        // Invalid parameters\n        errorType = ErrorTypes.USER;\n        errorMessage = 'Invalid transaction parameters';\n        break;\n      case -32603:\n        // Internal error\n        errorType = ErrorTypes.WALLET;\n        errorMessage = 'Wallet internal error';\n        break;\n      case -32000:\n      case -32001:\n      case -32002:\n      case -32003:\n        // RPC errors\n        errorType = ErrorTypes.NETWORK;\n        errorMessage = 'Network communication error';\n        break;\n    }\n  }\n\n  // Check for common error messages\n  const errorString = error.message ? error.message.toLowerCase() : '';\n  if (errorString.includes('insufficient funds')) {\n    errorType = ErrorTypes.USER;\n    errorMessage = 'Insufficient funds for this transaction';\n  } else if (errorString.includes('gas')) {\n    errorType = ErrorTypes.TRANSACTION;\n    errorMessage = 'Gas estimation failed or gas limit exceeded';\n  } else if (errorString.includes('nonce')) {\n    errorType = ErrorTypes.TRANSACTION;\n    errorMessage = 'Transaction nonce error. Try resetting your wallet.';\n  } else if (errorString.includes('rejected') || errorString.includes('denied')) {\n    errorType = ErrorTypes.USER;\n    errorMessage = 'Transaction was rejected';\n  } else if (errorString.includes('network') || errorString.includes('connection')) {\n    errorType = ErrorTypes.NETWORK;\n    errorMessage = 'Network connection error';\n  } else if (errorString.includes('timeout')) {\n    errorType = ErrorTypes.NETWORK;\n    errorMessage = 'Request timed out. The network may be congested.';\n  }\n  return new AlebrijeError(errorMessage, errorType, error);\n};","map":{"version":3,"names":["ErrorTypes","NETWORK","WALLET","USER","UNKNOWN","AlebrijeError","Error","constructor","message","type","originalError","name","handleError","error","console","errorType","includes","finalMessage","handleWalletError","defaultMessage","errorMessage","code","errorString","toLowerCase","TRANSACTION"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/utils/error-handler.js"],"sourcesContent":["/**\n * Error types for the application\n */\nexport const ErrorTypes = {\n  NETWORK: 'NETWORK',\n  WALLET: 'WALLET',\n  USER: 'USER',\n  UNKNOWN: 'UNKNOWN'\n};\n\n/**\n * Custom error class for Alebrije Wallet\n */\nexport class AlebrijeError extends Error {\n  constructor(message, type = ErrorTypes.UNKNOWN, originalError = null) {\n    super(message);\n    this.name = 'AlebrijeError';\n    this.type = type;\n    this.originalError = originalError;\n  }\n}\n\n/**\n * Handle and transform errors from various sources\n * @param {Error} error - Original error object\n * @param {string} message - Custom message for the error\n * @returns {AlebrijeError} - Transformed error\n */\nexport const handleError = (error, message = '') => {\n  console.error('Error:', error);\n  \n  // If it's already an AlebrijeError, just return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n  \n  // Determine error type\n  let errorType = ErrorTypes.UNKNOWN;\n  \n  // Check for network errors\n  if (error.message && (\n    error.message.includes('Network') ||\n    error.message.includes('timeout') ||\n    error.message.includes('connection')\n  )) {\n    errorType = ErrorTypes.NETWORK;\n  }\n  \n  // Check for wallet-related errors\n  else if (error.message && (\n    error.message.includes('wallet') ||\n    error.message.includes('account') ||\n    error.message.includes('signature')\n  )) {\n    errorType = ErrorTypes.WALLET;\n  }\n  \n  // Create new error with context\n  const finalMessage = message ? `${message}: ${error.message}` : error.message;\n  return new AlebrijeError(finalMessage, errorType, error);\n};\n\n/**\n * Error handler for wallet operations\n */\nexport const handleWalletError = (error, defaultMessage = 'Operation failed') => {\n  console.error('Wallet error:', error);\n  \n  // If it's already an AlebrijeError, return it\n  if (error instanceof AlebrijeError) {\n    return error;\n  }\n  \n  // Determine error type based on message or code\n  let errorType = ErrorTypes.UNKNOWN;\n  let errorMessage = defaultMessage;\n  \n  // Handle Web3 and Ethereum provider errors\n  if (error.code) {\n    switch (error.code) {\n      case 4001:\n        // User rejected the request\n        errorType = ErrorTypes.USER;\n        errorMessage = 'Request was rejected by the user';\n        break;\n      \n      case -32602:\n        // Invalid parameters\n        errorType = ErrorTypes.USER;\n        errorMessage = 'Invalid transaction parameters';\n        break;\n      \n      case -32603:\n        // Internal error\n        errorType = ErrorTypes.WALLET;\n        errorMessage = 'Wallet internal error';\n        break;\n      \n      case -32000:\n      case -32001:\n      case -32002:\n      case -32003:\n        // RPC errors\n        errorType = ErrorTypes.NETWORK;\n        errorMessage = 'Network communication error';\n        break;\n    }\n  }\n  \n  // Check for common error messages\n  const errorString = error.message ? error.message.toLowerCase() : '';\n  \n  if (errorString.includes('insufficient funds')) {\n    errorType = ErrorTypes.USER;\n    errorMessage = 'Insufficient funds for this transaction';\n  } else if (errorString.includes('gas')) {\n    errorType = ErrorTypes.TRANSACTION;\n    errorMessage = 'Gas estimation failed or gas limit exceeded';\n  } else if (errorString.includes('nonce')) {\n    errorType = ErrorTypes.TRANSACTION;\n    errorMessage = 'Transaction nonce error. Try resetting your wallet.';\n  } else if (errorString.includes('rejected') || errorString.includes('denied')) {\n    errorType = ErrorTypes.USER;\n    errorMessage = 'Transaction was rejected';\n  } else if (errorString.includes('network') || errorString.includes('connection')) {\n    errorType = ErrorTypes.NETWORK;\n    errorMessage = 'Network connection error';\n  } else if (errorString.includes('timeout')) {\n    errorType = ErrorTypes.NETWORK;\n    errorMessage = 'Request timed out. The network may be congested.';\n  }\n  \n  return new AlebrijeError(errorMessage, errorType, error);\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}