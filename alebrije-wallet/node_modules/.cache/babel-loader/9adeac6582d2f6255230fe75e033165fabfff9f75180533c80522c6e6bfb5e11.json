{"ast":null,"code":"// Basic implementation of wallet service\nclass WalletService{constructor(){this.connected=false;this.accounts=[];}async connect(){try{// Implement actual wallet connection logic here\n// For now, we'll just simulate a successful connection\nthis.connected=true;this.accounts=['0x1234567890123456789012345678901234567890'];return true;}catch(error){console.error('Connection failed:',error);return false;}}async disconnect(){this.connected=false;this.accounts=[];return true;}isConnected(){return this.connected;}getAccounts(){return this.accounts;}getCurrentAccount(){return this.accounts[0]||null;}async signTransaction(transaction){if(!this.connected){throw new Error('Wallet not connected');}// Implement actual transaction signing logic\nreturn transaction;}async sendTransaction(transaction){if(!this.connected){throw new Error('Wallet not connected');}// Implement actual transaction sending logic\nreturn{hash:'0x'+Math.random().toString(16).substring(2,66),status:'confirmed'};}}export default new WalletService();","map":{"version":3,"names":["WalletService","constructor","connected","accounts","connect","error","console","disconnect","isConnected","getAccounts","getCurrentAccount","signTransaction","transaction","Error","sendTransaction","hash","Math","random","toString","substring","status"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/services/wallet-service.js"],"sourcesContent":["// Basic implementation of wallet service\nclass WalletService {\n  constructor() {\n    this.connected = false;\n    this.accounts = [];\n  }\n  \n  async connect() {\n    try {\n      // Implement actual wallet connection logic here\n      // For now, we'll just simulate a successful connection\n      this.connected = true;\n      this.accounts = ['0x1234567890123456789012345678901234567890'];\n      return true;\n    } catch (error) {\n      console.error('Connection failed:', error);\n      return false;\n    }\n  }\n  \n  async disconnect() {\n    this.connected = false;\n    this.accounts = [];\n    return true;\n  }\n  \n  isConnected() {\n    return this.connected;\n  }\n  \n  getAccounts() {\n    return this.accounts;\n  }\n  \n  getCurrentAccount() {\n    return this.accounts[0] || null;\n  }\n  \n  async signTransaction(transaction) {\n    if (!this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // Implement actual transaction signing logic\n    return transaction;\n  }\n  \n  async sendTransaction(transaction) {\n    if (!this.connected) {\n      throw new Error('Wallet not connected');\n    }\n    \n    // Implement actual transaction sending logic\n    return {\n      hash: '0x' + Math.random().toString(16).substring(2, 66),\n      status: 'confirmed'\n    };\n  }\n}\n\nexport default new WalletService(); "],"mappings":"AAAA;AACA,KAAM,CAAAA,aAAc,CAClBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,SAAS,CAAG,KAAK,CACtB,IAAI,CAACC,QAAQ,CAAG,EAAE,CACpB,CAEA,KAAM,CAAAC,OAAOA,CAAA,CAAG,CACd,GAAI,CACF;AACA;AACA,IAAI,CAACF,SAAS,CAAG,IAAI,CACrB,IAAI,CAACC,QAAQ,CAAG,CAAC,4CAA4C,CAAC,CAC9D,MAAO,KAAI,CACb,CAAE,MAAOE,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1C,MAAO,MAAK,CACd,CACF,CAEA,KAAM,CAAAE,UAAUA,CAAA,CAAG,CACjB,IAAI,CAACL,SAAS,CAAG,KAAK,CACtB,IAAI,CAACC,QAAQ,CAAG,EAAE,CAClB,MAAO,KAAI,CACb,CAEAK,WAAWA,CAAA,CAAG,CACZ,MAAO,KAAI,CAACN,SAAS,CACvB,CAEAO,WAAWA,CAAA,CAAG,CACZ,MAAO,KAAI,CAACN,QAAQ,CACtB,CAEAO,iBAAiBA,CAAA,CAAG,CAClB,MAAO,KAAI,CAACP,QAAQ,CAAC,CAAC,CAAC,EAAI,IAAI,CACjC,CAEA,KAAM,CAAAQ,eAAeA,CAACC,WAAW,CAAE,CACjC,GAAI,CAAC,IAAI,CAACV,SAAS,CAAE,CACnB,KAAM,IAAI,CAAAW,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAEA;AACA,MAAO,CAAAD,WAAW,CACpB,CAEA,KAAM,CAAAE,eAAeA,CAACF,WAAW,CAAE,CACjC,GAAI,CAAC,IAAI,CAACV,SAAS,CAAE,CACnB,KAAM,IAAI,CAAAW,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAEA;AACA,MAAO,CACLE,IAAI,CAAE,IAAI,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,CACxDC,MAAM,CAAE,WACV,CAAC,CACH,CACF,CAEA,cAAe,IAAI,CAAApB,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}