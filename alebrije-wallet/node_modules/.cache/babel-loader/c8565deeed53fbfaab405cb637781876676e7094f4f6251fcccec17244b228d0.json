{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect,useCallback}from'react';import{ConnectionProvider,WalletProvider}from'@solana/wallet-adapter-react';import{WalletAdapterNetwork}from'@solana/wallet-adapter-base';import{PhantomWalletAdapter,SolflareWalletAdapter,TorusWalletAdapter,LedgerWalletAdapter,CloverWalletAdapter}from'@solana/wallet-adapter-wallets';import{WalletModalProvider}from'@solana/wallet-adapter-react-ui';import{clusterApiUrl}from'@solana/web3.js';import WalletService from'../services/wallet-service';import{AlebrijeError,ErrorTypes}from'../utils/error-handler';// Import wallet adapter CSS\nimport'@solana/wallet-adapter-react-ui/styles.css';// Create the context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const WalletContext=/*#__PURE__*/createContext(null);export function WalletContextProvider(_ref){let{children}=_ref;// Network configuration\nconst network=WalletAdapterNetwork.Devnet;const endpoint=clusterApiUrl(network);// Wallet state\nconst[connected,setConnected]=useState(false);const[accounts,setAccounts]=useState([]);const[currentAccount,setCurrentAccount]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);// Configure supported wallets\nconst wallets=[new PhantomWalletAdapter(),new SolflareWalletAdapter(),new TorusWalletAdapter(),new LedgerWalletAdapter(),new CloverWalletAdapter()];// Connect wallet\nconst connectWallet=useCallback(async()=>{setLoading(true);setError(null);try{const success=await WalletService.connect();if(success){setConnected(true);setAccounts(WalletService.getAccounts());setCurrentAccount(WalletService.getCurrentAccount());return true;}else{throw new Error('Failed to connect wallet');}}catch(err){setError(err);console.error('Wallet connection error:',err);return false;}finally{setLoading(false);}},[]);// Disconnect wallet\nconst disconnectWallet=useCallback(async()=>{try{await WalletService.disconnect();setConnected(false);setAccounts([]);setCurrentAccount(null);return true;}catch(err){console.error('Wallet disconnection error:',err);return false;}},[]);// Context value\nconst contextValue={connected,accounts,currentAccount,loading,error,connectWallet,disconnectWallet};return/*#__PURE__*/_jsx(ConnectionProvider,{endpoint:endpoint,children:/*#__PURE__*/_jsx(WalletProvider,{wallets:wallets,autoConnect:true,children:/*#__PURE__*/_jsx(WalletModalProvider,{children:/*#__PURE__*/_jsx(WalletContext.Provider,{value:contextValue,children:children})})})});}// Custom hook to use the wallet context\nexport function useWallet(){const context=useContext(WalletContext);if(!context){throw new Error('useWallet must be used within a WalletContextProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","ConnectionProvider","WalletProvider","WalletAdapterNetwork","PhantomWalletAdapter","SolflareWalletAdapter","TorusWalletAdapter","LedgerWalletAdapter","CloverWalletAdapter","WalletModalProvider","clusterApiUrl","WalletService","AlebrijeError","ErrorTypes","jsx","_jsx","WalletContext","WalletContextProvider","_ref","children","network","Devnet","endpoint","connected","setConnected","accounts","setAccounts","currentAccount","setCurrentAccount","loading","setLoading","error","setError","wallets","connectWallet","success","connect","getAccounts","getCurrentAccount","Error","err","console","disconnectWallet","disconnect","contextValue","autoConnect","Provider","value","useWallet","context"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/contexts/WalletContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { \n  PhantomWalletAdapter, \n  SolflareWalletAdapter,\n  TorusWalletAdapter,\n  LedgerWalletAdapter,\n  CloverWalletAdapter\n} from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport WalletService from '../services/wallet-service';\nimport { AlebrijeError, ErrorTypes } from '../utils/error-handler';\n\n// Import wallet adapter CSS\nimport '@solana/wallet-adapter-react-ui/styles.css';\n\n// Create the context\nconst WalletContext = createContext(null);\n\nexport function WalletContextProvider({ children }) {\n  // Network configuration\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = clusterApiUrl(network);\n  \n  // Wallet state\n  const [connected, setConnected] = useState(false);\n  const [accounts, setAccounts] = useState([]);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Configure supported wallets\n  const wallets = [\n    new PhantomWalletAdapter(),\n    new SolflareWalletAdapter(),\n    new TorusWalletAdapter(),\n    new LedgerWalletAdapter(),\n    new CloverWalletAdapter()\n  ];\n  \n  // Connect wallet\n  const connectWallet = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const success = await WalletService.connect();\n      \n      if (success) {\n        setConnected(true);\n        setAccounts(WalletService.getAccounts());\n        setCurrentAccount(WalletService.getCurrentAccount());\n        return true;\n      } else {\n        throw new Error('Failed to connect wallet');\n      }\n    } catch (err) {\n      setError(err);\n      console.error('Wallet connection error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  \n  // Disconnect wallet\n  const disconnectWallet = useCallback(async () => {\n    try {\n      await WalletService.disconnect();\n      setConnected(false);\n      setAccounts([]);\n      setCurrentAccount(null);\n      return true;\n    } catch (err) {\n      console.error('Wallet disconnection error:', err);\n      return false;\n    }\n  }, []);\n  \n  // Context value\n  const contextValue = {\n    connected,\n    accounts,\n    currentAccount,\n    loading,\n    error,\n    connectWallet,\n    disconnectWallet\n  };\n  \n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect>\n        <WalletModalProvider>\n          <WalletContext.Provider value={contextValue}>\n            {children}\n          </WalletContext.Provider>\n        </WalletModalProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\n// Custom hook to use the wallet context\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  \n  if (!context) {\n    throw new Error('useWallet must be used within a WalletContextProvider');\n  }\n  \n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}