{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useWallet}from'../contexts/WalletContext';import WalletConnectionTest from'./WalletConnectionTest';import TokenTransfer from'./TokenTransfer';import BurnToken from'./BurnToken';import TransactionHistory from'./TransactionHistory';import{clusterApiUrl}from'@solana/web3.js';import TokenService from'../services/token-service';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const{connected,accounts,currentAccount}=useWallet();const[activeTab,setActiveTab]=useState('wallet');const[tokenAddress,setTokenAddress]=useState('');// Initialize token service\nuseEffect(()=>{const endpoint=clusterApiUrl('devnet');TokenService.initialize(endpoint);},[]);const renderTabContent=()=>{switch(activeTab){case'wallet':return/*#__PURE__*/_jsx(WalletConnectionTest,{});case'transfer':return/*#__PURE__*/_jsx(TokenTransfer,{tokenAddress:tokenAddress});case'burn':return/*#__PURE__*/_jsx(BurnToken,{tokenAddress:tokenAddress});case'history':return/*#__PURE__*/_jsx(TransactionHistory,{tokenAddress:tokenAddress});default:return/*#__PURE__*/_jsx(WalletConnectionTest,{});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-container p-4\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"row mb-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"col\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Alebrije Wallet Dashboard\"}),connected&&/*#__PURE__*/_jsxs(\"p\",{className:\"text-muted\",children:[\"Connected: \",currentAccount===null||currentAccount===void 0?void 0:currentAccount.slice(0,6),\"...\",currentAccount===null||currentAccount===void 0?void 0:currentAccount.slice(-4)]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"row mb-4\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col\",children:/*#__PURE__*/_jsxs(\"ul\",{className:\"nav nav-tabs\",children:[/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{className:`nav-link ${activeTab==='wallet'?'active':''}`,onClick:()=>setActiveTab('wallet'),children:\"Wallet\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{className:`nav-link ${activeTab==='transfer'?'active':''}`,onClick:()=>setActiveTab('transfer'),disabled:!connected,children:\"Transfer Tokens\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{className:`nav-link ${activeTab==='burn'?'active':''}`,onClick:()=>setActiveTab('burn'),disabled:!connected,children:\"Burn Tokens\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"nav-item\",children:/*#__PURE__*/_jsx(\"button\",{className:`nav-link ${activeTab==='history'?'active':''}`,onClick:()=>setActiveTab('history'),disabled:!connected,children:\"Transaction History\"})})]})})}),(activeTab==='transfer'||activeTab==='burn'||activeTab==='history')&&connected&&/*#__PURE__*/_jsx(\"div\",{className:\"row mb-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"col\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"input-group-text\",children:\"Token Address\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",value:tokenAddress,onChange:e=>setTokenAddress(e.target.value),placeholder:\"Enter token mint address (optional)\"})]}),/*#__PURE__*/_jsx(\"small\",{className:\"text-muted\",children:activeTab==='transfer'?'Enter the mint address of the token you want to transfer':activeTab==='burn'?'Enter the mint address of the token you want to burn':'Enter a token address to filter transactions, or leave empty to see all'})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col\",children:renderTabContent()})})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","useWallet","WalletConnectionTest","TokenTransfer","BurnToken","TransactionHistory","clusterApiUrl","TokenService","jsx","_jsx","jsxs","_jsxs","Dashboard","connected","accounts","currentAccount","activeTab","setActiveTab","tokenAddress","setTokenAddress","endpoint","initialize","renderTabContent","className","children","slice","onClick","disabled","type","value","onChange","e","target","placeholder"],"sources":["/Users/rastavo/alebrije-project/alebrije-wallet/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWallet } from '../contexts/WalletContext';\nimport WalletConnectionTest from './WalletConnectionTest';\nimport TokenTransfer from './TokenTransfer';\nimport BurnToken from './BurnToken';\nimport TransactionHistory from './TransactionHistory';\nimport { clusterApiUrl } from '@solana/web3.js';\nimport TokenService from '../services/token-service';\n\nconst Dashboard = () => {\n  const { connected, accounts, currentAccount } = useWallet();\n  const [activeTab, setActiveTab] = useState('wallet');\n  const [tokenAddress, setTokenAddress] = useState('');\n  \n  // Initialize token service\n  useEffect(() => {\n    const endpoint = clusterApiUrl('devnet');\n    TokenService.initialize(endpoint);\n  }, []);\n  \n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'wallet':\n        return <WalletConnectionTest />;\n      case 'transfer':\n        return <TokenTransfer tokenAddress={tokenAddress} />;\n      case 'burn':\n        return <BurnToken tokenAddress={tokenAddress} />;\n      case 'history':\n        return <TransactionHistory tokenAddress={tokenAddress} />;\n      default:\n        return <WalletConnectionTest />;\n    }\n  };\n  \n  return (\n    <div className=\"dashboard-container p-4\">\n      <div className=\"row mb-4\">\n        <div className=\"col\">\n          <h2>Alebrije Wallet Dashboard</h2>\n          {connected && (\n            <p className=\"text-muted\">\n              Connected: {currentAccount?.slice(0, 6)}...{currentAccount?.slice(-4)}\n            </p>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"row mb-4\">\n        <div className=\"col\">\n          <ul className=\"nav nav-tabs\">\n            <li className=\"nav-item\">\n              <button \n                className={`nav-link ${activeTab === 'wallet' ? 'active' : ''}`}\n                onClick={() => setActiveTab('wallet')}\n              >\n                Wallet\n              </button>\n            </li>\n            <li className=\"nav-item\">\n              <button \n                className={`nav-link ${activeTab === 'transfer' ? 'active' : ''}`}\n                onClick={() => setActiveTab('transfer')}\n                disabled={!connected}\n              >\n                Transfer Tokens\n              </button>\n            </li>\n            <li className=\"nav-item\">\n              <button \n                className={`nav-link ${activeTab === 'burn' ? 'active' : ''}`}\n                onClick={() => setActiveTab('burn')}\n                disabled={!connected}\n              >\n                Burn Tokens\n              </button>\n            </li>\n            <li className=\"nav-item\">\n              <button \n                className={`nav-link ${activeTab === 'history' ? 'active' : ''}`}\n                onClick={() => setActiveTab('history')}\n                disabled={!connected}\n              >\n                Transaction History\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n      \n      {(activeTab === 'transfer' || activeTab === 'burn' || activeTab === 'history') && connected && (\n        <div className=\"row mb-4\">\n          <div className=\"col\">\n            <div className=\"input-group\">\n              <span className=\"input-group-text\">Token Address</span>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={tokenAddress}\n                onChange={(e) => setTokenAddress(e.target.value)}\n                placeholder=\"Enter token mint address (optional)\"\n              />\n            </div>\n            <small className=\"text-muted\">\n              {activeTab === 'transfer' \n                ? 'Enter the mint address of the token you want to transfer'\n                : activeTab === 'burn'\n                ? 'Enter the mint address of the token you want to burn'\n                : 'Enter a token address to filter transactions, or leave empty to see all'}\n            </small>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"row\">\n        <div className=\"col\">\n          {renderTabContent()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}