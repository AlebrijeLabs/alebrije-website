{"ast":null,"code":"import bs58 from 'bs58';\nimport { toHex } from 'viem';\nimport { ConstantsUtil } from '@reown/appkit-common';\nimport { AccountController, ChainController, ConstantsUtil as CoreConstantsUtil, CoreHelperUtil } from '@reown/appkit-controllers';\nimport { AdapterBlueprint } from '../adapters/ChainAdapterBlueprint.js';\nimport { WalletConnectConnector } from '../connectors/WalletConnectConnector.js';\nimport { WcConstantsUtil } from '../utils/ConstantsUtil.js';\nexport class UniversalAdapter extends AdapterBlueprint {\n  setUniversalProvider(universalProvider) {\n    this.addConnector(new WalletConnectConnector({\n      provider: universalProvider,\n      caipNetworks: this.caipNetworks || [],\n      namespace: this.namespace\n    }));\n  }\n  async connect(params) {\n    return Promise.resolve({\n      id: 'WALLET_CONNECT',\n      type: 'WALLET_CONNECT',\n      chainId: Number(params.chainId),\n      provider: this.provider,\n      address: ''\n    });\n  }\n  async disconnect() {\n    try {\n      const connector = this.getWalletConnectConnector();\n      await connector.disconnect();\n    } catch (error) {\n      console.warn('UniversalAdapter:disconnect - error', error);\n    }\n  }\n  async getAccounts(_ref) {\n    let {\n      namespace\n    } = _ref;\n    const provider = this.provider;\n    const addresses = provider?.session?.namespaces?.[namespace]?.accounts?.map(account => {\n      const [,, address] = account.split(':');\n      return address;\n    }).filter((address, index, self) => self.indexOf(address) === index) || [];\n    return Promise.resolve({\n      accounts: addresses.map(address => CoreHelperUtil.createAccount(namespace, address, namespace === 'bip122' ? 'payment' : 'eoa'))\n    });\n  }\n  async syncConnectors() {\n    return Promise.resolve();\n  }\n  async getBalance(params) {\n    const isBalanceSupported = params.caipNetwork && CoreConstantsUtil.BALANCE_SUPPORTED_CHAINS.includes(params.caipNetwork?.chainNamespace);\n    if (!isBalanceSupported || params.caipNetwork?.testnet) {\n      return {\n        balance: '0.00',\n        symbol: params.caipNetwork?.nativeCurrency.symbol || ''\n      };\n    }\n    if (AccountController.state.balanceLoading && params.chainId === ChainController.state.activeCaipNetwork?.id) {\n      return {\n        balance: AccountController.state.balance || '0.00',\n        symbol: AccountController.state.balanceSymbol || ''\n      };\n    }\n    const balances = await AccountController.fetchTokenBalance();\n    const balance = balances.find(b => b.chainId === `${params.caipNetwork?.chainNamespace}:${params.chainId}` && b.symbol === params.caipNetwork?.nativeCurrency.symbol);\n    return {\n      balance: balance?.quantity.numeric || '0.00',\n      symbol: balance?.symbol || params.caipNetwork?.nativeCurrency.symbol || ''\n    };\n  }\n  async signMessage(params) {\n    const {\n      provider,\n      message,\n      address\n    } = params;\n    if (!provider) {\n      throw new Error('UniversalAdapter:signMessage - provider is undefined');\n    }\n    let signature = '';\n    if (ChainController.state.activeCaipNetwork?.chainNamespace === ConstantsUtil.CHAIN.SOLANA) {\n      const response = await provider.request({\n        method: 'solana_signMessage',\n        params: {\n          message: bs58.encode(new TextEncoder().encode(message)),\n          pubkey: address\n        }\n      }, ChainController.state.activeCaipNetwork?.caipNetworkId);\n      signature = response.signature;\n    } else {\n      signature = await provider.request({\n        method: 'personal_sign',\n        params: [message, address]\n      }, ChainController.state.activeCaipNetwork?.caipNetworkId);\n    }\n    return {\n      signature\n    };\n  }\n  // -- Transaction methods ---------------------------------------------------\n  /**\n   *\n   * These methods are supported only on `wagmi` and `ethers` since the Solana SDK does not support them in the same way.\n   * These function definition is to have a type parity between the clients. Currently not in use.\n   */\n  async estimateGas() {\n    return Promise.resolve({\n      gas: BigInt(0)\n    });\n  }\n  async getProfile() {\n    return Promise.resolve({\n      profileImage: '',\n      profileName: ''\n    });\n  }\n  async sendTransaction() {\n    return Promise.resolve({\n      hash: ''\n    });\n  }\n  walletGetAssets(_params) {\n    return Promise.resolve({});\n  }\n  async writeContract() {\n    return Promise.resolve({\n      hash: ''\n    });\n  }\n  async getEnsAddress() {\n    return Promise.resolve({\n      address: false\n    });\n  }\n  parseUnits() {\n    return 0n;\n  }\n  formatUnits() {\n    return '0';\n  }\n  async getCapabilities() {\n    return Promise.resolve({});\n  }\n  async grantPermissions() {\n    return Promise.resolve({});\n  }\n  async revokePermissions() {\n    return Promise.resolve('0x');\n  }\n  async syncConnection() {\n    return Promise.resolve({\n      id: 'WALLET_CONNECT',\n      type: 'WALLET_CONNECT',\n      chainId: 1,\n      provider: this.provider,\n      address: ''\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/require-await\n  async switchNetwork(params) {\n    const {\n      caipNetwork\n    } = params;\n    const connector = this.getWalletConnectConnector();\n    if (caipNetwork.chainNamespace === ConstantsUtil.CHAIN.EVM) {\n      try {\n        await connector.provider?.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: toHex(caipNetwork.id)\n          }]\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (switchError) {\n        if (switchError.code === WcConstantsUtil.ERROR_CODE_UNRECOGNIZED_CHAIN_ID || switchError.code === WcConstantsUtil.ERROR_INVALID_CHAIN_ID || switchError.code === WcConstantsUtil.ERROR_CODE_DEFAULT || switchError?.data?.originalError?.code === WcConstantsUtil.ERROR_CODE_UNRECOGNIZED_CHAIN_ID) {\n          try {\n            await connector.provider?.request({\n              method: 'wallet_addEthereumChain',\n              params: [{\n                chainId: toHex(caipNetwork.id),\n                rpcUrls: [caipNetwork?.rpcUrls['chainDefault']?.http],\n                chainName: caipNetwork.name,\n                nativeCurrency: caipNetwork.nativeCurrency,\n                blockExplorerUrls: [caipNetwork.blockExplorers?.default.url]\n              }]\n            });\n          } catch (error) {\n            throw new Error('Chain is not supported');\n          }\n        }\n      }\n    }\n    connector.provider.setDefaultChain(caipNetwork.caipNetworkId);\n  }\n  getWalletConnectProvider() {\n    const connector = this.connectors.find(c => c.type === 'WALLET_CONNECT');\n    const provider = connector?.provider;\n    return provider;\n  }\n}","map":{"version":3,"names":["bs58","toHex","ConstantsUtil","AccountController","ChainController","CoreConstantsUtil","CoreHelperUtil","AdapterBlueprint","WalletConnectConnector","WcConstantsUtil","UniversalAdapter","setUniversalProvider","universalProvider","addConnector","provider","caipNetworks","namespace","connect","params","Promise","resolve","id","type","chainId","Number","address","disconnect","connector","getWalletConnectConnector","error","console","warn","getAccounts","_ref","addresses","session","namespaces","accounts","map","account","split","filter","index","self","indexOf","createAccount","syncConnectors","getBalance","isBalanceSupported","caipNetwork","BALANCE_SUPPORTED_CHAINS","includes","chainNamespace","testnet","balance","symbol","nativeCurrency","state","balanceLoading","activeCaipNetwork","balanceSymbol","balances","fetchTokenBalance","find","b","quantity","numeric","signMessage","message","Error","signature","CHAIN","SOLANA","response","request","method","encode","TextEncoder","pubkey","caipNetworkId","estimateGas","gas","BigInt","getProfile","profileImage","profileName","sendTransaction","hash","walletGetAssets","_params","writeContract","getEnsAddress","parseUnits","formatUnits","getCapabilities","grantPermissions","revokePermissions","syncConnection","switchNetwork","EVM","switchError","code","ERROR_CODE_UNRECOGNIZED_CHAIN_ID","ERROR_INVALID_CHAIN_ID","ERROR_CODE_DEFAULT","data","originalError","rpcUrls","http","chainName","name","blockExplorerUrls","blockExplorers","default","url","setDefaultChain","getWalletConnectProvider","connectors","c"],"sources":["../../../../src/universal-adapter/client.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}